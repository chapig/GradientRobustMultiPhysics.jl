var documenterSearchIndex = {"docs":
[{"location":"interpolations/#Finite-Element-Interpolations","page":"FE Interpolation","title":"Finite Element Interpolations","text":"","category":"section"},{"location":"interpolations/","page":"FE Interpolation","title":"FE Interpolation","text":"Each finite element has its standard interpolator that can be applied to some user-defined DataFunction.","category":"page"},{"location":"interpolations/","page":"FE Interpolation","title":"FE Interpolation","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"interpolations.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"interpolations/#GradientRobustMultiPhysics.interpolate!-Tuple{FEVectorBlock,Type{var\"#s110\"} where var\"#s110\"<:AbstractAssemblyType,UserData{AbstractDataFunction}}","page":"FE Interpolation","title":"GradientRobustMultiPhysics.interpolate!","text":"function interpolate!(Target::FEVectorBlock,\n     AT::Type{<:AbstractAssemblyType},\n     source_data::UserData{AbstractDataFunction};\n     items = [],\n     time = 0,\n     verbosity::Int = 0)\n\nInterpolates the given sourcedata into the finite elements space assigned to the Target FEVectorBlock with the specified AbstractAssemblyType (usualy ONCELLS). The optional time argument is only used if the source_data depends on time.\n\n\n\n\n\n","category":"method"},{"location":"interpolations/#GradientRobustMultiPhysics.interpolate!-Tuple{FEVectorBlock,UserData{AbstractDataFunction}}","page":"FE Interpolation","title":"GradientRobustMultiPhysics.interpolate!","text":"function interpolate!(Target::FEVectorBlock,\n     source_data::UserData{AbstractDataFunction};\n     items = [],\n     time = 0,\n     verbosity::Int = 0)\n\nInterpolates the given sourcedata into the finite element space assigned to the Target FEVectorBlock. The optional time argument is only used if the sourcedata depends on time.\n\n\n\n\n\n","category":"method"},{"location":"interpolations/#GradientRobustMultiPhysics.nodevalues!","page":"FE Interpolation","title":"GradientRobustMultiPhysics.nodevalues!","text":"function nodevalues!(\n    Target::AbstractArray{<:Real,2},\n    Source::FEVectorBlock,\n    operator::Type{<:AbstractFunctionOperator} = Identity;\n    regions::Array{Int,1} = [0],\n    target_offset::Int = 0,   # start to write into Target after offset\n    zero_target::Bool = true, # target vector is zeroed\n    continuous::Bool = false)\n\nEvaluates the finite element function with the coefficient vector Source and the specified FunctionOperator at all the nodes of the (specified regions of the) grid and writes the values into Target. Discontinuous (continuous = false) quantities are averaged.\n\n\n\n\n\n","category":"function"},{"location":"examples/doc_3d_bestapprox_divpreserve/#D-Divergence-Preserving-L2-Bestapproximation","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"","category":"section"},{"location":"examples/doc_3d_bestapprox_divpreserve/","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"(source code)","category":"page"},{"location":"examples/doc_3d_bestapprox_divpreserve/","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"This example computes the L2-bestapproximation of some given vector-valued function into an Hdiv-conforming finite element space. It also preserves the divergence of the function in the sense that the divergence of the approximation equals the piecewise integral mean of the exact divergence. Afterwards the L2 error (also of the divergence) is computed.","category":"page"},{"location":"examples/doc_3d_bestapprox_divpreserve/","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"module Example_3DBestapproxDivpreserve\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# define some vector field that should be approximated\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]^3+x[3]^2\n    result[2] = -x[1]^2 + x[2] + 1\n    result[3] = x[1]*x[2]\nend\n# define its divergence\nfunction exact_divergence!(result,x::Array{<:Real,1})\n    result[1] = 3*x[1]*x[1] + 1\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1)\n\n    # generate a unit square mesh and refine\n    xgrid = uniform_refine(reference_domain(Tetrahedron3D),4)\n\n    # negotiate exact_function! and exact_curl! to the package\n    user_function = DataFunction(exact_function!, [3,3]; name = \"u_exact\", dependencies = \"X\", quadorder = 3)\n    user_function_div = DataFunction(exact_divergence!, [1,3]; name = \"div(u_exact)\", dependencies = \"X\", quadorder = 2)\n\n    # setup a bestapproximation problem via a predefined prototype\n    Problem = L2BestapproximationProblem(user_function; bestapprox_boundary_regions = [])\n\n    # add a new unknown (Lagrange multiplier that handles the divergence constraint)\n    # here 1 is the number of components (it is scalar-valued) and 3 is the space dimension\n    add_unknown!(Problem; unknown_name = \"Lagrange multiplier for divergence\", equation_name = \"divergence constraint\")\n    add_operator!(Problem, [1,2], LagrangeMultiplier(Divergence))\n\n    # add the right-hand side data for the constraint and inspect the defined problem\n    add_rhsdata!(Problem, 2, RhsOperator(Identity, [0], user_function_div))\n    Base.show(Problem)\n\n    # choose some (inf-sup stable) finite element types\n    #FEType = [HDIVRT0{3}, H1P0{1}]\n    FEType = [HDIVBDM1{3}, H1P0{1}]\n    FES = [FESpace{FEType[1]}(xgrid),FESpace{FEType[2]}(xgrid; broken = true)]\n\n    # create a solution vector and solve the problem\n    Solution = FEVector{Float64}(\"L2-Bestapproximation\",FES)\n    solve!(Solution, Problem; verbosity = verbosity)\n\n    # calculate L2 error and L2 divergence error\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    L2DivergenceErrorEvaluator = L2ErrorIntegrator(Float64, user_function_div, Divergence)\n    println(\"\\nL2error(Id) = $(sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\")\n    println(\"L2error(div) = $(sqrt(evaluate(L2DivergenceErrorEvaluator,Solution[1])))\")\n\nend\n\nend","category":"page"},{"location":"examples/doc_3d_bestapprox_divpreserve/","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"Main.##314.Example_3DBestapproxDivpreserve","category":"page"},{"location":"examples/doc_3d_bestapprox_divpreserve/#Output-of-default-main()-run","page":"3D Divergence-Preserving L2-Bestapproximation","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_3d_bestapprox_divpreserve/","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"Example_3DBestapproxDivpreserve.main()","category":"page"},{"location":"examples/doc_3d_bestapprox_divpreserve/","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"\nPDE-DESCRIPTION\n===============\n  system name = L2-Bestapproximation problem\n\n     id   | unknown name / equation name\n    [1]   | L2-bestapproximation / L2-bestapproximation equation \n    [2]   | Lagrange multiplier for divergence / divergence constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | Reaction (regions = [0])\n    [1,2]   | LagrangeMultiplier(Divergence) (regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | u_exact * Identity(v_h) (regions = [0])\n     [2]    | div(u_exact) * Identity(v_h) (regions = [0])\n\n   BoundaryOperator[1] : \n   BoundaryOperator[2] : \n\n\nSOLVER\n======\n  system name = L2-Bestapproximation problem  @time = 0\n\n  target (FE) = L2-Bestapproximation [1] (HDIVBDM1{3}, ndofs = 26112)\n                L2-Bestapproximation [2] (H1P0{1} (broken), ndofs = 4096)\n                \n  subiteration | equations that are solved together\n       [1]     | L2-bestapproximation equation\n               | divergence constraint\n\n  residuals = [3.521686097985737e-32, 7.819536712669159e-36]\n\nL2error(Id) = 0.00017706474627459623\nL2error(div) = 0.00987828043623494\n","category":"page"},{"location":"examples/doc_3d_bestapprox_divpreserve/","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"","category":"page"},{"location":"examples/doc_3d_bestapprox_divpreserve/","page":"3D Divergence-Preserving L2-Bestapproximation","title":"3D Divergence-Preserving L2-Bestapproximation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_1d_bestapprox/#D-L2-Bestapproximation","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"","category":"section"},{"location":"examples/doc_1d_bestapprox/","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"(source code)","category":"page"},{"location":"examples/doc_1d_bestapprox/","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"This example computes the L2-bestapproximation of some given scalar-valued function into the piecewise quadratic continuous polynomials. Afterwards the L2 error is computed and the solution is plotted.","category":"page"},{"location":"examples/doc_1d_bestapprox/","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"module Example_1DBestapprox\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing GridVisualize\n\n# define some (vector-valued) function (to be L2-bestapproximated in this example)\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = (x[1]-1//2)*(x[1]-9//10)*(x[1]-1//3)*(x[1]-1//10)\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 1, nrefs = 2, broken::Bool = false)\n\n    # generate mesh and uniform refine nrefs times\n    xgrid = simplexgrid([0.0,1//3,2//3,1.0])\n    xgrid = uniform_refine(xgrid,nrefs)\n\n    # negotiate exact_function! to the package\n    user_function = DataFunction(exact_function!, [1,1]; name = \"u_exact\", dependencies = \"X\", quadorder = 4)\n\n    # setup a bestapproximation problem via a predefined prototype\n    # and an L2ErrorEvaluator that can be used later to compute the L2 error\n    Problem = L2BestapproximationProblem(user_function; bestapprox_boundary_regions = [1,2])\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n\n    # choose some finite element type and generate a FESpace for the grid\n    # (here it is a one-dimensional H1-conforming P2 element H1P2{1,1})\n    # the broken switch toggles a broken dofmap\n    FEType = H1P2{1,1}\n    FES = FESpace{FEType}(xgrid; broken = broken)\n\n    # generate a solution vector and solve the problem\n    # (the verbosity argument that many functions have steers the talkativity,\n    #  the larger the number, the more details)\n    Solution = FEVector{Float64}(\"L2-Bestapproximation\",FES)\n    solve!(Solution, Problem; verbosity = verbosity)\n\n    # calculate the L2 error\n    L2error = sqrt(evaluate(L2ErrorEvaluator,Solution[1]))\n    println(\"\\nL2error(BestApprox) = $L2error\")\n\n    # to compare our discrete solution with a finer one, we interpolate the exact function\n    # again on some more refined mesh and also compute the L2 error on this one\n    xgrid_fine = uniform_refine(xgrid,2)\n    FES_fine = FESpace{FEType}(xgrid_fine)\n    Interpolation = FEVector{Float64}(\"fine-grid interpolation\",FES_fine)\n    interpolate!(Interpolation[1], ON_CELLS, user_function; verbosity = verbosity)\n    println(\"\\nL2error(FineInterpol) = $(sqrt(evaluate(L2ErrorEvaluator,Interpolation[1])))\")\n\n    # evaluate/interpolate function at nodes and plot\n    if Plotter != nothing\n        nodevals = zeros(Float64,1,size(xgrid[Coordinates],2))\n        nodevalues!(nodevals,Solution[1],FES)\n        p=GridVisualizer(Plotter=Plotter,layout=(1,1))\n        scalarplot!(p[1,1],xgrid, nodevals[1,:], color=(0,1,0), label = \"coarse approximation\")\n\n        nodevals_fine = zeros(Float64,1,size(xgrid_fine[Coordinates],2))\n        nodevalues!(nodevals_fine,Interpolation[1],FES_fine)\n        scalarplot!(p[1,1],xgrid_fine, nodevals_fine[1,:], clear = false, color = (1,0,0), label = \"fine interpolation\",show=true)\n    end\nend\n\nend","category":"page"},{"location":"examples/doc_1d_bestapprox/","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"Main.##253.Example_1DBestapprox","category":"page"},{"location":"examples/doc_1d_bestapprox/#Output-of-default-main()-run","page":"1D L2-Bestapproximation","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_1d_bestapprox/","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"Example_1DBestapprox.main()","category":"page"},{"location":"examples/doc_1d_bestapprox/","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"\nSOLVER\n======\n  system name = L2-Bestapproximation problem  @time = 0\n\n  target (FE) = L2-Bestapproximation (H1P2{1,1}, ndofs = 25)\n                \n  subiteration | equations that are solved together\n       [1]     | L2-bestapproximation equation\n\n  residuals = [1.253437832593499e-38]\n\nL2error(BestApprox) = 2.2963141201221227e-5\n\nINTERPOLATING\n=============\n     source = u_exact @time = 0\n     target = fine-grid interpolation\n         AT = ON_CELLS\n         FE = H1P2{1,1} (ndofs = 97)\n\nL2error(FineInterpol) = 3.639106661449341e-7\n","category":"page"},{"location":"examples/doc_1d_bestapprox/","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"","category":"page"},{"location":"examples/doc_1d_bestapprox/","page":"1D L2-Bestapproximation","title":"1D L2-Bestapproximation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"viewers/#Export-and-Viewers","page":"Export/Viewers","title":"Export and Viewers","text":"","category":"section"},{"location":"viewers/","page":"Export/Viewers","title":"Export/Viewers","text":"Plotting is possible e.g. via calculation of nodal values and the plot routines from ExtendableGrids.jl. It is also possible to export (the nodal values) of a FEVector as a vtk datafile and load it into e.g. paraview.","category":"page"},{"location":"viewers/","page":"Export/Viewers","title":"Export/Viewers","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"plots.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"viewers/#GradientRobustMultiPhysics.plot-Tuple{FEVector,Array{Int64,1},Array{DataType,1}}","page":"Export/Viewers","title":"GradientRobustMultiPhysics.plot","text":"plot(Source::FEVector, blockids::Array{Int64,1}, operators::Array{DataType,1}; Plotter, resolution, subplots_per_column, use_subplots, colorlevels, isolines, aspect, show, clear, cbar, verbosity, cmap, maintitle, fsize)\n\n\nPlots operators applied to components of a given FEVector Source (operator[j9] is applied to component with blockids[j]) via ExtendablePlots.plot, either in one window with subplots or several single plots.\n\nIf blockids[j] == 0, a plot of the grid is generated at the j-th subplot.\n\nPlotter = PyPlot should work in 2D Plotter = Makie should work in 3D (but only with a single plot currently)\n\n\n\n\n\n","category":"method"},{"location":"viewers/","page":"Export/Viewers","title":"Export/Viewers","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"dataexport.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"viewers/#GradientRobustMultiPhysics.writeCSV!-Tuple{String,FEVector}","page":"Export/Viewers","title":"GradientRobustMultiPhysics.writeCSV!","text":"writeCSV!(filename::String, Source::FEVector; blockids, operators, names, seperator, verbosity)\n\n\nWrites the specified FEVector into a CSV datafile with the given filename. First d colomuns are the grid coordinates, the remaining column are filled with the evaluations of the operators where operator[j] is applied to Source[blockids[j]].\n\n\n\n\n\n","category":"method"},{"location":"viewers/#GradientRobustMultiPhysics.writeVTK!-Tuple{String,FEVector}","page":"Export/Viewers","title":"GradientRobustMultiPhysics.writeVTK!","text":"writeVTK!(filename::String, Data::FEVector; blocks, operators, names, vectorabs)\n\n\nWrites the specified FEVector into a vtk datafile with the given filename. Each component of each FEVectorBlock (or the subset specified by blocks) is saved separately. Vector-valued quantities also generate a data field that represents the absolute value of the vector field at each grid point.\n\n\n\n\n\n","category":"method"},{"location":"userdata/#User-Data-and-Action-Kernels","page":"User Data","title":"User Data and Action Kernels","text":"","category":"section"},{"location":"userdata/","page":"User Data","title":"User Data","text":"There is a variety of different user data, like scalar- and vector-valued constants, time-dependent data, region-dependent data or plain functions that depend on the the space coordinates. To allow for flexible user-specified data, all functions have to be negotiated by the UserData interface that fixes the order and number of dependencies.","category":"page"},{"location":"userdata/#Data-Functions","page":"User Data","title":"Data Functions","text":"","category":"section"},{"location":"userdata/","page":"User Data","title":"User Data","text":"The simplest form of user data is called DataFunction and satisfies the interface","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"function data_function!(result,x::Array{<:Real,1},t::Real)\n    # definition of result, possibly dependent on\n    # X = space coordinates\n    # T = time\nend","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"where the result vector carries the result of the function. Additionally, it can (but not has to) depend on the further inputs X (space coordinates) or T (time) DataFunctions can be used to define boundary data, right-hand side functions and can be interpolated by the finite element standard interpolations.","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"There are also ExtendedDataFunction that can additionally depend on R (region), I (item number) and L (local coordinates). The dependencies are stated via a string in the constructor that should be a substring of \"XTRIL\". However, extended data functions cannot be used everywhere.","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"DataFunction\nExtendedDataFunction","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.DataFunction","page":"User Data","title":"GradientRobustMultiPhysics.DataFunction","text":"function DataFunction(\n    f::Function,\n    dimensions::Array{Int,1};\n    name = \"user data function\",\n    dependencies::String = \"\",\n    quadorder::Int = 0)\n\nProvides a negotation interface for some user-defined function that  can be used in integrate! and boundary or right-hand side data assignments. The function f has to obey the interface\n\nf(result, [X, T])\n\nwhere the parameters X (= space coordinates) and T ( = time) are optional. Which of them are used has to be specified in the  String dependencies. The string \"X\" for example specifies that the interface is only space-dependent, i.e\n\nf(result, X)\n\nThe array dimensions specifies the expected length of result and input and quadorder determines the additional quadrature order to be used if this function is involved in some quadrature-requireing procedure.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#GradientRobustMultiPhysics.ExtendedDataFunction","page":"User Data","title":"GradientRobustMultiPhysics.ExtendedDataFunction","text":"function ExtendedDataFunction(\n    f::Function,\n    dimensions::Array{Int,1};\n    name = \"user data function\",\n    dependencies::String = \"\",\n    quadorder::Int = 0)\n\nProvides a negotation interface for some data function with extended dependencies (region number, item number and local coordinates) that can be used in integrate!. The function f has to obey the interface\n\nf(result, [X, T, R, I, L])\n\nwhere the parameters X (= space coordinates) and T ( = time) are optional. Which of them are used has to be specified in the  String dependencies. The string \"X,I\" for example specifies that the interface is only space-dependent and item-dependent, i.e\n\nf(result, X, I)\n\nThe array dimensions specifies the expected length of result and X (if X-depdendent, otherwise will be ignored) and quadorder determines the additional quadrature order to be used if this function is involved in some quadrature-requireing procedure.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#Action-Kernels","page":"User Data","title":"Action Kernels","text":"","category":"section"},{"location":"userdata/","page":"User Data","title":"User Data","text":"Another for of user data are action kernel used to define an AbstractAction. Actions modify arguments of Assembly Patterns (usually all but the last one) and so allow parameter-depend assemblies. To use them, the user defines some kernel function for the action that has the interface","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"function action_kernel!(result,input,X,T,R,I,L)\n    # result = modified input, e.g.\n    # multiplication with some parameter that can depend on\n    # X = space coordinates\n    # T = time\n    # R = region number\n    # I = item number (cell, face or edge number depending on assembly type)\n    # L = local coordinates on item reference domain\nend","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"During assembly, input (in general) takes the role of all non-testfunction arguments and the result vector will be the one that is multiplied with the testfunctions. Additionally, the kernel function can depend on X, T, R, I and L as specified above. Again, the dependencies of an action_kernel are stated via a string in the constructor that should be a substring of \"XTRIL\". Note, that the avoidance of the X-dependency spares the computation of the global coordinates of the quadrature points in the assembly loops. Moreover, time-dependency of an action kernel e.g. triggers reassembly of the associated PDEoperator in each time step.","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"ActionKernel\nNLActionKernel","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.ActionKernel","page":"User Data","title":"GradientRobustMultiPhysics.ActionKernel","text":"function ActionKernel(\n    f::Function,\n    dimensions::Array{Int,1};\n    name = \"user action kernel\",\n    dependencies::String = \"\",\n    quadorder::Int = 0)\n\nProvides a negotation interface for some function that can be used in the Action constructor to define a user-defined operator action. The function has to obey the interface\n\nf(result, input, [X, T, R, I, L])\n\nwhere the parameters X (= space coordinates), T ( = time), R (= region number), I (= item number), L (= local coordinates) are optional. Which of them are used has to be specified in the String dependencies. The string \"XT\" for example specifies that the interface is only space and time dependent, i.e\n\nf(result, input, X, T)\n\nThe input vector usually provides the FunctionOperator evaluations of (a subset of) the ansatz arguments of the assembly pattern where the action is used. The array dimensions specifies the expected length of result and input and quadorder determines the additional quadrature order to be used if this function (or its derived action) is involved in an assembly process.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#GradientRobustMultiPhysics.NLActionKernel","page":"User Data","title":"GradientRobustMultiPhysics.NLActionKernel","text":"function NLActionKernel(\n    f::Function,\n    dimensions::Array{Int,1};\n    name = \"nonlinear user action kernel\",\n    dependencies::String = \"\",\n    quadorder::Int = 0)\n\nProvides a negotation interface for some function to be used as a nonlinear action kernel that can be used in the NonlinearOperator constructor without automatic differentiation. The function f has to obey the interface\n\nf(result, input_current, input_ansatz)\n\nand can be seen as a linearisation of a nonlinearity that can depend on the operator evaluation of the current iterate (inputcurrent) and, as usual, the operator evaluations of the ansatz function (inputansatz).\n\nNo further dependencies are allowed currently. Note, that this is a work-in-progress feature.\n\n\n\n\n\n","category":"function"},{"location":"userdata/#Actions","page":"User Data","title":"Actions","text":"","category":"section"},{"location":"userdata/","page":"User Data","title":"User Data","text":"Actions are used by Assembly Patterns and consist of an action kernel plus some additional infratructure. To generate an action from an action kernel works via the following functions.","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"Action","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.Action","page":"User Data","title":"GradientRobustMultiPhysics.Action","text":"function Action(\n    T::Type{<:Real},\n    kernel::UserData{<:AbstractActionKernel};\n    name::String = \"user action\"\n\nCreates an Action from a given specified action kernel that then can be used in an assembly pattern. T specifies the number format that should match the number format of the used quadrature rules and grid coordinates in the mesh (usually Float64).\n\n\n\n\n\n","category":"type"},{"location":"userdata/","page":"User Data","title":"User Data","text":"Moreover, there are some shortcut action constructors that can be used directly without defining an action kernel first.","category":"page"},{"location":"userdata/","page":"User Data","title":"User Data","text":"MultiplyScalarAction\nDoNotChangeAction","category":"page"},{"location":"userdata/#GradientRobustMultiPhysics.MultiplyScalarAction","page":"User Data","title":"GradientRobustMultiPhysics.MultiplyScalarAction","text":"function MultiplyScalarAction(value, ncomponents::Int)\n\nDirectly creates an Action that multiplies a scalar value to the input (vector of length ncomponents).\n\n\n\n\n\n","category":"function"},{"location":"userdata/#GradientRobustMultiPhysics.DoNotChangeAction","page":"User Data","title":"GradientRobustMultiPhysics.DoNotChangeAction","text":"function MultiplyScalarAction(value, ncomponents::Int)\n\nDirectly creates an Action that just copies the input to the result.\n\n\n\n\n\n","category":"function"},{"location":"examples/doc_2d_lshape_adaptivity/#D-Adaptive-Mesh-Refinement-(L-shape)","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"","category":"section"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"(source code)","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"This example computes the standard-residual error estimator for the H^1 error of some H^1-conforming approximation u_h to the solution u of some Poisson problem -Delta u = f on an L-shaped domain, i.e.","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"eta^2(u_h) = sum_T in mathcalT lvert T rvert  f + Delta u_h ^2_L^2(T)\n+ sum_F in mathcalF lvert F rvert  nabla u_h mathbfn ^2_L^2(F)","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"This example script showcases the evaluation of 2nd order derivatives like the Laplacian and adaptive mesh refinement.","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"module Example_Lshape\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n# exact solution u for the Poisson problem\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    result[1] = sin(2*result[1]/3)\n    result[1] *= (x[1]^2 + x[2]^2)^(1/3)\nend\n# ... and its gradient\nfunction exact_function_gradient!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    # du/dy = du/dr * sin(phi) + (1/r) * du/dphi * cos(phi)\n    result[2] = sin(2*result[1]/3) * sin(result[1]) + cos(2*result[1]/3) * cos(result[1])\n    result[2] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\n    # du/dx = du/dr * cos(phi) - (1/r) * du/dphi * sin(phi)\n    result[1] = sin(2*result[1]/3) * cos(result[1]) - cos(2*result[1]/3) * sin(result[1])\n    result[1] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1, nlevels = 18, theta = 1//3, Plotter = nothing)\n\n    # initial grid\n    xgrid = uniform_refine(grid_lshape(Triangle2D),2)\n\n    # choose some finite element\n    FEType = H1P2{1,2}\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 5)\n    user_function_gradient = DataFunction(exact_function_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 4)\n\n    # setup Poisson problem\n    Problem = PoissonProblem(2; ncomponents = 1, diffusion = 1.0)\n    add_boundarydata!(Problem, 1, [2,3,4,5,6,7], BestapproxDirichletBoundary; data = user_function)\n    add_boundarydata!(Problem, 1, [1,8], HomogeneousDirichletBoundary)\n\n    # setup exact error evaluations\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n\n    # define error estimator\n    # kernel for jump term : |F| ||[[grad(u_h)*n_F]]||^2_L^2(F)\n    xFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\n    xFaceNormals::Array{Float64,2} = xgrid[FaceNormals]\n    xCellVolumes::Array{Float64,1} = xgrid[CellVolumes]\n    function L2jump_integrand(result, input, item)\n        result[1] = ((input[1]*xFaceNormals[1,item])^2 + (input[2]*xFaceNormals[2,item])^2) * xFaceVolumes[item]\n        return nothing\n    end\n    # kernel for volume term : |T| * ||f + Laplace(u_h)||^2_L^2(T)\n    # note: f = 0 here, but integrand can depend on x to allow for non-homogeneous rhs\n    function L2vol_integrand(result, input, item)\n        result[1] = 0\n        for j = 1 : length(input)\n            result[1] += input[j]^2 * xCellVolumes[item]\n        end\n        return nothing\n    end\n    eta_jumps_action_kernel = ActionKernel(L2jump_integrand, [1,2]; name = \"estimator kernel jumps\", dependencies = \"I\", quadorder = 2)\n    eta_vol_action_kernel = ActionKernel(L2vol_integrand, [1,2]; name = \"estimator kernel volume\", dependencies = \"I\", quadorder = 1)\n    # ... which generates an action...\n    eta_jumps_action = Action(Float64,eta_jumps_action_kernel)\n    eta_vol_action = Action(Float64,eta_vol_action_kernel)\n    # ... which is used inside an ItemIntegrator\n    jumpIntegrator = ItemIntegrator(Float64,ON_IFACES,[GradientDisc{Jump}],eta_jumps_action)\n    volIntegrator = ItemIntegrator(Float64,ON_CELLS,[Laplacian],eta_vol_action)\n\n    # refinement loop (only uniform for now)\n    NDofs = zeros(Int, nlevels)\n    Results = zeros(Float64, nlevels, 3)\n    Solution = nothing\n    for level = 1 : nlevels\n\n        # create a solution vector and solve the problem\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"Discrete Solution\",FES)\n        solve!(Solution, Problem; verbosity = verbosity - 1)\n        NDofs[level] = length(Solution[1])\n        if verbosity > 0\n            println(\"\\n  SOLVE LEVEL $level\")\n            println(\"    ndofs = $(NDofs[level])\")\n        end\n\n        # error estimator jump term\n        # complete error estimator\n        xFaceVolumes = xgrid[FaceVolumes]\n        xFaceNormals = xgrid[FaceNormals]\n        xCellVolumes = xgrid[CellVolumes]\n        vol_error = zeros(Float64,1,num_sources(xgrid[CellNodes]))\n        jump_error = zeros(Float64,1,num_sources(xgrid[FaceNodes]))\n        evaluate!(vol_error,volIntegrator,[Solution[1]])\n        evaluate!(jump_error,jumpIntegrator,[Solution[1]])\n\n        # calculate L2 error, H1 error, estimator and H2 error Results and write to results\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,[Solution[1]]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,[Solution[1]]))\n        Results[level,3] = sqrt(sum(jump_error) + sum(vol_error))\n        if verbosity > 0\n            println(\"  ESTIMATE\")\n            println(\"    estim H1 error = $(Results[level,3])\")\n            println(\"    exact H1 error = $(Results[level,2])\")\n        end\n\n        # mesh refinement\n        if theta >= 1\n            # uniform mesh refinement\n            xgrid = uniform_refine(xgrid)\n        else\n            # adaptive mesh refinement\n            # compute refinement indicators\n            nfaces = num_sources(xgrid[FaceNodes])\n            refinement_indicators = sum(jump_error, dims = 1)\n            xFaceCells = xgrid[FaceCells]\n            cell::Int = 0\n            for face = 1 : nfaces, k = 1 : 2\n                cell = xFaceCells[k,face]\n                if cell > 0\n                    refinement_indicators[face] += vol_error[1,cell]\n                end\n            end\n\n            # refine by red-green-blue refinement (incl. closuring)\n            facemarker = bulk_mark(xgrid, refinement_indicators, theta; verbosity = verbosity, indicator_AT = ON_FACES)\n            xgrid = RGB_refine(xgrid, facemarker; verbosity = verbosity)\n        end\n    end\n\n    # plot\n    GradientRobustMultiPhysics.plot(Solution, [0,1], [Identity,Identity]; Plotter = Plotter, verbosity = verbosity, use_subplots = false)\n\n    # print results\n    @printf(\"\\n  NDOFS  |   L2ERROR      order   |   H1ERROR      order   | H1-ESTIMATOR   order   \")\n    @printf(\"\\n=========|========================|========================|========================\\n\")\n    order = 0\n    for j=1:nlevels\n        @printf(\"  %6d |\",NDofs[j]);\n        for k = 1 : 3\n            if j > 1\n                order = log(Results[j-1,k]/Results[j,k]) / (log(NDofs[j]/NDofs[j-1])/2)\n            end\n            @printf(\" %.5e \",Results[j,k])\n            @printf(\"   %.3f   |\",order)\n        end\n        @printf(\"\\n\")\n    end\n\nend\n\nend","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"Main.##269.Example_Lshape","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/#Output-of-default-main()-run","page":"2D Adaptive Mesh Refinement (L-shape)","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"Example_Lshape.main()","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"\n  SOLVE LEVEL 1\n    ndofs = 225\n  ESTIMATE\n    estim H1 error = 0.4677742324221011\n    exact H1 error = 0.08242715274914718\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 2 / 5\n    red/blueR/blueL/green/unrefined = [1, 1, 1, 3, 90]\n    bisected bfaces = 0\n\n  SOLVE LEVEL 2\n    ndofs = 245\n  ESTIMATE\n    estim H1 error = 0.27058025799468644\n    exact H1 error = 0.05164447600035861\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 2 / 7\n    red/blueR/blueL/green/unrefined = [1, 2, 2, 1, 100]\n    bisected bfaces = 2\n\n  SOLVE LEVEL 3\n    ndofs = 271\n  ESTIMATE\n    estim H1 error = 0.18078323133809004\n    exact H1 error = 0.03424675768909562\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 2 / 7\n    red/blueR/blueL/green/unrefined = [1, 2, 2, 1, 112]\n    bisected bfaces = 2\n\n  SOLVE LEVEL 4\n    ndofs = 297\n  ESTIMATE\n    estim H1 error = 0.12898396625124234\n    exact H1 error = 0.02409443076338352\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 2 / 7\n    red/blueR/blueL/green/unrefined = [1, 2, 2, 1, 124]\n    bisected bfaces = 2\n\n  SOLVE LEVEL 5\n    ndofs = 323\n  ESTIMATE\n    estim H1 error = 0.10140170644768877\n    exact H1 error = 0.018592728788599657\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 5 / 11\n    red/blueR/blueL/green/unrefined = [1, 3, 3, 5, 130]\n    bisected bfaces = 2\n\n  SOLVE LEVEL 6\n    ndofs = 365\n  ESTIMATE\n    estim H1 error = 0.08160833770239474\n    exact H1 error = 0.014849577531524327\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 10 / 17\n    red/blueR/blueL/green/unrefined = [3, 4, 3, 9, 143]\n    bisected bfaces = 2\n\n  SOLVE LEVEL 7\n    ndofs = 431\n  ESTIMATE\n    estim H1 error = 0.06294474356717265\n    exact H1 error = 0.011439201479174273\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 16 / 22\n    red/blueR/blueL/green/unrefined = [5, 5, 4, 8, 172]\n    bisected bfaces = 3\n\n  SOLVE LEVEL 8\n    ndofs = 516\n  ESTIMATE\n    estim H1 error = 0.04985789712865174\n    exact H1 error = 0.008962939464372068\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 28 / 35\n    red/blueR/blueL/green/unrefined = [10, 4, 5, 19, 197]\n    bisected bfaces = 3\n\n  SOLVE LEVEL 9\n    ndofs = 653\n  ESTIMATE\n    estim H1 error = 0.03880567131571955\n    exact H1 error = 0.006946488559426664\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 39 / 53\n    red/blueR/blueL/green/unrefined = [11, 9, 10, 29, 243]\n    bisected bfaces = 6\n\n  SOLVE LEVEL 10\n    ndofs = 859\n  ESTIMATE\n    estim H1 error = 0.02962311997728687\n    exact H1 error = 0.005335533262266178\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 56 / 71\n    red/blueR/blueL/green/unrefined = [18, 13, 12, 35, 324]\n    bisected bfaces = 3\n\n  SOLVE LEVEL 11\n    ndofs = 1140\n  ESTIMATE\n    estim H1 error = 0.02262544286143982\n    exact H1 error = 0.004071904287572551\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 77 / 87\n    red/blueR/blueL/green/unrefined = [18, 16, 15, 54, 438]\n    bisected bfaces = 4\n\n  SOLVE LEVEL 12\n    ndofs = 1484\n  ESTIMATE\n    estim H1 error = 0.016852949810639447\n    exact H1 error = 0.003024954111744333\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 105 / 129\n    red/blueR/blueL/green/unrefined = [29, 23, 22, 74, 563]\n    bisected bfaces = 7\n\n  SOLVE LEVEL 13\n    ndofs = 1993\n  ESTIMATE\n    estim H1 error = 0.01268374153846281\n    exact H1 error = 0.002267729049627541\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 145 / 184\n    red/blueR/blueL/green/unrefined = [44, 33, 33, 88, 764]\n    bisected bfaces = 16\n\n  SOLVE LEVEL 14\n    ndofs = 2713\n  ESTIMATE\n    estim H1 error = 0.009471209815703551\n    exact H1 error = 0.0016782897379485596\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 198 / 253\n    red/blueR/blueL/green/unrefined = [56, 50, 47, 135, 1026]\n    bisected bfaces = 9\n\n  SOLVE LEVEL 15\n    ndofs = 3716\n  ESTIMATE\n    estim H1 error = 0.0067868073755609284\n    exact H1 error = 0.0012027103913761438\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 273 / 334\n    red/blueR/blueL/green/unrefined = [71, 61, 69, 173, 1437]\n    bisected bfaces = 22\n\n  SOLVE LEVEL 16\n    ndofs = 5030\n  ESTIMATE\n    estim H1 error = 0.00502542955637599\n    exact H1 error = 0.0008911337662681637\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 384 / 449\n    red/blueR/blueL/green/unrefined = [90, 95, 91, 243, 1938]\n    bisected bfaces = 13\n\n  SOLVE LEVEL 17\n    ndofs = 6813\n  ESTIMATE\n    estim H1 error = 0.0036879331675181105\n    exact H1 error = 0.0006490386213458893\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 532 / 627\n    red/blueR/blueL/green/unrefined = [139, 127, 119, 327, 2630]\n    bisected bfaces = 18\n\n  SOLVE LEVEL 18\n    ndofs = 9303\n  ESTIMATE\n    estim H1 error = 0.002711745116635171\n    exact H1 error = 0.0004761040906724769\n  RGB-REFINEMENT\n    bisected faces before/after closuring = 726 / 860\n    red/blueR/blueL/green/unrefined = [204, 158, 160, 443, 3613]\n    bisected bfaces = 29\n\n  NDOFS  |   L2ERROR      order   |   H1ERROR      order   | H1-ESTIMATOR   order   \n=========|========================|========================|========================\n     225 | 3.51513e-03    0.000   | 8.24272e-02    0.000   | 4.67774e-01    0.000   |\n     245 | 1.54195e-03    19.353   | 5.16445e-02    10.980   | 2.70580e-01    12.857   |\n     271 | 7.05652e-04    15.500   | 3.42468e-02    8.146   | 1.80783e-01    7.997   |\n     297 | 4.41473e-04    10.239   | 2.40944e-02    7.676   | 1.28984e-01    7.370   |\n     323 | 3.71256e-04    4.128   | 1.85927e-02    6.178   | 1.01402e-01    5.734   |\n     365 | 2.88551e-04    4.123   | 1.48496e-02    3.678   | 8.16083e-02    3.553   |\n     431 | 2.02334e-04    4.271   | 1.14392e-02    3.140   | 6.29447e-02    3.125   |\n     516 | 1.72474e-04    1.774   | 8.96294e-03    2.711   | 4.98579e-02    2.590   |\n     653 | 1.38064e-04    1.890   | 6.94649e-03    2.165   | 3.88057e-02    2.129   |\n     859 | 8.87911e-05    3.220   | 5.33553e-03    1.925   | 2.96231e-02    1.970   |\n    1140 | 6.70427e-05    1.985   | 4.07190e-03    1.910   | 2.26254e-02    1.904   |\n    1484 | 4.42021e-05    3.159   | 3.02495e-03    2.254   | 1.68529e-02    2.234   |\n    1993 | 2.90202e-05    2.854   | 2.26773e-03    1.954   | 1.26837e-02    1.927   |\n    2713 | 1.62991e-05    3.741   | 1.67829e-03    1.952   | 9.47121e-03    1.894   |\n    3716 | 1.08439e-05    2.591   | 1.20271e-03    2.118   | 6.78681e-03    2.119   |\n    5030 | 6.42595e-06    3.456   | 8.91134e-04    1.981   | 5.02543e-03    1.985   |\n    6813 | 3.92810e-06    3.244   | 6.49039e-04    2.090   | 3.68793e-03    2.040   |\n    9303 | 2.49173e-06    2.922   | 4.76104e-04    1.989   | 2.71175e-03    1.974   |\n","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"","category":"page"},{"location":"examples/doc_2d_lshape_adaptivity/","page":"2D Adaptive Mesh Refinement (L-shape)","title":"2D Adaptive Mesh Refinement (L-shape)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"functionoperators/#Function-Operators","page":"Function Operators","title":"Function Operators","text":"","category":"section"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"FunctionOperators are building blocks for the weak form and define the operations that should be applied to the trial and test functions (and their discrete representatives) inside some PDEOperator. Below is a list of currently available FunctionOperators. Note, that not all operators an be applied to all finite element types.","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"Function operator Description\nIdentity identity\nIdentityDisc{Jump} jumps of identity (only over faces)\nIdentityDisc{Average} average of identity (only over faces)\nIdentityComponent{c} identity of c-th component\nNormalFlux normal flux (function times normal)\nTangentFlux tangent flux (function times tangent)\nGradient gradient/Jacobian (as a vector)\nGradientDisc{Jump} jumps of gradient/Jacobian (only over faces)\nGradientDisc{Average} average of gradient/Jacobian (only over faces)\nSymmetricGradient symmetric part of the gradient\nDivergence divergence\nCurlScalar curl operator 1D to 2D (rotated gradient)\nCurl2D curl operator 2D to 1D\nCurl3D curl operator 3D to 3D\nHessian Hesse matrix = all 2nd order derivatives (as a vector)\nLaplacian Laplace Operator\nReconstructionIdentity{FEType} reconstruction operator into specified FEType\nReconstructionIdentityDisc{FEType,Jump} jump of reconstruction operator (over faces)\nReconstructionIdentityDisc{FEType,Average} average of reconstruction operator (over faces)\nReconstructionDivergence{FEType} divergence of FEType reconstruction operator\nReconstructionGradient{FEType} gradient of FEType reconstruction operator\nReconstructionGradientDisc{FEType,Jump} jump of reconstruction operator gradient (over faces)\nReconstructionGradientDisc{FEType,Average} average of reconstruction operator gadient (over faces)\n ","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"note: Note\nEspecially note the operators Reconstruction...{FEType} operators that allow to evaluate operators of some reconstructed version of a vector-valued testfunction that maps its discrete divergence to the divergence and so allows e.g. gradient-robust discretisations with classical non divergence-conforming ansatz spaces. So far such operators are available for the vector-valued Crouzeix-Raviart and Bernardi–Raugel finite element types.","category":"page"},{"location":"functionoperators/","page":"Function Operators","title":"Function Operators","text":"note: Note\nAs each finite element type is transformed differently from the reference domain to the general domain, the evaluation of each function operator has to be implemented for each finite element class. Currently, not every function operator works in any dimension and for any finite element. More evaluations are added as soon as they are needed (and possibly upon request).","category":"page"},{"location":"pdeprototypes/#PDE-Prototypes","page":"PDE Prototypes","title":"PDE Prototypes","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Below all available prototypes (i.e. pre-defined constructors for PDEDescription) are listed.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"note: Note\nFor most prototypes boundary data and right-hand side data or other modifications to the weak form of the PDE have to be added after a proto-type constructor has been called, see the examples for further assistance.","category":"page"},{"location":"pdeprototypes/#Poisson-equation","page":"PDE Prototypes","title":"Poisson equation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Poisson equation seeks a function u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"- mu Delta u = f","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is some diffusion coefficient and f some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The (primal) weak formulation (for homogeneous Dirichlet boundary data) seeks u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(mu nabla unabla v)  = (fv) quad textfor all  vin H^1_0(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"PoissonProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.PoissonProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.PoissonProblem","text":"function PoissonProblem(\n    dimension::Int = 2;\n    ncomponents::Int = 1,\n    diffusion = 1.0)\n\nCreates a PDEDescription for a Poisson problem with specified number of components and globally constant diffusion parameter.\n\nBoundary and right-hand side data or other modifications have to be added afterwards.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Example-Script: 2D Convection-Diffusion-Problem","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Remarks:","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"dual weak formulations are also possible but are not available as a prototype currently","category":"page"},{"location":"pdeprototypes/#Incompressible-Navier–Stokes-equations","page":"PDE Prototypes","title":"Incompressible Navier–Stokes equations","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Navier–Stokes equations in d dimensions seek a (vector-valued) velocity mathbfu and a pressure p such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is some viscosity coefficient and f some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The weak formulation (for homogeneous Dirichlet boundary data) seeks (mathbfup) such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"beginaligned\n(mu nabla mathbfunabla mathbfv) + ((u cdot nabla) mathbfu mathbfv) + (mathrmdiv mathbfv p)  = (mathbffmathbfv)  textfor all  mathbfvin H^1_0(Omega)^d\n(mathrmdiv mathbfu q)  = 0  textfor all  q in L^2_0(Omega)\nendaligned","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"IncompressibleNavierStokesProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.IncompressibleNavierStokesProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.IncompressibleNavierStokesProblem","text":"function IncompressibleNavierStokesProblem(\n    dimension::Int = 2;\n    viscosity = 1.0,\n    nonlinear::Bool = false,\n    auto_newton::Bool = false,\n    nopressureconstraint::Bool = false,\n    pmean = 0)\n\nCreates a PDEDescription for the incompressible (Navier-)Stokes equations of the specified dimension and globally constant viscosity parameter. If nonlinear = true the nonlinear convection term is added to the PDEDescription. If also auto_newton = true, a Newton iteration is devised by automatic differentiation of the convection term.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Remarks:","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"if nonlinear == false the nonlinear convection term is not added to the equation resulting in the plain Stokes equations.\nif nopressureconstraint == true removes the integral mean constraint on the pressure.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Example-Script: 2D Hagen-Poiseuille (Navier–Stokes)","category":"page"},{"location":"pdeprototypes/#Navier-Lame-equations-(linear-elasticity)","page":"PDE Prototypes","title":"Navier-Lame equations (linear elasticity)","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The Navier-Lame equations seek a displacement mathbfu such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"- mathrmdiv( mathbbC epsilon( mathbfu)) = mathbff","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where epsilon( mathbfu) is the symmetric part of the gradient, mathbbC is the stiffness tensor (according to Hooke's law) and mathbff some given right-hand side data.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"In 1D, it is assumed that the stiffness tensor has the form","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"mathbbC epsilon( u) = mu nabla u","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu is the elasticity modulus. In 2D, it is assumed that the stiffness tensor has the form","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"mathbbC epsilon( u) = 2 mu epsilon( mathbfu) + lambda mathrmtr(epsilon( mathbfu))","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"where mu and lambda are the Lame coefficients.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"The (primal) weak formulation (for homogeneous Dirichlet boundary data) seeks u such that","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(mathbbC epsilon(mathbfu)epsilon(mathbfv)) = (mathbffmathbfv) quad textfor all  vin H^1_0(Omega)^d","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"A vanilla PDEDescription for this weak formulation (without boundary data) can be created with the constructor below.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"LinearElasticityProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.LinearElasticityProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.LinearElasticityProblem","text":"function LinearElasticityProblem(\n    dimension::Int = 2;\n    elasticity_modulus = 1.0,\n    shear_modulus = 1.0,\n    lambda = 1.0)\n\nCreates a PDEDescription for the linear elasticity problem of the specified dimension.\n\nIf dimension == 1, only the elasticitymodulus is used as a parameter in the Hookian stiffness operator. If dimension == 2, shearmodulus and lambda are used as Lame parameters in the Hookian stiffness operator.\n\nBoundary and right-hand side data or other modifications have to be added afterwards.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Example-Scripts: 2D Linear Elasticity","category":"page"},{"location":"pdeprototypes/#L2-Bestapproximation","page":"PDE Prototypes","title":"L2-Bestapproximation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"This PDEDescription can be used to setup an L2-Bestapproximation very fast. The weak formulation simply seeks some function u such that, for some given function u_textexact, it holds u = u_textexact along the (specified) boundary and","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(uv) = (u_textexactv) quad textfor all  vin L^2(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Of course, on the continuous level, it holds u = u_textexact, but if the weak formulation is assembled for a finite element space one obtains a discrete L2-bestapproximation for this space.","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"L2BestapproximationProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.L2BestapproximationProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.L2BestapproximationProblem","text":"function L2BestapproximationProblem(\n    uexact::UserData{AbstractDataFunction},\n    dimension::Int = 2,\n    ncomponents::Int = 1;\n    bonus_quadorder::Int = 0,\n    bestapprox_boundary_regions = [])\n\nCreates an PDEDescription for an L2-Bestapproximation problem for the given exact function. Since this prototype already includes boundary and right-hand side data also a bonus quadrature order can be specified to steer the accuracy.\n\n\n\n\n\n","category":"function"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"Example-Scripts: 3D Divergence-Preserving L2-Bestapproximation","category":"page"},{"location":"pdeprototypes/#H1-Bestapproximation","page":"PDE Prototypes","title":"H1-Bestapproximation","text":"","category":"section"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"This PDEDescription can be used to setup an H1-Bestapproximation very fast. The weak formulation simply seeks some function u such that, for some given function u_textexact, it holds u = u_textexact along the (specified) boundary and","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"(nabla unabla v) = (nabla u_textexact nabla v) quad textfor all  vin H^1_0(Omega)","category":"page"},{"location":"pdeprototypes/","page":"PDE Prototypes","title":"PDE Prototypes","text":"H1BestapproximationProblem","category":"page"},{"location":"pdeprototypes/#GradientRobustMultiPhysics.H1BestapproximationProblem","page":"PDE Prototypes","title":"GradientRobustMultiPhysics.H1BestapproximationProblem","text":"function H1BestapproximationProblem(\n    exact_function_gradient::UserData{AbstractDataFunction},\n    exact_function_boundary::UserData{AbstractDataFunction};\n    bonus_quadorder::Int = 0,\n    bonus_quadorder_boundary::Int = 0,\n    bestapprox_boundary_regions = [])\n\nCreates an PDEDescription for an H1-Bestapproximation problem for the given exact function (only used on the boundary) and its exact gradient (used in the right-hand side). Since this prototype already includes boundary and right-hand side data also a bonus quadrature order can be specified to steer the accuracy.\n\n\n\n\n\n","category":"function"},{"location":"examples/doc_2d_nonlin_poisson/#D-Nonlinear-Poisson-Problem","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"","category":"section"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"(source code)","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"This example computes the solution u of the nonlinear Poisson problem","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"beginaligned\n-mathrmdiv((1+u^2) nabla u)  = f quad textin  Omega\nendaligned","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"with some right-hand side f on a series of uniform refinements of the unit square Omega.","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"This example demonstrates the automatic differentation feature and explains how to setup a nonlinear expression and how to assign it to the problem description. The setup is tested with some manufactured quadratic solution.","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"module Example_2DNonlinearPoisson\n\nusing GradientRobustMultiPhysics\nusing Printf\n\n# problem data\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]*x[2]\n    return nothing\nend\nfunction exact_gradient!(result,x::Array{<:Real,1})\n    result[1] = x[2]\n    result[2] = x[1]\n    return nothing\nend\nfunction rhs!(result,x::Array{<:Real,1})\n    result[1] = -2*(x[1]^3*x[2] + x[2]^3*x[1]) # = -div((1+u^2)*grad(u))\n    return nothing\nend\n\n# everything is wrapped in a main function\n# default argument trigger P1-FEM calculation, you might also want to try H1P2{1,2}\nfunction main(; Plotter = nothing, verbosity = 2, nlevels = 6, FEType = H1P1{1}, testmode = false)\n\n    # choose initial mesh\n    xgrid = grid_unitsquare(Triangle2D)\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 2)\n    user_function_gradient = DataFunction(exact_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 1)\n    user_function_rhs = DataFunction(rhs!, [1,2]; dependencies = \"X\", name = \"f\", quadorder = 4)\n\n    # prepare nonlinear expression (1+u^2)*grad(u)\n    function nonlin_kernel(result::Array{<:Real,1}, input::Array{<:Real,1})\n        # input = [u, grad(u)]\n        result[1] = (1+input[1]^2)*input[2]\n        result[2] = (1+input[1]^2)*input[3]\n        return nothing\n    end\n    action_kernel = ActionKernel(nonlin_kernel, [2,3]; dependencies = \"\", quadorder = 2)\n    nonlin_diffusion = GenerateNonlinearForm(\"((1+u^2)*grad(u))*grad(v)\", [Identity, Gradient], [1,1], Gradient, action_kernel; ADnewton = true)\n\n    # generate problem description and assign nonlinear operator and data\n    Problem = PDEDescription(\"nonlinear Poisson problem\")\n    add_unknown!(Problem; unknown_name = \"unknown\", equation_name = \"nonlinear Poisson equation\")\n    add_operator!(Problem, [1,1], nonlin_diffusion)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = user_function)\n    add_rhsdata!(Problem, 1,  RhsOperator(Identity, [0], user_function_rhs; store = true))\n\n    # print problem description\n    Base.show(Problem)\n\n    # prepare error calculation\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    L2error = []; H1error = []; NDofs = []\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n\n        # create finite element space\n        FES = FESpace{FEType}(xgrid)\n\n        # solve the problem\n        Solution = FEVector{Float64}(\"Solution\",FES)\n        push!(NDofs,length(Solution.entries))\n        solve!(Solution, Problem; verbosity = verbosity)\n\n        # calculate L2 and H1 error\n        append!(L2error,sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\n        append!(H1error,sqrt(evaluate(H1ErrorEvaluator,Solution[1])))\n    end\n\n    if testmode == true\n        return H1error[end]\n    else\n        # output errors in a nice table\n        println(\"\\n   NDOF  |   L2ERROR   |   H1ERROR\")\n        for j=1:nlevels\n            @printf(\"  %6d | %.5e | %.5e\\n\",NDofs[j],L2error[j],H1error[j]);\n        end\n\n        # plot\n        GradientRobustMultiPhysics.plot(Solution, [1,1], [Identity, Gradient]; Plotter = Plotter, verbosity = verbosity)\n    end\nend\n\n\n# test function that is called by test unit\n# tests if the above problem is solved exactly by P2-FEM\nfunction test(; verbosity = 0)\n    return main(; verbosity = 0, FEType = H1P2{1,2}, nlevels = 1, testmode = true)\nend\n\nend","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"Main.##274.Example_2DNonlinearPoisson","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/#Output-of-default-main()-run","page":"2D Nonlinear Poisson-Problem","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"Example_2DNonlinearPoisson.main()","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"\nPDE-DESCRIPTION\n===============\n  system name = nonlinear Poisson problem\n\n     id   | unknown name / equation name\n    [1]   | unknown / nonlinear Poisson equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | ((1+u^2)*grad(u))*grad(v) [AD-Newton] (regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | ((1+u^2)*grad(u))*grad(v) [AD-Newton] (regions = [0])\n            | f * Identity(v_h) (regions = [0])\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n\n\nSOLVER\n======\n  system name = nonlinear Poisson problem  @time = 0\n\n  target (FE) = Solution (H1P1{1}, ndofs = 13)\n                \n  subiteration | equations that are solved together\n       [1]     | nonlinear Poisson equation\n\n  initial assembly time = 4.47e+00 (s)\n\n  ITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n  -----------------------------------------------------------------------\n        1   | 1.244445e-16 | 1.879348e-01 | 2.28e-04/6.25e-05/3.37e-04\n        2   | 3.679291e-16 | 2.427676e-03 | 1.47e-04/4.98e-05/2.12e-04\n        3   | 5.956546e-16 | 3.580510e-07 | 1.47e-04/4.10e-05/2.04e-04\n        4   | 4.601466e-16 | 7.822889e-15 | 1.49e-04/3.54e-05/1.97e-04  converged after 4 iterations (maxResidual reached)\n\nSOLVER\n======\n  system name = nonlinear Poisson problem  @time = 0\n\n  target (FE) = Solution (H1P1{1}, ndofs = 41)\n                \n  subiteration | equations that are solved together\n       [1]     | nonlinear Poisson equation\n\n  initial assembly time = 2.76e-03 (s)\n\n  ITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n  -----------------------------------------------------------------------\n        1   | 4.017305e-16 | 1.552235e-01 | 5.39e-04/1.29e-04/7.13e-04\n        2   | 7.849669e-16 | 1.898915e-03 | 5.10e-04/1.11e-04/6.43e-04\n        3   | 1.085153e-15 | 4.461316e-07 | 5.26e-04/1.03e-04/6.48e-04\n        4   | 1.386314e-15 | 2.388998e-14 | 5.14e-04/1.09e-04/6.41e-04  converged after 4 iterations (maxResidual reached)\n\nSOLVER\n======\n  system name = nonlinear Poisson problem  @time = 0\n\n  target (FE) = Solution (H1P1{1}, ndofs = 145)\n                \n  subiteration | equations that are solved together\n       [1]     | nonlinear Poisson equation\n\n  initial assembly time = 4.78e-03 (s)\n\n  ITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n  -----------------------------------------------------------------------\n        1   | 1.607908e-15 | 9.834582e-02 | 2.08e-03/4.20e-04/2.57e-03\n        2   | 1.624925e-15 | 1.307935e-03 | 2.04e-03/4.64e-04/2.54e-03\n        3   | 3.155155e-15 | 4.214647e-07 | 2.01e-03/4.27e-04/2.47e-03\n        4   | 2.563960e-15 | 2.994169e-14 | 2.00e-03/4.25e-04/2.46e-03  converged after 4 iterations (maxResidual reached)\n\nSOLVER\n======\n  system name = nonlinear Poisson problem  @time = 0\n\n  target (FE) = Solution (H1P1{1}, ndofs = 545)\n                \n  subiteration | equations that are solved together\n       [1]     | nonlinear Poisson equation\n\n  initial assembly time = 1.41e-02 (s)\n\n  ITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n  -----------------------------------------------------------------------\n        1   | 3.525682e-15 | 5.522608e-02 | 7.80e-03/1.32e-03/9.28e-03\n        2   | 4.716084e-15 | 8.487585e-04 | 7.80e-03/1.62e-03/9.50e-03\n        3   | 4.563185e-15 | 2.555420e-07 | 7.90e-03/1.77e-03/9.75e-03\n        4   | 4.424124e-15 | 2.272732e-14 | 1.96e-02/1.65e-03/2.14e-02  converged after 4 iterations (maxResidual reached)\n\nSOLVER\n======\n  system name = nonlinear Poisson problem  @time = 0\n\n  target (FE) = Solution (H1P1{1}, ndofs = 2113)\n                \n  subiteration | equations that are solved together\n       [1]     | nonlinear Poisson equation\n\n  initial assembly time = 5.14e-02 (s)\n\n  ITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n  -----------------------------------------------------------------------\n        1   | 5.037107e-15 | 2.924738e-02 | 3.08e-02/5.69e-03/3.70e-02\n        2   | 8.779632e-15 | 4.905172e-04 | 3.09e-02/6.36e-03/3.74e-02\n        3   | 8.738198e-15 | 1.346748e-07 | 3.08e-02/6.27e-03/3.73e-02\n        4   | 9.065762e-15 | 1.854974e-14 | 3.19e-02/6.27e-03/3.83e-02  converged after 4 iterations (maxResidual reached)\n\nSOLVER\n======\n  system name = nonlinear Poisson problem  @time = 0\n\n  target (FE) = Solution (H1P1{1}, ndofs = 8321)\n                \n  subiteration | equations that are solved together\n       [1]     | nonlinear Poisson equation\n\n  initial assembly time = 2.24e-01 (s)\n\n  ITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n  -----------------------------------------------------------------------\n        1   | 9.951730e-15 | 1.504798e-02 | 1.23e-01/2.23e-02/1.47e-01\n        2   | 1.881386e-14 | 2.640269e-04 | 1.26e-01/2.88e-02/1.55e-01\n        3   | 1.891352e-14 | 6.824838e-08 | 1.22e-01/2.92e-02/1.52e-01\n        4   | 1.875192e-14 | 3.137531e-14 | 1.26e-01/2.85e-02/1.55e-01  converged after 4 iterations (maxResidual reached)\n\n   NDOF  |   L2ERROR   |   H1ERROR\n      13 | 6.62330e-03 | 1.44378e-01\n      41 | 1.65803e-03 | 7.21744e-02\n     145 | 4.14699e-04 | 3.60851e-02\n     545 | 1.03688e-04 | 1.80423e-02\n    2113 | 2.59229e-05 | 9.02111e-03\n    8321 | 6.48078e-06 | 4.51055e-03\n","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"","category":"page"},{"location":"examples/doc_2d_nonlin_poisson/","page":"2D Nonlinear Poisson-Problem","title":"2D Nonlinear Poisson-Problem","text":"This page was generated using Literate.jl.","category":"page"},{"location":"quadrature/#Quadrature","page":"Quadrature","title":"Quadrature","text":"","category":"section"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Quadrature rules consist of points (coordinates of evauation points with respect to reference geometry) and weights. There are constructors for several AbstractElementGeometries (from ExtendableGrids) and different order (some have generic formulas for abitrary order), see below for a detailed list.","category":"page"},{"location":"quadrature/","page":"Quadrature","title":"Quadrature","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"quadrature.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"struct QuadratureRule{T<:Real, ET<:AbstractElementGeometry}\n\nA struct that contains the name of the quadrature rule, the reference points and the weights for the parameter-determined element geometry.\n\n\n\n\n\n","category":"type"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where ET<:AbstractElementGeometry0D where T<:Real","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: AbstractElementGeometry0D}\n\nConstructs 0D quadrature rule of specified order (always point evaluation).\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where ET<:AbstractElementGeometry1D where T<:Real","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: AbstractElementGeometry1D}\n\nConstructs 1D quadrature rule of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where ET<:Parallelepiped3D where T<:Real","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Parallelepiped3D}\n\nConstructs quadrature rule on Parallelepiped3D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where ET<:Parallelogram2D where T<:Real","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Parallelogram2D}\n\nConstructs quadrature rule on Parallelogram2D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where ET<:Tetrahedron3D where T<:Real","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Tetrahedron3D}\n\nConstructs quadrature rule on Tetrahedron3D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.QuadratureRule-Union{Tuple{Int64}, Tuple{ET}, Tuple{T}} where ET<:Triangle2D where T<:Real","page":"Quadrature","title":"GradientRobustMultiPhysics.QuadratureRule","text":"function QuadratureRule{T,ET}(order::Int) where {T<:Real, ET <: Triangle2D}\n\nConstructs quadrature rule on Triangle2D of specified order.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#Base.eltype-Union{Tuple{QuadratureRule{T,ET}}, Tuple{ET}, Tuple{T}} where ET<:AbstractElementGeometry where T<:Real","page":"Quadrature","title":"Base.eltype","text":"eltype(_::QuadratureRule{T<:Real,ET<:AbstractElementGeometry}) -> Array{_A,1} where _A\n\n\nCustom eltype function for QuadratureRule{T,ET}.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#Base.show-Tuple{IO,QuadratureRule{T,ET} where ET<:AbstractElementGeometry where T<:Real}","page":"Quadrature","title":"Base.show","text":"show(io::IO, Q::QuadratureRule{T,ET} where ET<:AbstractElementGeometry where T<:Real)\n\n\nCustom show function for QuadratureRule{T,ET} that prints some information.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.integrate!-Tuple{AbstractArray,ExtendableGrid,Type{var\"#s63\"} where var\"#s63\"<:AbstractAssemblyType,UserData{var\"#s62\"} where var\"#s62\"<:AbstractDataFunction}","page":"Quadrature","title":"GradientRobustMultiPhysics.integrate!","text":"integrate!(integral4items::AbstractArray, grid::ExtendableGrid, AT::Type{var\"#s63\"} where var\"#s63\"<:AbstractAssemblyType, integrand::UserData{var\"#s62\"} where var\"#s62\"<:AbstractDataFunction; verbosity, index_offset, time, items, force_quadrature_rule)\n\n\nIntegration that writes result on every item into integral4items.\n\n\n\n\n\n","category":"method"},{"location":"quadrature/#GradientRobustMultiPhysics.integrate-Tuple{ExtendableGrid,Type{var\"#s108\"} where var\"#s108\"<:AbstractAssemblyType,UserData{var\"#s107\"} where var\"#s107\"<:AbstractDataFunction,Int64}","page":"Quadrature","title":"GradientRobustMultiPhysics.integrate","text":"integrate(grid::ExtendableGrid, AT::Type{var\"#s108\"} where var\"#s108\"<:AbstractAssemblyType, integrand!::UserData{var\"#s107\"} where var\"#s107\"<:AbstractDataFunction, resultdim::Int64; verbosity, items, force_quadrature_rule) -> Union{Float64, Array{Float64,1}}\n\n\nIntegration that returns total integral.\n\n\n\n\n\n","category":"method"},{"location":"examples/doc_2d_commutinginterpolators/#Commuting-Interpolators-(2D)","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"","category":"section"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"(source code) (execute)","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"This example verifies a structural property of the H1 and Hdiv finite element spaces and their interpolators which is","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"mathrmCurl(I_mathrmP_kpsi) = I_mathrmRT_k-1(mathrmCurl(psi))","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"for the H_1 interpolator I_mathrmP_k and the standard Raviart-Thomas interpolator I_mathrmRT_k-1 for k  0. In this example we verify this identity for k=1 and k=2. Note, that the H_1 interpolator only does nodal interpolations at the vertices but not in the additional degrees of freedom. For k=2, the interpolator also preserves the moments along the edges.","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"module Example_2DCommutingInterpolators\n\nusing GradientRobustMultiPhysics\n\n# define some function\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]^2-x[2]^4 + 1\nend\n# and its CurlScalar = (-dy,dx)\nfunction exact_curl!(result,x::Array{<:Real,1})\n    result[1] = 4*x[2]^3\n    result[2] = 2*x[1]\nend\n\n# everything is wrapped in a main function\nfunction main(;order::Int = 2, testmode = false)\n\n    # choose some grid\n    xgrid = uniform_refine(reference_domain(Triangle2D),2)\n\n    # negotiate exact_function! and exact_curl! to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 4)\n    user_function_curl = DataFunction(exact_curl!, [2,2]; name = \"Curl(u_exact)\", dependencies = \"X\", quadorder = 3)\n\n    # choose commuting interpolators pair\n    if order == 1\n        FE = [H1P1{1},HDIVRT0{2}]; testFE = H1P0{2}\n    elseif order == 2\n        FE = [H1P2{1,2},HDIVRT1{2}]; testFE = H1P1{2}\n    end\n\n    # do the H1 interpolation of the function\n    FESH1 = FESpace{FE[1]}(xgrid)\n    H1Interpolation = FEVector{Float64}(\"H1-Interpolation\",FESH1)\n    interpolate!(H1Interpolation[1], user_function)\n\n    # do the Hdiv interpolation of the Curl of the function\n    # since integrals over faces have to be computed exactly we need to tune the quadrature order\n    FESHdiv = FESpace{FE[2]}(xgrid)\n    HdivCurlInterpolation = FEVector{Float64}(\"Hdiv-Interpolation\",FESHdiv)\n    interpolate!(HdivCurlInterpolation[1], user_function_curl)\n\n    # Checking the identity:\n    # Both sides of the identity are finite element function of FEtype testFE\n    # Hence, we evaluate the error by testing the identity by all basisfunctions of this type\n\n    # first: generate the test space and some matching FEVector\n    FEStest = FESpace{testFE}(xgrid; broken = true)\n    error = FEVector{Float64}(\"ErrorVector\",FEStest)\n\n    # Define bilinear forms that represents testing each side of the identity with the testspace functions\n    BLF1 = BilinearForm(Float64, ON_CELLS, [FEStest, FESHdiv], [Identity, Identity], DoNotChangeAction(2))\n    BLF2 = BilinearForm(Float64, ON_CELLS, [FEStest, FESH1], [Identity, CurlScalar], DoNotChangeAction(2))\n\n    # evaluate the bilinear forms in the respective interpolations and subtract them from each other\n    # note that in these calls always the second argument of the bilinearform is fixed by the given FEVectorBlock\n    assemble!(error[1], HdivCurlInterpolation[1], BLF1)\n    assemble!(error[1], H1Interpolation[1], BLF2; factor = -1)\n\n    # do some norm that recognizes a nonzero in the vector\n    error = sqrt(sum(error[1][:].^2, dims = 1)[1])\n    if testmode == true\n        return error\n    else\n        println(\"error(Curl(I_$(FE[1])(psi) - I_$(FE[2])(Curl(psi))) = $error\")\n    end\nend\n\n# test function that is called by test unit\nfunction test()\n    error = []\n    for order in [1,2]\n        push!(error, max(main(order = order, testmode = true)))\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"Main.##255.Example_2DCommutingInterpolators","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/#Output-of-default-main()-run","page":"Commuting Interpolators (2D)","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"Example_2DCommutingInterpolators.main()","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"error(Curl(I_H1P2{1,2}(psi) - I_HDIVRT1{2}(Curl(psi))) = 1.654878539373748e-16\n","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"","category":"page"},{"location":"examples/doc_2d_commutinginterpolators/","page":"Commuting Interpolators (2D)","title":"Commuting Interpolators (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"pdedescription/#PDE-Description","page":"PDE Description","title":"PDE Description","text":"","category":"section"},{"location":"pdedescription/#Purpose","page":"PDE Description","title":"Purpose","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Although a more manually low-level assembly of your problem is possible, it is advised to describe it in the form of a PDEDescription to get access to certain automated mechanisms (in particular concerning solvers). The PDEDescription has similarities with the weak form of your problem (without time derivatives that are added separately) and in general does not need any information on the discretisation at this point.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"The following flow chart summarises the assemble process that is run during the solve process. The green parts can be modified/specified by the user, the rest is handled automatically. For details on steering the solver see PDE Solvers","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"(Image: Assembly Flowchart) ","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"PDEDescription\nBase.show(io::IO, PDE::PDEDescription)","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"mutable struct PDEDescription\n    name::String\n    equation_names::Array{String,1}\n    unknown_names::Array{String,1}\n    LHS::Array{Array{AbstractPDEOperator,1},2}\n    RHS::Array{Array{AbstractPDEOperator,1},1}\n    BoundaryOperators::Array{BoundaryOperator,1}\n    GlobalConstraints::Array{AbstractGlobalConstraint,1}\nend\n\nstruct that describes a PDE system with n equations and n unknowns\n\nA PDE system is described by\n\nits name\nthe names of its equations\nthe names of its unknowns\na size n x n array of Array{AbstractPDEOperator,1} LHS that describes the left-hand sides\na length n array of Array{AbstractPDEOperator,1} RHS that describes the right-hand sides\na length n array of BoundaryOperators that describes the boundary conditions for each unknown\nan array of GlobalConstraints that describes additional global constraints\n\nA PDEDescription mainly is a set of PDEOperators arranged in a quadratic n by n matrix. Every matrix row refers to one equation and the positioning of the PDEOperators (e.g. a bilinearform) immediately sets the information which unknowns have to be used to evaluate the operator. Also  nonlinear PDEOperators are possible where extra information on the further involved uknowns have to be specified. UserData is also assigned to the PDEDescription depending on their type. Operator coefficients are assigned directly to the PDEOperators (in form of AbstractActions), right-hand side data is assigned to the right-hand side array of PDEOperators and boundary data is assigned to the BoundaryOperators of the PDEDescription. Additionaly global constraints (like a global zero integral mean) can be assigned as a GlobalConstraint.\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#Base.show-Tuple{IO,PDEDescription}","page":"PDE Description","title":"Base.show","text":"show(io::IO, PDE::PDEDescription)\n\n\nCustom show function for PDEDescription that prints the PDE systems and all assigned operators\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#Creating/Extending-a-PDEDescription","page":"PDE Description","title":"Creating/Extending a PDEDescription","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Several add...! functions allow to extend the problems at any stage. There are several prototype PDEs documented on the PDE Prototypes page that can be used as a point of departure. Below is a list of functions that allows to initialise and extend a PDEDescription.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"pdedescription.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription-Tuple{String,Int64}","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"PDEDescription(name::String, nunknowns::Int64; unknown_names, equation_names) -> PDEDescription\n\n\nCreate empty PDEDescription for a specified number of unknowns.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.PDEDescription-Tuple{String}","page":"PDE Description","title":"GradientRobustMultiPhysics.PDEDescription","text":"PDEDescription(name::String) -> PDEDescription\n\n\nCreate empty PDEDescription with no unknowns.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_boundarydata!-Tuple{PDEDescription,Int64,Any,Type{var\"#s367\"} where var\"#s367\"<:AbstractBoundaryType}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_boundarydata!","text":"add_boundarydata!(PDE::PDEDescription, position::Int64, regions::Any, btype::Type{var\"#s367\"} where var\"#s367\"<:AbstractBoundaryType; data) -> Union{Nothing, DataType}\n\n\nAdds the given boundary data with the specified AbstractBoundaryType at the specified position in the BoundaryOperator of the PDEDescription.\n\nIf timedependent == true, that data function depends also on time t and is reassembled in any advance! step of a TimeControlSolver.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_constraint!-Tuple{PDEDescription,AbstractGlobalConstraint}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_constraint!","text":"add_constraint!(PDE::PDEDescription, GC::AbstractGlobalConstraint) -> Array{AbstractGlobalConstraint,1}\n\n\nAdds the given global constraint to the PDEDescription.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_operator!-Tuple{PDEDescription,Array{Int64,1},GradientRobustMultiPhysics.AbstractPDEOperatorLHS}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_operator!","text":"add_operator!(PDE::PDEDescription, position::Array{Int64,1}, O::GradientRobustMultiPhysics.AbstractPDEOperatorLHS; equation_name) -> Union{Nothing, Array{AbstractPDEOperator,1}}\n\n\nAdds the given PDEOperator to the left-hand side of the PDEDescription at the specified position.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_rhsdata!-Tuple{PDEDescription,Int64,AbstractPDEOperator}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_rhsdata!","text":"add_rhsdata!(PDE::PDEDescription, position::Int64, O::AbstractPDEOperator) -> Array{AbstractPDEOperator,1}\n\n\nAdds the given PDEOperator to the right-hand side of the PDEDescription at the specified position.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_unknown!-Tuple{PDEDescription}","page":"PDE Description","title":"GradientRobustMultiPhysics.add_unknown!","text":"add_unknown!(PDE::PDEDescription; equation_name, unknown_name) -> Array{Array{AbstractPDEOperator,1},2}\n\n\nAdds another unknown of specified dimensions to the PDEDescription.\n\n\n\n\n\n","category":"method"},{"location":"pdedescription/#PDE-Operators","page":"PDE Description","title":"PDE Operators","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"The PDE consists of PDEOperators characterising some feature of the model (like friction, convection, exterior forces etc.), they describe the continuous weak form of the PDE. The following table lists all available operators and physics-motivated constructors for them. Click on them to find out more details.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"PDEOperator subtype Special constructors Mathematically\nAbstractBilinearForm  (mathrmA(mathrmFO_1(u))mathrmFO_2(v))\n LaplaceOperator (kappa nabla unabla v)\n ReactionOperator (alpha u v)\n ConvectionOperator (beta cdot nabla u v) (beta is function)\n HookStiffnessOperator2D (mathbbC epsilon(u)epsilon(v))\nAbstractTrilinearForm  (mathrmA(mathrmFO_1(a)mathrmFO_2(u))mathrmFO_3(v))\n ConvectionOperator (a cdot nabla u v) (a is registered unknown)\n ConvectionRotationFormOperator (a x curl(u)v) (a is registered unknown, only 2D for now)\nAbstractMultilinearForm  \nGenerateNonlinearForm  (mathrmNA(mathrmFO_1(u))mathrmFO_3(v))\nRhsOperator  (f cdot mathrmFO(v))","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Legend: mathrmFO  are placeholders for Function Operators, and mathrmA stands for a (linear) Actions (that only expects the operator value of the finite element function as an input) and mathrmNA stands for a (nonlinear) Actions (see GenerateNonlinearForm for details).","category":"page"},{"location":"pdedescription/#Linear-Operators","page":"PDE Description","title":"Linear Operators","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"AbstractBilinearForm\nAbstractTrilinearForm\nAbstractMultilinearForm\nLaplaceOperator\nReactionOperator\nConvectionOperator\nConvectionRotationFormOperator\nHookStiffnessOperator1D\nHookStiffnessOperator2D\nHookStiffnessOperator3D\nBLF2RHS\nTLF2RHS\nMLF2RHS\nRhsOperator","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.AbstractBilinearForm","page":"PDE Description","title":"GradientRobustMultiPhysics.AbstractBilinearForm","text":"function AbstractBilinearForm(name,\n    operator1::Type{<:AbstractFunctionOperator},\n    operator2::Type{<:AbstractFunctionOperator},\n    action::AbstractAction;\n    apply_action_to = 1,\n    regions::Array{Int,1} = [0],\n    transposed_assembly::Bool = false)\n\nabstract bilinearform operator that assembles\n\nb(u,v) = intregions action(operator1(u)) * operator2(v) if applyaction_to = 1\nb(u,v) = intregions operator1(u) * action(operator2(v)) if applyaction_to = 2\n\ncan only be applied in PDE LHS\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#GradientRobustMultiPhysics.AbstractTrilinearForm","page":"PDE Description","title":"GradientRobustMultiPhysics.AbstractTrilinearForm","text":"mutable struct AbstractTrilinearForm{AT<:AbstractAssemblyType} <: AbstractPDEOperatorLHS\n    name::String\n    operator1::Type{<:AbstractFunctionOperator} # operator for argument 1\n    operator2::Type{<:AbstractFunctionOperator} # operator for argument 1\n    operator3::Type{<:AbstractFunctionOperator} # operator for argument 1\n    a_from::Int     # unknown id where fixed argument takes its values from\n    a_to::Int       # position of fixed argument\n    action::AbstractAction # is applied to argument 1 and 2\n    regions::Array{Int,1}\n    transposed_assembly::Bool\nend\n\nabstract trilinearform operator that assembles\n\nc(a,u,v) = intregions action(operator1(a) * operator2(u))*operator3(v)   (if ato = 1)\nc(u,a,v) = intregions action(operator1(u) * operator2(a))*operator3(v)   (if ato = 2)\n\nwhere a_from is the id of one of the unknowns of the PDEsystem\n\ncan only be applied in PDE LHS\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#GradientRobustMultiPhysics.AbstractMultilinearForm","page":"PDE Description","title":"GradientRobustMultiPhysics.AbstractMultilinearForm","text":"mutable struct AbstractMultilinearForm{AT<:AbstractAssemblyType} <: AbstractPDEOperatorLHS\n    name::String\n    operators::Array{DataType,1}\n    action::AbstractAction\n    regions::Array{Int,1}\nend\n\nabstract multi-linearform with arbitrary many argument of the form\n\nm(v1,v2,...,vk) = (A(O(v1),O(v2),...,O(vk-1)),Ok(vk))\n\n(so far only intended for use as RHSOperator together with MLF2RHS)\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#GradientRobustMultiPhysics.LaplaceOperator","page":"PDE Description","title":"GradientRobustMultiPhysics.LaplaceOperator","text":"constructor for AbstractBilinearForm that describes a(u,v) = (kappa * nabla u, nabla v) where kappa is some constant diffusion coefficient\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#GradientRobustMultiPhysics.ReactionOperator","page":"PDE Description","title":"GradientRobustMultiPhysics.ReactionOperator","text":"ReactionOperator(action::AbstractAction; name, AT, apply_action_to, identity_operator, regions) -> AbstractBilinearForm\n\n\nconstructor for AbstractBilinearForm that describes a(u,v) = (A(u),v) or (u,A(v)) with some user-specified action A\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#GradientRobustMultiPhysics.ConvectionOperator","page":"PDE Description","title":"GradientRobustMultiPhysics.ConvectionOperator","text":"ConvectionOperator(T::Type{var\"#s362\"} where var\"#s362\"<:Real, beta::UserData{AbstractDataFunction}, ncomponents::Int64; testfunction_operator, regions) -> AbstractBilinearForm{ON_CELLS}\n\n\nconstructor for AbstractBilinearForm that describes a(u,v) = (beta*grad(u),v) with some user-specified function beta with the interface beta(result,x::Array{<:Real,1}) (so it writes its result into result and returns nothing)\n\n\n\n\n\nfunction ConvectionOperator(\n    a_from::Int, \n    beta_operator,\n    xdim::Int,\n    ncomponents::Int;\n    fixed_argument::Int = 1,\n    testfunction_operator::Type{<:AbstractFunctionOperator} = Identity,\n    regions::Array{Int,1} = [0],\n    auto_newton::Bool = false)\n\nconstructs an PDE operator for a convection term of the form c(a,u,v) = (betaoperator(a)*grad(u),v) where afrom is the id of some unknown of the PDEDescription. xdim is the space dimension (= number of components of betaoperato(a)) and ncomponents is the number of components of u. With fixedargument = 2 a and u can switch their places, i.e.  c(u,a,v) = (betaoperator(u)*grad(a),v).  With autonewton = true a Newton scheme for a(u,v) = (u*grad(u),v) is automatically derived (and fixed_argument is ignored).\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#GradientRobustMultiPhysics.ConvectionRotationFormOperator","page":"PDE Description","title":"GradientRobustMultiPhysics.ConvectionRotationFormOperator","text":"ConvectionRotationFormOperator(beta::Int64, beta_operator::Type{var\"#s364\"} where var\"#s364\"<:AbstractFunctionOperator, xdim::Int64, ncomponents::Int64; testfunction_operator, regions) -> AbstractTrilinearForm{ON_CELLS}\n\n\nconstructor for AbstractBilinearForm that describes a(u,v) = (beta x curl(u),v) where beta is the id of some unknown vector field of the PDEDescription, u and v are also vector-fields and x is the cross product (so far this is only implemented in 2D)\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#GradientRobustMultiPhysics.HookStiffnessOperator1D","page":"PDE Description","title":"GradientRobustMultiPhysics.HookStiffnessOperator1D","text":"HookStiffnessOperator1D(mu::Real; regions, gradient_operator) -> AbstractBilinearForm{ON_CELLS}\n\n\nconstructor for AbstractBilinearForm that describes a(u,v) = (C grad(u), grad(v)) where C is the 1D stiffness tensor C grad(u) = mu grad(u)\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#GradientRobustMultiPhysics.HookStiffnessOperator2D","page":"PDE Description","title":"GradientRobustMultiPhysics.HookStiffnessOperator2D","text":"HookStiffnessOperator2D(mu::Real, lambda::Real; regions, gradient_operator) -> AbstractBilinearForm{ON_CELLS}\n\n\nconstructor for AbstractBilinearForm that describes a(u,v) = (C eps(u), eps(v)) where C is the 3D stiffness tensor for isotropic media in Voigt notation, i.e. C eps(u) = 2 mu eps(u) + lambda tr(eps(u)) for Lame parameters mu and lambda\n\nIn Voigt notation C is a 3 x 3 matrix\nC = [c11,c12,  0\n     c12,c11,  0\n       0,  0,c33]\n\nwhere c33 = shear_modulus, c12 = lambda and c11 = 2*c33 + c12\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#GradientRobustMultiPhysics.HookStiffnessOperator3D","page":"PDE Description","title":"GradientRobustMultiPhysics.HookStiffnessOperator3D","text":"HookStiffnessOperator3D(mu::Real, lambda::Real; regions, gradient_operator) -> AbstractBilinearForm{ON_CELLS}\n\n\nconstructor for AbstractBilinearForm that describes a(u,v) = (C eps(u), eps(v)) where C is the 3D stiffness tensor for isotropic media in Voigt notation, i.e. C eps(u) = 2 mu eps(u) + lambda tr(eps(u)) for Lame parameters mu and lambda\n\nIn Voigt notation C is a 6 x 6 matrix\nC = [c11,c12,c12,  0,  0,  0\n     c12,c11,c12,  0,  0,  0\n     c12,c12,c11,  0,  0,  0\n       0,  0,  0,c44,  0,  0\n       0,  0,  0,  0,c44,  0\n       0,  0,  0,  0,  0,c44]   \n\nwhere c44 = shear_modulus, c12 = lambda and c11 = 2*c44 + c12\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#GradientRobustMultiPhysics.BLF2RHS","page":"PDE Description","title":"GradientRobustMultiPhysics.BLF2RHS","text":"struct BLF2RHS <: AbstractPDEOperatorRHS\n    name::String\n    BLF::AbstractBilinearForm\n    data_id::Int\n    factor::Real\n    nonlinear::Bool\n    timedependent::Bool\nend\n\nevaluation of a AbstractBilinearForm BLF (multiplied by a factor) where the second argument is fixed by the given FEVectorBlock of the current solution coressponding to the given data_id.\n\nThe operator must be manually marked as nonlinear or time-dependent to trigger reassembly at each iteration or each timestep.\n\ncan only be applied in PDE RHS\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#GradientRobustMultiPhysics.TLF2RHS","page":"PDE Description","title":"GradientRobustMultiPhysics.TLF2RHS","text":"struct TLF2RHS <: AbstractPDEOperatorRHS\n    name::String\n    TLF::AbstractTrilinearForm\n    data_ids::Array{Int,1}\n    factor::Real\n    nonlinear::Bool\n    timedependent::Bool\nend\n\nevaluation of a AbstractTrilinearForm TLF (multiplied by a factor) where the first and second argument are fixed by the FEVectorBlocks of the current solution coressponding to the given data_ids.\n\nThe operator must be manually marked as nonlinear or time-dependent to trigger reassembly at each iteration or each timestep.\n\ncan only be applied in PDE RHS\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#GradientRobustMultiPhysics.MLF2RHS","page":"PDE Description","title":"GradientRobustMultiPhysics.MLF2RHS","text":"struct MLF2RHS <: AbstractPDEOperatorRHS\n    name::String\n    MLF::AbstractMultilinearForm\n    data_ids::Array{Int,1}\n    factor::Real\n    nonlinear::Bool\n    timedependent::Bool\nend\n\nevaluation of a AbstractMultilinearForm MLF (multiplied by a factor) where all but the last argument are fixed by the FEVectorBlocks of the current solution coressponding to the given data_ids.\n\nThe operator must be manually marked as nonlinear or time-dependent to trigger reassembly at each iteration or each timestep.\n\ncan only be applied in PDE RHS\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#GradientRobustMultiPhysics.RhsOperator","page":"PDE Description","title":"GradientRobustMultiPhysics.RhsOperator","text":"mutable struct RhsOperator{AT<:AbstractAssemblyType} <: AbstractPDEOperatorRHS\n    name::String\n    data::UserData{AbstractDataFunction}\n    testfunction_operator::Type{<:AbstractFunctionOperator}\n    regions::Array{Int,1}\n    store_operator::Bool               # should the matrix representation of the operator be stored?\n    storage::AbstractArray{Float64,1}  # matrix can be stored here to allow for fast matmul operations in iterative settings\nend\n\nright-hand side operator\n\ncan only be applied in PDE RHS\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#Nonlinear-Operators","page":"PDE Description","title":"Nonlinear Operators","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Nonlinear Operators can be setup in two ways. The manual way requires the user to define an action with a nonlinear action kernel (see Action Kernels) that specifies the linearisation of the nonlinearity. The is also an automatic way where the user specifies a norml action kernel (where the input can be used nonlinearly) which is then automatically differentiated to generate the linearised action kernel, see below for details.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"GenerateNonlinearForm","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.GenerateNonlinearForm","page":"PDE Description","title":"GradientRobustMultiPhysics.GenerateNonlinearForm","text":"function GenerateNonlinearForm(\n    name::String,\n    operator1::Array{DataType,1},\n    coeff_from::Array{Int,1},\n    operator2::Type{<:AbstractFunctionOperator},\n    action_kernel::Function,\n    argsizes::Array{Int,1},\n    dim::Int;\n    AT::Type{<:AbstractAssemblyType} = ON_CELLS,\n    ADnewton::Bool = false,\n    action_kernel_rhs = nothing,\n    regions = [0])\n\ngenerates an abstract nonlinearform operator G.  The array coeff_from stores the ids of the unknowns that should be used to evaluate the operators. The array argsizes is a vector with two entries where the first one is the length of the expected result vector and the second one is the length of the input vector.\n\nIf ADnewton == true, the specified actionkernel is automatically differentiated to assemble the Jacobian DG and setup a Newton iteration. The actionkernel has to be a function of the interface \n\nfunction name(result,input)\n\nwhere input is a vector of the operators of the solution and result is what then is multiplied with operator2 of the testfunction. Given some operator G(u), the Newton iteration reads DG u_next = DG u - G(u) which is added to the rest of the (linear) operators in the PDEDescription.\n\nIf ADnewton == false, the user is epected to prescribe a linearisation of the nonlinear operator. In this case the action_kernel has to satisfy the interface\n\nfunction name(result, input_current, input_ansatz)\n\nwhere inputcurrent is a vector of the operators of the solution and inputansatz is a vecor with the operators evaluated at one of the basis functions. If necessary, also a right-hand side action in the same format can be prescribed in actionkernelrhs.\n\nNote: this is a highly experimental feature at the moment and will possibly only work when all operators are associated with the same unknown.\n\ncan only be applied in PDE LHS\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#Global-Constraints","page":"PDE Description","title":"Global Constraints","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"GlobalConstraints are additional constraints that the user does not wish to implement as a global Lagrange multiplier because it e.g. causes a dense row in the system matrix and therefore may destroy the performance of the sparse matrix routines. Such a constraint may be a fixed integral mean. Another application are periodic boundary conditions or glued-together quantities in different regions of the grid. Here a CombineDofs constraint may help.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"globalconstraints.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.CombineDofs","page":"PDE Description","title":"GradientRobustMultiPhysics.CombineDofs","text":"struct CombineDofs <: AbstractGlobalConstraint\n\ncombines specified degrees of freedom of two unknown (can be the same), which allows to glue together different unknowns in different regions or periodic boundary conditions\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#GradientRobustMultiPhysics.FixedIntegralMean","page":"PDE Description","title":"GradientRobustMultiPhysics.FixedIntegralMean","text":"struct FixedIntegralMean <: AbstractGlobalConstraint\n\nfixes integral mean of the unknown to the specified value\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"add_constraint!","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_constraint!","page":"PDE Description","title":"GradientRobustMultiPhysics.add_constraint!","text":"add_constraint!(PDE::PDEDescription, GC::AbstractGlobalConstraint) -> Array{AbstractGlobalConstraint,1}\n\n\nAdds the given global constraint to the PDEDescription.\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#Dirichlet-Boundary-Data","page":"PDE Description","title":"Dirichlet Boundary Data","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"BoundaryOperators carry the boundary data for each unknown. Each regions can have a different AbstractBoundaryType and an associated data function that satisfies the interface function data!(result,x::Array{<:Real,1}) or function data!(result,x::Array{<:Real,1},t::Real) if it is also time-dependent.","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"AbstractBoundaryType Subtypes causes\nDirichletBoundary  \n BestapproxDirichletBoundary computation of Dirichlet data by bestapproximation along boundary faces\n InterpolateDirichletBoundary computation of Dirichlet data by interpolation along boundary faces\n HomogeneousDirichletBoundary zero Dirichlet data on all dofs","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"BoundaryOperator\nadd_boundarydata!","category":"page"},{"location":"pdedescription/#GradientRobustMultiPhysics.BoundaryOperator","page":"PDE Description","title":"GradientRobustMultiPhysics.BoundaryOperator","text":"struct BoundaryOperator <: AbstractPDEOperator\n\ncollects boundary data for a component of the system and allows to specify a AbstractBoundaryType for each boundary region so far only DirichletBoundary types (see above)\n\n\n\n\n\n","category":"type"},{"location":"pdedescription/#GradientRobustMultiPhysics.add_boundarydata!","page":"PDE Description","title":"GradientRobustMultiPhysics.add_boundarydata!","text":"add_boundarydata!(PDE::PDEDescription, position::Int64, regions::Any, btype::Type{var\"#s367\"} where var\"#s367\"<:AbstractBoundaryType; data) -> Union{Nothing, DataType}\n\n\nAdds the given boundary data with the specified AbstractBoundaryType at the specified position in the BoundaryOperator of the PDEDescription.\n\nIf timedependent == true, that data function depends also on time t and is reassembled in any advance! step of a TimeControlSolver.\n\n\n\n\n\n","category":"function"},{"location":"pdedescription/#Other-Boundary-Data","page":"PDE Description","title":"Other Boundary Data","text":"","category":"section"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"NeumannBoundary can be implemented as a RhsOperator with AT = ON_BFACES","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"PeriodicBoundary can be implemented as a CombineDofs <: AbstractGlobalConstraint","category":"page"},{"location":"pdedescription/","page":"PDE Description","title":"PDE Description","text":"SymmetryBoundary can be implemented by penalisation as a AbstractBilinearForm on BFaces and specified boundary regions with operator NormalFlux + MultiplyScalarAction(penalty).","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/#D-Compressible-Stokes","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"","category":"section"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"(source code)","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"This example solves the compressible Stokes equations where one seeks a (vector-valued) velocity mathbfu, a density varrho and a pressure p such that","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"beginaligned\n- mu Delta mathbfu + lambda nabla(mathrmdiv(mathbfu)) + nabla p  = mathbff + varrho mathbfg\nmathrmdiv(varrho mathbfu)  = 0\n        p  = eos(varrho)\n        int_Omega varrho  dx  = M\n        varrho  geq 0\nendaligned","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"Here eos eos is some equation of state function that describes the dependence of the pressure on the density (and further physical quantities like temperature in a more general setting). Moreover, mu and lambda are Lame parameters and mathbff and mathbfg are given right-hand side data.","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"In this example we solve a analytical toy problem with the prescribed solution","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"beginaligned\nmathbfu(mathbfx)  =0\nvarrho(mathbfx)  = 1 - (x_2 - 05)c\np = eos(varrho) = c varrho^gamma\nendaligned","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"such that mathbff = 0 and mathbfg nonzero to match the prescribed solution. This example is designed to study the well-balanced property of a discretisation. Note that a gradient-robust discretisation (set reconstruct = true below) has a much smaller L2 velocity error (i.e. approximatse the well-balanced state much better). For larger c the problem gets more incompressible which reduces the error further as then the right-hand side is a perfect gradient also when evaluated with the (now closer to a constant) discrete density. See reference below for more details.","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"reference: Reference\n\"A gradient-robust well-balanced scheme for the compressible isothermal Stokes problem\",\nM. Akbas, T. Gallouet, A. Gassmann, A. Linke and C. Merdon,\nComputer Methods in Applied Mechanics and Engineering 367 (2020),\n>Journal-Link< >Preprint-Link<","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"module Example_2DCompressibleStokes\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n\n# the equation of state\nfunction equation_of_state!(c,gamma)\n    function closure(pressure,density)\n        for j = 1 : length(density)\n            pressure[j] = c*density[j]^gamma\n        end\n    end\nend\n\n# the exact density (used for initial value of density if configured so)\nfunction exact_density!(M,c)\n    function closure(result,x::Array{<:Real,1})\n        result[1] = M*(1.0 - (x[2] - 0.5)/c)\n    end\nend\n\n# the exact velocity (zero!)\nfunction exact_velocity!(result)\n    result[1] = 0.0\n    result[2] = 0.0\nend\n\n# gravity right-hand side (just gravity but with opposite sign!)\nfunction rhs_gravity!(gamma,c)\n    function closure(result,x::Array{<:Real,1})\n        result[1] = 1.0 - (x[2] - 0.5)/c # = density\n        result[2] = - result[1]^(gamma-2) * gamma\n        result[1] = 0.0\n    end\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1, Plotter = nothing, reconstruct::Bool = true, c = 10, gamma = 1.4, M = 1, shear_modulus = 1e-3, lambda = -1e-3/3)\n\n    # load mesh and refine\n    xgrid = simplexgrid(\"assets/2d_grid_mountainrange.sg\")\n    xgrid = uniform_refine(xgrid,1)\n\n    # solve without and with reconstruction\n    Solution = setup_and_solve(xgrid; reconstruct = false, c = c, M = M, lambda = lambda, shear_modulus = shear_modulus, gamma = gamma, verbosity = verbosity)\n    # plots\n    GradientRobustMultiPhysics.plot(Solution, [1,2,3], [Identity, Identity, Identity]; Plotter = Plotter, verbosity = verbosity - 1)\n\n    Solution2 = setup_and_solve(xgrid; reconstruct = true, c = c, M = M, lambda = lambda, shear_modulus = shear_modulus, gamma = gamma, verbosity = verbosity)\n    # plots\n    GradientRobustMultiPhysics.plot(Solution2, [1,2,3], [Identity, Identity, Identity]; Plotter = Plotter, verbosity = verbosity - 1)\n\n    # compare L2 error for velocity and density\n    user_velocity = DataFunction(exact_velocity!, [2,2]; name = \"u_exact\", dependencies = \"\", quadorder = 0)\n    user_density = DataFunction(exact_density!(M,c), [1,2]; name = \"rho_exact\", dependencies = \"X\", quadorder = 3)\n    L2VelocityErrorEvaluator = L2ErrorIntegrator(Float64, user_velocity, Identity)\n    L2DensityErrorEvaluator = L2ErrorIntegrator(Float64, user_density, Identity)\n    L2error = sqrt(evaluate(L2VelocityErrorEvaluator,Solution[1]))\n    L2error2 = sqrt(evaluate(L2VelocityErrorEvaluator,Solution2[1]))\n    @printf(\"\\n        reconstruct     false    |    true\\n\")\n    @printf(\"================================================\\n\")\n    @printf(\"L2error(Velocity) | %.5e  | %.5e \\n\",L2error,L2error2)\n    L2error = sqrt(evaluate(L2DensityErrorEvaluator,Solution[2]))\n    L2error2 = sqrt(evaluate(L2DensityErrorEvaluator,Solution2[2]))\n    @printf(\"L2error(Density)  | %.5e  | %.5e \\n\",L2error,L2error2)\n\nend\n\nfunction setup_and_solve(xgrid; reconstruct = true, c = 1, gamma = 1, M = 1, shear_modulus = 1, lambda = 0, verbosity = 0)\n\n    # negotiate edata functions to the package\n    user_velocity = DataFunction(exact_velocity!, [2,2]; name = \"u_exact\", dependencies = \"\", quadorder = 0)\n    user_density = DataFunction(exact_density!(M,c), [1,2]; name = \"rho_exact\", dependencies = \"X\", quadorder = 3)\n    user_gravity = DataFunction(rhs_gravity!(gamma,c), [2,2]; name = \"g\", dependencies = \"X\", quadorder = 3)\n\n    # solver parameters\n    timestep = shear_modulus / (2*c)\n    initial_density_bestapprox = true # otherwise we start with a constant density which also works but takes longer\n    maxTimeSteps = 1000  # termination criterion 1\n    stationarity_threshold = 1e-13/shear_modulus # stop when change is below this treshold\n\n    # set finite element type [velocity, density,  pressure]\n    FETypes = [H1BR{2}, H1P0{1}, H1P0{1}] # Bernardi--Raugel\n\n    # set function operators depending on reconstruct\n    if reconstruct\n        VeloIdentity = ReconstructionIdentity{HDIVBDM1{2}} # identity operator for gradient-robust scheme\n        VeloDivergence = ReconstructionDivergence{HDIVBDM1{2}} # divergence operator for gradient-robust scheme\n    else # classical choices\n        VeloIdentity = Identity\n        VeloDivergence = Divergence\n    end\n\n\n    # generate empty PDEDescription for three unknowns\n    # unknown 1 : velocity (vector-valued)\n    # unknown 2 : density\n    # unknown 3 : pressure\n    Problem = PDEDescription(\"compressible Stokes problem\")\n    add_unknown!(Problem; unknown_name = \"velocity\", equation_name = \"momentum equation\")\n    add_unknown!(Problem; unknown_name = \"density\", equation_name = \"continuity equation\")\n    add_unknown!(Problem; unknown_name = \"pressure\", equation_name = \"equation of state\")\n    add_boundarydata!(Problem, 1,  [1,2,3,4], HomogeneousDirichletBoundary)\n\n    # momentum equation\n    add_operator!(Problem, [1,1], LaplaceOperator(2*shear_modulus,2,2; store = true))\n    if lambda != 0\n        add_operator!(Problem, [1,1], AbstractBilinearForm(\"lambda * div(u) * div(v) (lambda = $lambda)\",VeloDivergence,VeloDivergence,MultiplyScalarAction(lambda,1); store = true))\n    end\n    add_operator!(Problem, [1,3], AbstractBilinearForm(\"div(v)*p\",Divergence,Identity,MultiplyScalarAction(-1.0, 1); store = true))\n\n    function gravity_action()\n        temp = zeros(Float64,2)\n        function closure(result,input,x, t)\n            eval!(temp, user_gravity, x, t)\n            result[1] = - temp[1] * input[1] - temp[2] * input[2]\n        end\n        gravity_action_kernel = ActionKernel(closure, [1,2]; name = \"gravity action kernel\", dependencies = \"XT\", quadorder = user_gravity.quadorder)\n        return Action(Float64, gravity_action_kernel)\n    end\n    add_operator!(Problem, [1,2], AbstractBilinearForm(\"g*v*rho\",VeloIdentity,Identity,gravity_action(); store = true))\n\n    # continuity equation\n    # here a finite volume upwind convection operator on triangles is used\n    add_operator!(Problem, [2,2], FVConvectionDiffusionOperator(1))\n\n    # equation of state\n    # here we do some best-approximation of the pressure that comes out of the equation of state\n    eos_action_kernel = ActionKernel(equation_of_state!(c,gamma),[1,1]; dependencies = \"\", quadorder = 0)\n    eos_action = Action(Float64, eos_action_kernel)\n    add_operator!(Problem, [3,2], AbstractBilinearForm(\"p * eos(density)\",Identity,Identity,eos_action; apply_action_to = 2))\n    add_operator!(Problem, [3,3], AbstractBilinearForm(\"p*q\",Identity,Identity,MultiplyScalarAction(-1,1); store = true))\n\n    # show Problem definition\n    show(Problem)\n\n    # generate FESpaces and solution vector\n    FESpaceV = FESpace{FETypes[1]}(xgrid)\n    FESpacePD = FESpace{FETypes[2]}(xgrid)\n    Solution = FEVector{Float64}(\"velocity\",FESpaceV)\n    append!(Solution,\"density\",FESpacePD)\n    append!(Solution,\"pressure\",FESpacePD)\n\n    # initial values for density (bestapproximation or constant)\n    if initial_density_bestapprox\n        L2DensityBestapproximationProblem = L2BestapproximationProblem(user_density; bestapprox_boundary_regions = [])\n        InitialDensity = FEVector{Float64}(\"L2-Bestapproximation density\",FESpacePD)\n        solve!(InitialDensity, L2DensityBestapproximationProblem)\n        Solution[2][:] = InitialDensity[1][:]\n    else\n        for j = 1 : FESpacePD.ndofs\n            Solution[2][j] = M\n        end\n    end\n\n    # initial values for pressure obtained from equation of state\n    equation_of_state!(c,gamma)(Solution[3],Solution[2])\n    Minit = M * sum(Solution[2][:] .* xgrid[CellVolumes])\n\n    # generate time-dependent solver\n    # we have three equations [1] for velocity, [2] for density, [3] for pressure\n    # that are set to be iterated one after another via the subiterations argument\n    # only the density equation is made time-dependent via the timedependent_equations argument\n    # so we can reuse the other subiteration matrices in each timestep\n    TCS = TimeControlSolver(Problem, Solution, BackwardEuler; subiterations = [[1],[2],[3]], maxlureuse = [-1,1,-1], timedependent_equations = [2], verbosity = verbosity)\n    advance_until_stationarity!(TCS, timestep; maxTimeSteps = maxTimeSteps, stationarity_threshold = stationarity_threshold)\n\n    # compute error in mass constraint\n    Md = sum(Solution[2][:] .* xgrid[CellVolumes])\n    @printf(\"  mass_error = %.4e - %.4e = %.4e \\n\",Minit, Md, abs(Minit-Md))\n\n    return Solution\nend\n\nend","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"","category":"page"},{"location":"examples_advanced/doc_2d_compressiblestokes/","page":"2D Compressible Stokes","title":"2D Compressible Stokes","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/#D-Equilibration-Error-Estimation-(Local)","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"","category":"section"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"(source code)","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"This example computes a local equilibration error estimator for the H^1 error of some H^1-conforming approximation u_h to the solution u of some Poisson problem -Delta u = f on an L-shaped domain, i.e.","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"eta^2(sigma_h) =  sigma_h - nabla u_h ^2_L^2(T)","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"where sigma_h discretisates the exact sigma in the dual mixed problem","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"sigma - nabla u = 0\nquad textand quad\nmathrmdiv(sigma) + f = 0","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"by some local equilibration strategy, see reference below for details.","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"This examples demonstrates the use of low-level structures to assemble individual problems and a strategy solve several small problems in parallel.","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"reference: Reference\n''A posteriori error estimates for efficiency and error control in numerical simulations'' Lecture Notes by M. Vohralik >Link<","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"module Example_LEQLshape\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing ExtendableSparse\nusing Printf\n\n# exact solution u for the Poisson problem\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    result[1] = sin(2*result[1]/3)\n    result[1] *= (x[1]^2 + x[2]^2)^(1/3)\nend\n# ... and its gradient\nfunction exact_function_gradient!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    # du/dy = du/dr * sin(phi) + (1/r) * du/dphi * cos(phi)\n    result[2] = sin(2*result[1]/3) * sin(result[1]) + cos(2*result[1]/3) * cos(result[1])\n    result[2] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\n    # du/dx = du/dr * cos(phi) - (1/r) * du/dphi * sin(phi)\n    result[1] = sin(2*result[1]/3) * cos(result[1]) - cos(2*result[1]/3) * sin(result[1])\n    result[1] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1, nlevels = 15, theta = 1//2, Plotter = nothing)\n\n    # initial grid\n    xgrid = grid_lshape(Triangle2D)\n\n    # choose some finite elements for primal and dual problem (= for equilibrated fluxes)\n    # (local equilibration for Pk needs at least BDMk)\n    FEType = H1P1{1}\n    FETypeDual = HDIVBDM1{2}\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 5)\n    user_function_gradient = DataFunction(exact_function_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 4)\n\n    # setup Poisson problem\n    Problem = PoissonProblem(2; ncomponents = 1, diffusion = 1.0)\n    add_boundarydata!(Problem, 1, [2,3,4,5,6,7], BestapproxDirichletBoundary; data = user_function)\n    add_boundarydata!(Problem, 1, [1,8], HomogeneousDirichletBoundary)\n\n    # define error estimator : || sigma_h - nabla u_h ||^2_{L^2(T)}\n    # this can be realised via a kernel function\n    function eqestimator_kernel(result, input)\n        # input = [Identity(sigma_h), Divergence(sigma_h), Gradient(u_h)]\n        result[1] = (input[1] - input[4])^2 + (input[2] - input[5])^2\n        result[2] = input[3]^2\n        return nothing\n    end\n    estimator_action = Action(Float64,ActionKernel(eqestimator_kernel, [2,5]; name = \"estimator kernel\", dependencies = \"\", quadorder = 3))\n    EQIntegrator = ItemIntegrator(Float64,ON_CELLS,[Identity, Divergence, Gradient],estimator_action)\n\n    # setup exact error evaluations\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    L2ErrorEvaluatorDual = L2ErrorIntegrator(Float64, user_function_gradient, Identity)\n\n    # refinement loop (only uniform for now)\n    NDofs = zeros(Int, nlevels)\n    NDofsDual = zeros(Int, nlevels)\n    Results = zeros(Float64, nlevels, 4)\n    Solution = nothing\n    for level = 1 : nlevels\n\n        # create a solution vector and solve the problem\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"Discrete Solution\",FES)\n        solve!(Solution, Problem; verbosity = verbosity - 1)\n        NDofs[level] = length(Solution[1])\n\n        # evaluate eqilibration error estimator adn append it to Solution vector (for plotting etc.)\n        DualSolution = get_local_equilibration_estimator(xgrid, Solution, FETypeDual; verbosity = verbosity - 1)\n        NDofsDual[level] = length(DualSolution.entries)\n        FES_eta = FESpace{H1P0{1}}(xgrid)\n        append!(Solution, \"estimator\",FES_eta)\n        error4cell = zeros(Float64,2,num_sources(xgrid[CellNodes]))\n        evaluate!(error4cell, EQIntegrator, [DualSolution[1], DualSolution[1], Solution[1]])\n        for j = 1 : num_sources(xgrid[CellNodes])\n            Solution[2][j] = error4cell[1,j] + error4cell[2,j]\n        end\n\n        if verbosity > 0\n            println(\"\\n  SOLVE LEVEL $level\")\n            println(\"    ndofs = $(NDofs[level])\")\n            println(\"    ndofsDual = $(NDofsDual[level])\")\n        end\n\n        # calculate L2 error, H1 error, estimator, dual L2 error and write to results\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,[Solution[1]]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,[Solution[1]]))\n        Results[level,3] = sqrt(sum(Solution[2][:]))\n        Results[level,4] = sqrt(evaluate(L2ErrorEvaluatorDual,[DualSolution[1]]))\n        if verbosity > 0\n            println(\"  ESTIMATE\")\n            println(\"    estim H1 error = $(Results[level,3])\")\n            println(\"    exact H1 error = $(Results[level,2])\")\n            println(\"     dual L2 error = $(Results[level,4])\")\n        end\n\n        # mesh refinement\n        if theta >= 1\n            # uniform mesh refinement\n            xgrid = uniform_refine(xgrid)\n        else\n            # adaptive mesh refinement\n            # refine by red-green-blue refinement (incl. closuring)\n            facemarker = bulk_mark(xgrid, Solution[2], theta; verbosity = verbosity)\n            xgrid = RGB_refine(xgrid, facemarker; verbosity = verbosity)\n        end\n    end\n\n    # plot\n    GradientRobustMultiPhysics.plot(Solution, [0,1,2], [Identity,Identity,Identity]; Plotter = Plotter, verbosity = verbosity, use_subplots = false)\n\n    # print results\n    @printf(\"\\n  NDOFS  |   L2ERROR      order   |   H1ERROR      order   | H1-ESTIMATOR   order      efficiency   \")\n    @printf(\"\\n=========|========================|========================|========================================\\n\")\n    order = 0\n    for j=1:nlevels\n        @printf(\"  %6d |\",NDofs[j]);\n        for k = 1 : 3\n            if j > 1\n                order = log(Results[j-1,k]/Results[j,k]) / (log(NDofs[j]/NDofs[j-1])/2)\n            end\n            @printf(\" %.5e \",Results[j,k])\n            if k == 3\n                @printf(\"   %.3f       %.3f\",order,Results[j,k]/Results[j,k-1])\n            else\n                @printf(\"   %.3f   |\",order)\n            end\n        end\n        @printf(\"\\n\")\n    end\n\nend\n\n\n# this function computes the local equilibrated fluxes\n# by solving local problems on (disjunct group of) node patches\nfunction get_local_equilibration_estimator(xgrid, Solution, FETypeDual; verbosity::Int = 1)\n    # needed grid stuff\n    xCellNodes::Array{Int32,2} = xgrid[CellNodes]\n    xCellFaces::Array{Int32,2} = xgrid[CellFaces]\n    xFaceNodes::Array{Int32,2} = xgrid[FaceNodes]\n    xCellVolumes::Array{Float64,1} = xgrid[CellVolumes]\n    xNodeCells = atranspose(xCellNodes)\n    nnodes::Int = num_sources(xNodeCells)\n    nfaces::Int = num_sources(xFaceNodes)\n\n    # get node patch groups that can be solved in parallel\n    group4node = xgrid[NodePatchGroups]\n\n    # init equilibration space (and Lagrange multiplier space)\n    FEType = eltype(Solution[1].FES)\n    FESDual = FESpace{FETypeDual}(xgrid)\n    xItemDofs::Union{VariableTargetAdjacency{Int32},SerialVariableTargetAdjacency{Int32},Array{Int32,2}} = FESDual[CellDofs]\n    xFaceDofs::Union{VariableTargetAdjacency{Int32},SerialVariableTargetAdjacency{Int32},Array{Int32,2}} = FESDual[FaceDofs]\n    xItemDofs_uh::Union{VariableTargetAdjacency{Int32},SerialVariableTargetAdjacency{Int32},Array{Int32,2}} = Solution[1].FES[CellDofs]\n    DualSolution = FEVector{Float64}(\"Discrete Dual Solution\",FESDual)\n\n    # partition of unity and their gradients\n    POUFEType = H1P1{1}\n    POUFES = FESpace{POUFEType}(xgrid)\n    POUqf = QuadratureRule{Float64,Triangle2D}(0)\n\n    # quadrature formulas\n    qf = QuadratureRule{Float64,Triangle2D}(2*get_polynomialorder(FETypeDual, Triangle2D))\n    weights::Array{Float64,1} = qf.w\n\n    # some constants\n    dofs_on_face::Int = max_num_targets_per_source(xFaceDofs)\n    div_penalty::Float64 = 1e5\n    bnd_penalty::Float64 = 1e30\n    maxcells::Int = max_num_targets_per_source(xNodeCells)\n    maxdofs::Int = max_num_targets_per_source(xItemDofs)\n    maxdofs_uh::Int = max_num_targets_per_source(xItemDofs_uh)\n\n    # redistribute groups for more equilibrated thread load (first groups are larger)\n    maxgroups = maximum(group4node)\n    groups = Array{Int,1}(1 : maxgroups)\n    for j::Int = 1 : floor(maxgroups/2)\n        a = groups[j]\n        groups[j] = groups[2*j]\n        groups[2*j] = a\n    end\n    X = Array{Array{Float64,1},1}(undef,maxgroups)\n\n    Threads.@threads for group in groups\n        grouptime = @elapsed begin\n        if verbosity > 0\n            println(\"  Starting equilibrating patch group $group on thread $(Threads.threadid())... \")\n        end\n        # temporary variables\n        localnode::Int = 0\n        graduh = zeros(Float64,2)\n        gradphi = zeros(Float64,2)\n        coeffs_uh = zeros(Float64, maxdofs_uh)\n        eval_i = zeros(Float64,2)\n        eval_j = zeros(Float64,2)\n        eval_phi = zeros(Float64,1)\n        cell::Int = 0\n        dofi::Int = 0\n        dofj::Int = 0\n        weight::Float64 = 0\n        temp::Float64 = 0\n        temp2::Float64 = 0\n        temp3::Float64 = 0\n        Alocal = zeros(Float64,maxdofs,maxdofs)\n        blocal = zeros(Float64,maxdofs)\n\n        # init FEBasiEvaluator\n        FEBasis_gradphi = FEBasisEvaluator{Float64,POUFEType,Triangle2D,Gradient,ON_CELLS}(POUFES, POUqf)\n        FEBasis_xref = FEBasisEvaluator{Float64,POUFEType,Triangle2D,Identity,ON_CELLS}(POUFES, qf)\n        FEBasis_graduh = FEBasisEvaluator{Float64,FEType,Triangle2D,Gradient,ON_CELLS}(Solution[1].FES, qf)\n        FEBasis_div = FEBasisEvaluator{Float64,FETypeDual,Triangle2D,Divergence,ON_CELLS}(FESDual, qf)\n        FEBasis_id = FEBasisEvaluator{Float64,FETypeDual,Triangle2D,Identity,ON_CELLS}(FESDual, qf)\n\n        # init system\n        A = ExtendableSparseMatrix{Float64,Int}(FESDual.ndofs,FESDual.ndofs)\n        b = zeros(Float64,FESDual.ndofs)\n        X[group] = zeros(Float64,FESDual.ndofs)\n        x = zeros(Float64,FESDual.ndofs)\n\n        # find dofs at boundary of node patches\n        is_boundarydof = zeros(Bool,FESDual.ndofs)\n        boundary_face::Bool = false\n        for face = 1 : nfaces\n            boundary_face = true\n            for k = 1 : 2\n                if group4node[xFaceNodes[k,face]] == group\n                    boundary_face = false\n                    break\n                end\n            end\n            if (boundary_face)\n                for j = 1 : dofs_on_face\n                    is_boundarydof[xFaceDofs[j,face]] = true\n                end\n            end\n        end\n\n        for node = 1 : nnodes\n        if group4node[node] == group\n            for c = 1 : num_targets(xNodeCells,node)\n                cell = xNodeCells[c,node]\n\n                # find local node number of global node z\n                # and evaluate (constatn) gradient of nodal basis function phi_z\n                localnode = 1\n                while xCellNodes[localnode,cell] != node\n                    localnode += 1\n                end\n                update!(FEBasis_gradphi,cell)\n                eval!(gradphi, FEBasis_gradphi, localnode, 1)\n\n                # read coefficients for discrete flux\n                for j=1:maxdofs_uh\n                    coeffs_uh[j] = Solution[1].entries[xItemDofs_uh[j,cell]]\n                end\n\n                # update other FE evaluators\n                update!(FEBasis_graduh,cell)\n                update!(FEBasis_div,cell)\n                update!(FEBasis_id,cell)\n\n                # assembly on this cell\n                for i in eachindex(weights)\n                    weight = weights[i] * xCellVolumes[cell]\n\n                    # evaluate grad(u_h) and nodal basis function at quadrature point\n                    fill!(graduh,0)\n                    eval!(graduh, FEBasis_graduh, coeffs_uh, i)\n                    eval!(eval_phi, FEBasis_xref, localnode, i)\n\n                    # compute residual -f*phi_z + grad(u_h) * grad(phi_z) at quadrature point i ( f = 0 in this example !!! )\n                    temp = div_penalty * sqrt(xCellVolumes[cell]) * ( graduh[1] * gradphi[1] + graduh[2] * gradphi[2] ) * weight\n                    temp2 = div_penalty * sqrt(xCellVolumes[cell]) *weight\n                    for dof_i = 1 : maxdofs\n                        eval!(eval_i, FEBasis_id, dof_i, i)\n                        eval_i .*= weight\n                        # right-hand side for best-approximation (grad(u_h)*phi)\n                        blocal[dof_i] += (graduh[1]*eval_i[1] + graduh[2]*eval_i[2]) * eval_phi[1]\n                        # mass matrix Hdiv\n                        for dof_j = 1 : maxdofs\n                            eval!(eval_j, FEBasis_id, dof_j, i)\n                            Alocal[dof_i,dof_j] += (eval_i[1]*eval_j[1] + eval_i[2]*eval_j[2])\n                        end\n                        # div-div matrix Hdiv * penalty (quick and dirty to avoid Lagrange multiplier)\n                        eval!(eval_i, FEBasis_div, dof_i, i)\n                        blocal[dof_i] += temp * eval_i[1]\n                        temp3 = temp2 * eval_i[1]\n                        for dof_j = 1 : maxdofs\n                            eval!(eval_j, FEBasis_div, dof_j, i)\n                            Alocal[dof_i,dof_j] += temp3*eval_j[1]\n                        end\n                    end\n                end\n\n                # write into global A and b\n                for dof_i = 1 : maxdofs\n                    dofi = xItemDofs[dof_i,cell]\n                    b[dofi] += blocal[dof_i]\n                    for dof_j = 1 : maxdofs\n                        dofj = xItemDofs[dof_j,cell]\n                        _addnz(A,dofi,dofj,Alocal[dof_i,dof_j],1)\n                    end\n                end\n\n                # reset local A and b\n                fill!(Alocal,0)\n                fill!(blocal,0)\n            end\n        end\n        end\n\n        # penalize dofs at boundary of node patches\n        for j = 1 : FESDual.ndofs\n            if is_boundarydof[j]\n                A[j,j] = bnd_penalty\n                b[j] = 0\n            end\n        end\n\n        # solve local problem\n        X[group] .= A\\b\n    end\n\n    if verbosity > 0\n        println(\"  Finished equilibration patch group $group on thread $(Threads.threadid()) in $(grouptime)s \")\n    end\n    end\n\n    # write local solutions to global vector\n    for group = 1 : maxgroups\n        DualSolution[1].entries .+= X[group]\n    end\n\n    return DualSolution\nend\n\nend","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_loceq/","page":"2D Equilibration Error Estimation (Local)","title":"2D Equilibration Error Estimation (Local)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"fespace/#Finite-Element-Spaces-and-Arrays","page":"FE Spaces and Arrays","title":"Finite Element Spaces and Arrays","text":"","category":"section"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"This page describes the structure FESpace that acts as a finite element space on a given grid and the degree of freedom maps DofMaps. See Implemented Finite Elements for a list of available finite element types.","category":"page"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"Moreover, there are special arrays FEVector and FEMatrix that carry coefficients and discretised PDEOperators.","category":"page"},{"location":"fespace/#FESpace","page":"FE Spaces and Arrays","title":"FESpace","text":"","category":"section"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"To generate a finite element space only a finite element type and a grid is needed, dofmaps are generated automatically on demand.","category":"page"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"finiteelements.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FESpace","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FESpace","text":"mutable struct FESpace{FEType<:AbstractFiniteElement}\n    name::String                          # full name of finite element space (used in messages)\n    broken::Bool                          # if true, broken dofmaps are generated\n    ndofs::Int                            # total number of dofs\n    xgrid::ExtendableGrid                 # link to xgrid \n    dofmaps::Dict{Type{<:AbstractGridComponent},Any} # backpack with dofmaps\nend\n\nA struct that has a finite element type as parameter and carries dofmaps (CellDofs, FaceDofs, BFaceDofs) plus additional grid information and access to arrays holding coefficients if needed.\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FESpace-Union{Tuple{ExtendableGrid}, Tuple{AT}, Tuple{FEType}} where AT<:AbstractAssemblyType where FEType<:AbstractFiniteElement","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FESpace","text":"function FESpace{FEType<:AbstractFiniteElement,AT<:AbstractAssemblyType}(\n    xgrid::ExtendableGrid;\n    name = \"\",\n    broken::Bool = false,\n    verbosity = 0)\n\nConstructor for FESpace of the given FEType, AT = ONCELLS/ONFACES/ONEDGES generates a finite elements space on the cells/faces/edges of the provided xgrid (if omitted ONCELLS is used as default). The broken switch allows to generate a broken finite element space (that is piecewise H1/Hdiv/HCurl). If no name is provided it is generated automatically from FEType.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.eltype-Union{Tuple{FESpace{FEType,AT} where AT<:AbstractAssemblyType}, Tuple{FEType}} where FEType<:AbstractFiniteElement","page":"FE Spaces and Arrays","title":"Base.eltype","text":"eltype(_::FESpace{FEType<:AbstractFiniteElement,AT} where AT<:AbstractAssemblyType) -> Type{FEType} where FEType<:AbstractFiniteElement\n\n\nCustom eltype function for FESpace returns the finite element type of the finite element space.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.get!-Tuple{FESpace,Type{var\"#s133\"} where var\"#s133\"<:DofMap}","page":"FE Spaces and Arrays","title":"Base.get!","text":"get!(FES::FESpace, DM::Type{var\"#s133\"} where var\"#s133\"<:DofMap) -> Any\n\n\nTo be called by getindex. This triggers lazy creation of  non-existing dofmaps\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.getindex-Tuple{FESpace,Type{var\"#s133\"} where var\"#s133\"<:DofMap}","page":"FE Spaces and Arrays","title":"Base.getindex","text":"Base.getindex(FES::FESpace,DM::Type{<:DofMap})\n\nGeneric method for obtaining dofmap. This method is mutating in the sense that non-existing dofmaps are created on demand. Due to the fact that components are stored as Any the return value triggers type instability.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.setindex!-Tuple{FESpace,Any,Type{var\"#s133\"} where var\"#s133\"<:DofMap}","page":"FE Spaces and Arrays","title":"Base.setindex!","text":"setindex!(FES::FESpace, v::Any, DM::Type{var\"#s133\"} where var\"#s133\"<:DofMap) -> Any\n\n\nSet new dofmap\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Union{Tuple{FEType}, Tuple{IO,FESpace{FEType,AT} where AT<:AbstractAssemblyType}} where FEType<:AbstractFiniteElement","page":"FE Spaces and Arrays","title":"Base.show","text":"show(io::IO, FES::FESpace{FEType<:AbstractFiniteElement,AT} where AT<:AbstractAssemblyType)\n\n\nCustom show function for FESpace that prints some information and all available dofmaps.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#DofMaps","page":"FE Spaces and Arrays","title":"DofMaps","text":"","category":"section"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"dofmaps.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.DofMap","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.DofMap","text":"abstract type DofMap <: AbstractGridAdjacency\n\nDofmaps are stored as an ExtendableGrids.AbstractGridAdjacency in the finite element space and collect information with respect to different AssemblyTypes. They are generated automatically on demand and the dofmaps associated to each subtype can be accessed via FESpace[DofMap].\n\n\n\n\n\n","category":"type"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"The following DofMap subtypes are available and are used as keys to access the dofmap via FESpaceDofMap.","category":"page"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"DofMap Explanation\nCellDofs degrees of freedom for on each cell\nFaceDofs degrees of freedom for each face\nEdgeDofs degrees of freedom for each edge (in 3D)\nBFaceDofs degrees of freedom for each boundary face\nBEdgeDofs degrees of freedom for each boundary edge (in 3D)","category":"page"},{"location":"fespace/#FEVector","page":"FE Spaces and Arrays","title":"FEVector","text":"","category":"section"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"A FEVector consists of FEVectorBlocks that share a common one-dimensional arrays. Each block is associated to a FESpace and can only write into a region of the common array specified by offsets. It also acts as a one-dimensional AbstractArray itself.","category":"page"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"fevector.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"struct FEVector{T} <: AbstractArray{T,1}\n\na plain array but with an additional layer of several FEVectorBlock subdivisions each carrying coefficients for their associated FESpace\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector-Union{Tuple{T}, Tuple{Array{String,1},Array{var\"#s131\",1} where var\"#s131\"<:FESpace}} where T<:Real","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"FEVector{T}(name::String, FES::Array{FESpace,1}) where T <: Real\n\nCreates FEVector that has one block for each FESpace in FES.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEVector-Union{Tuple{T}, Tuple{String,FESpace}} where T<:Real","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVector","text":"FEVector{T}(name::String, FES::FESpace) where T <: Real\n\nCreates FEVector that has one block.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEVectorBlock","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEVectorBlock","text":"struct FEVectorBlock{T} <: AbstractArray{T,1}\n\nblock of an FEVector that carries coefficients for an associated FESpace and can be assigned as an AbstractArray (getindex, setindex, size, length)\n\n\n\n\n\n","category":"type"},{"location":"fespace/#Base.append!-Union{Tuple{T}, Tuple{FEVector{T},String,FESpace}} where T<:Real","page":"FE Spaces and Arrays","title":"Base.append!","text":"append!(FEF::FEVector{T<:Real}, name::String, FES::FESpace)\n\n\nCustom append function for FEVector that adds a FEVectorBlock at the end.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.fill!-Tuple{FEVectorBlock,Any}","page":"FE Spaces and Arrays","title":"Base.fill!","text":"fill!(b::FEVectorBlock, value::Any)\n\n\nCustom fill function for FEVectorBlock (only fills the block, not the complete FEVector).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Tuple{IO,FEVector}","page":"FE Spaces and Arrays","title":"Base.show","text":"show(io::IO, FEF::FEVector)\n\n\nCustom show function for FEVector that prints some information on its blocks.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Tuple{FEVectorBlock,AbstractArray{var\"#s111\",1} where var\"#s111\"<:Real}","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(a::FEVectorBlock, b::AbstractArray{var\"#s111\",1} where var\"#s111\"<:Real; factor)\n\n\nAdds Array b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Tuple{FEVectorBlock,FEVectorBlock}","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(a::FEVectorBlock, b::FEVectorBlock; factor)\n\n\nAdds FEVectorBlock b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#FEMatrix","page":"FE Spaces and Arrays","title":"FEMatrix","text":"","category":"section"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"A FEMatrix consists of FEMatrixBlocks that share a common ExtendableSparseMatrix. Each block is associated to two FESpaces and can only write into a submatrix of the common sparse matrix specified by offsets. It also acts as a two-dimensional AbstractArray itself.","category":"page"},{"location":"fespace/","page":"FE Spaces and Arrays","title":"FE Spaces and Arrays","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"fematrix.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"struct FEMatrix{T} <: AbstractArray{T,1}\n\nan AbstractMatrix (e.g. an ExtendableSparseMatrix) with an additional layer of several FEMatrixBlock subdivisions each carrying coefficients for their associated pair of FESpaces\n\n\n\n\n\n","category":"type"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{T}, Tuple{String,Array{FESpace,1}}} where T<:Real","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{T}(name::String, FES::Array{FESpace,1}) where T <: Real\n\nCreates FEMatrix with blocks (FESX[i],FESY[j]) (enumerated row-wise).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{T}, Tuple{String,FESpace,FESpace}} where T<:Real","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{T}(name::String, FESX::FESpace, FESY::FESpace) where T <: Real\n\nCreates FEMatrix with one rectangular block (FESX,FESY).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrix-Union{Tuple{T}, Tuple{String,FESpace}} where T<:Real","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrix","text":"FEMatrix{T}(name::String, FES::FESpace) where T <: Real\n\nCreates FEMatrix with one square block (FES,FES).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.FEMatrixBlock","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.FEMatrixBlock","text":"struct FEMatrixBlock{T} <: AbstractArray{T,2}\n\nblock of an FEMatrix that carries coefficients for an associated pair of FESpaces and can be assigned as an two-dimensional AbstractArray (getindex, setindex, size)\n\n\n\n\n\n","category":"type"},{"location":"fespace/#Base.fill!-Tuple{FEMatrixBlock,Any}","page":"FE Spaces and Arrays","title":"Base.fill!","text":"fill!(B::FEMatrixBlock, value::Any)\n\n\nCustom fill function for FEMatrixBlock (only fills the block, not the complete FEMatrix).\n\n\n\n\n\n","category":"method"},{"location":"fespace/#Base.show-Tuple{IO,FEMatrix}","page":"FE Spaces and Arrays","title":"Base.show","text":"show(io::IO, FEM::FEMatrix)\n\n\nCustom show function for FEMatrix that prints some information on its blocks.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Tuple{FEMatrixBlock,FEMatrixBlock}","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(A::FEMatrixBlock, B::FEMatrixBlock; factor)\n\n\nAdds FEMatrixBlock B to FEMatrixBlock A.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEMatrixBlock,ExtendableSparseMatrix{Tv,Ti}}} where Ti<:Integer where Tv","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock!","text":"addblock!(A::FEMatrixBlock, B::ExtendableSparseMatrix{Tv,Ti<:Integer}; factor)\n\n\nAdds ExtendableSparseMatrix B to FEMatrixBlock A.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock_matmul!-Tuple{FEVectorBlock,FEMatrixBlock,FEVectorBlock}","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock_matmul!","text":"addblock_matmul!(a::FEVectorBlock, B::FEMatrixBlock, b::FEVectorBlock; factor)\n\n\nAdds matrix-vector product B times b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.addblock_matmul!-Union{Tuple{Ti}, Tuple{Tv}, Tuple{FEVectorBlock,ExtendableSparseMatrix{Tv,Ti},FEVectorBlock}} where Ti<:Integer where Tv","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.addblock_matmul!","text":"addblock_matmul!(a::FEVectorBlock, B::ExtendableSparseMatrix{Tv,Ti<:Integer}, b::FEVectorBlock; factor)\n\n\nAdds matrix-vector product B times b to FEVectorBlock a.\n\n\n\n\n\n","category":"method"},{"location":"fespace/#GradientRobustMultiPhysics.lrmatmul-Union{Tuple{Ti}, Tuple{Tv}, Tuple{AbstractArray{var\"#s107\",1} where var\"#s107\"<:Real,ExtendableSparseMatrix{Tv,Ti},AbstractArray{var\"#s106\",1} where var\"#s106\"<:Real}} where Ti<:Integer where Tv","page":"FE Spaces and Arrays","title":"GradientRobustMultiPhysics.lrmatmul","text":"lrmatmul(a::AbstractArray{var\"#s107\",1} where var\"#s107\"<:Real, B::ExtendableSparseMatrix{Tv,Ti<:Integer}, b::AbstractArray{var\"#s106\",1} where var\"#s106\"<:Real; factor) -> Any\n\n\nComputes vector'-matrix-vector product a'Bb.\n\n\n\n\n\n","category":"method"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/#D-Equilibration-Error-Estimation-(Global)","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"","category":"section"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"(source code)","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"This example computes a global equilibration error estimator for the H^1 error of some H^1-conforming approximation u_h to the solution u of some Poisson problem -Delta u = f on an L-shaped domain, i.e.","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"eta^2(sigma_h) =  sigma_h - nabla u_h ^2_L^2(T)","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"where sigma_h is an Hdiv-conforming approximation of the exact sigma in the dual mixed problem","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"sigma - nabla u = 0\nquad textand quad\nmathrmdiv(sigma) + f = 0","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"by solving the problem globally.","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"note: Note\nEquilibration error estimators yield guaranteed upper bounds (efficiency index above 1) for the H1 error possibly with some additional term that weighs in the oscillations of f, which are zero in this example, and some additional terms that quantifies the Dirichlet boundary error, which is neglected here.See the local equilibrated version for a less costly alternative.","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"module Example_EQLshape\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n# exact solution u for the Poisson problem\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    result[1] = sin(2*result[1]/3)\n    result[1] *= (x[1]^2 + x[2]^2)^(1/3)\nend\n# ... and its gradient\nfunction exact_function_gradient!(result,x::Array{<:Real,1})\n    result[1] = atan(x[2],x[1])\n    if result[1] < 0\n        result[1] += 2*pi\n    end\n    # du/dy = du/dr * sin(phi) + (1/r) * du/dphi * cos(phi)\n    result[2] = sin(2*result[1]/3) * sin(result[1]) + cos(2*result[1]/3) * cos(result[1])\n    result[2] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\n    # du/dx = du/dr * cos(phi) - (1/r) * du/dphi * sin(phi)\n    result[1] = sin(2*result[1]/3) * cos(result[1]) - cos(2*result[1]/3) * sin(result[1])\n    result[1] *= (x[1]^2 + x[2]^2)^(-1/6) * 2/3\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1, nlevels = 12, theta = 1//2, Plotter = nothing)\n\n    # initial grid\n    xgrid = grid_lshape(Triangle2D)\n\n    # choose some finite elements for primal and dual problem\n    FEType = H1P1{1}\n    FETypeDual = [HDIVBDM1{2},H1P0{1}]\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 5)\n    user_function_gradient = DataFunction(exact_function_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 4)\n\n    # setup Poisson problem\n    Problem = PoissonProblem(2; ncomponents = 1, diffusion = 1.0)\n    add_boundarydata!(Problem, 1, [2,3,4,5,6,7], BestapproxDirichletBoundary; data = user_function)\n    add_boundarydata!(Problem, 1, [1,8], HomogeneousDirichletBoundary)\n\n    # setup dual mixed Poisson problem\n    DualProblem = PDEDescription(\"dual mixed formulation\")\n    add_unknown!(DualProblem; unknown_name = \"Stress\", equation_name = \"stress equation\")\n    add_operator!(DualProblem, [1,1], ReactionOperator(DoNotChangeAction(2)))\n    add_rhsdata!(DualProblem, 1, RhsOperator(NormalFlux, [2,3,4,5,6,7], user_function; AT = ON_BFACES))\n    add_unknown!(DualProblem; unknown_name = \"Lagrange multiplier for divergence\", equation_name = \"divergence constraint\")\n    add_operator!(DualProblem, [1,2], LagrangeMultiplier(Divergence))\n\n    # setup exact error evaluations\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    L2ErrorEvaluatorDual = L2ErrorIntegrator(Float64, user_function_gradient, Identity)\n\n    # define error estimator : || sigma_h - nabla u_h ||^2_{L^2(T)}\n    # this can be realised via a kernel function\n    function eqestimator_kernel(result, input)\n        # input = [Identity(sigma_h), Gradient(u_h)]\n        result[1] = (input[1] - input[3])^2 + (input[2] - input[4])^2\n        return nothing\n    end\n    estimator_action_kernel = ActionKernel(eqestimator_kernel, [1,4]; name = \"estimator kernel\", dependencies = \"\", quadorder = 2)\n    # ... which generates an action...\n    estimator_action = Action(Float64,estimator_action_kernel)\n    # ... which is used inside an ItemIntegrator\n    EQIntegrator = ItemIntegrator(Float64,ON_CELLS,[Identity, Gradient],estimator_action)\n\n    # refinement loop (only uniform for now)\n    NDofs = zeros(Int, nlevels)\n    NDofsDual = zeros(Int, nlevels)\n    Results = zeros(Float64, nlevels, 4)\n    Solution = nothing\n    DualSolution = nothing\n    for level = 1 : nlevels\n\n        # create a solution vector and solve the problem\n        FES = FESpace{FEType}(xgrid)\n        Solution = FEVector{Float64}(\"Discrete Solution\",FES)\n        solve!(Solution, Problem; verbosity = verbosity - 1)\n        NDofs[level] = length(Solution[1])\n\n        # solve the dual problem\n        FESDual = [FESpace{FETypeDual[1]}(xgrid),FESpace{FETypeDual[2]}(xgrid)]\n        DualSolution = FEVector{Float64}(\"Discrete Dual Solution\",FESDual)\n        NDofsDual[level] = length(DualSolution.entries)\n        solve!(DualSolution, DualProblem; verbosity = verbosity - 1)\n\n        if verbosity > 0\n            println(\"\\n  SOLVE LEVEL $level\")\n            println(\"    ndofs = $(NDofs[level])\")\n            println(\"    ndofsDual = $(NDofsDual[level])\")\n        end\n\n        # evaluate eqilibration error estimator\n        error4cell = zeros(Float64,1,num_sources(xgrid[CellNodes]))\n        evaluate!(error4cell, EQIntegrator, [DualSolution[1], Solution[1]])\n\n        # calculate L2 error, H1 error, estimator, dual L2 error and write to results\n        Results[level,1] = sqrt(evaluate(L2ErrorEvaluator,[Solution[1]]))\n        Results[level,2] = sqrt(evaluate(H1ErrorEvaluator,[Solution[1]]))\n        Results[level,3] = sqrt(sum(error4cell))\n        Results[level,4] = sqrt(evaluate(L2ErrorEvaluatorDual,[DualSolution[1]]))\n        if verbosity > 0\n            println(\"  ESTIMATE\")\n            println(\"    estim H1 error = $(Results[level,3])\")\n            println(\"    exact H1 error = $(Results[level,2])\")\n            println(\"     dual L2 error = $(Results[level,4])\")\n        end\n\n        # mesh refinement\n        if theta >= 1\n            # uniform mesh refinement\n            xgrid = uniform_refine(xgrid)\n        else\n            # adaptive mesh refinement\n            # refine by red-green-blue refinement (incl. closuring)\n            facemarker = bulk_mark(xgrid, view(error4cell,1,:), theta; verbosity = verbosity)\n            xgrid = RGB_refine(xgrid, facemarker; verbosity = verbosity)\n        end\n    end\n\n    # plot\n    GradientRobustMultiPhysics.plot(Solution, [0,1], [Identity,Identity]; Plotter = Plotter, verbosity = verbosity, use_subplots = false)\n\n    # print results\n    @printf(\"\\n  NDOFS  |   L2ERROR      order   |   H1ERROR      order   | H1-ESTIMATOR   order      efficiency   \")\n    @printf(\"\\n=========|========================|========================|========================================\\n\")\n    order = 0\n    for j=1:nlevels\n        @printf(\"  %6d |\",NDofs[j]);\n        for k = 1 : 3\n            if j > 1\n                order = log(Results[j-1,k]/Results[j,k]) / (log(NDofs[j]/NDofs[j-1])/2)\n            end\n            @printf(\" %.5e \",Results[j,k])\n            if k == 3\n                @printf(\"   %.3f       %.3f\",order,Results[j,k]/Results[j,k-1])\n            else\n                @printf(\"   %.3f   |\",order)\n            end\n        end\n        @printf(\"\\n\")\n    end\n\nend\n\nend","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"","category":"page"},{"location":"examples_advanced/doc_2d_lshape_adaptivity_eq/","page":"2D Equilibration Error Estimation (Global)","title":"2D Equilibration Error Estimation (Global)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_2d_stokes_probust/#D-Pressure-robustness","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"","category":"section"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"(source code)","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"This example studies two benchmarks for pressure-robust discretisations of the stationary     Navier-Stokes equations that seek a velocity mathbfu and pressure mathbfp such that","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"with (possibly time-dependent) exterior force mathbff and some viscosity parameter mu.","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"Pressure-robustness is concerned with gradient forces that may appear in the right-hand side or the material derivative and should be balanced by the pressure (as divergence-free vector fields are orthogonal on gradient fields). Here, two test problems are considered:","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"HydrostaticTestProblem() : Stokes (without convection term) and mathbff = nabla p such that  mathbfu = 0\nPotentialFlowTestProblem() : Navier-Stokes with mathbff = 0 and mathbfu = nabla h for some harmonic function","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"In both test problems the errors of non-pressure-robust discretisations scale with  1mu, while the pressure-robust discretisation solves mathbfu = 0 exactly in test problem 1 and gives much better results in test problem 2.","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"module Example_2DPressureRobustness\n\nusing GradientRobustMultiPhysics\nusing Printf\n\n# problem data\nfunction HydrostaticTestProblem()\n    # Stokes problem with f = grad(p)\n    # u = 0\n    # p = x^3+y^3 - 1//2\n    function P1_pressure!(result,x::Array{<:Real,1})\n        result[1] = x[1]^3 + x[2]^3 - 1//2\n    end\n    function P1_velo!(result)\n        result[1] = 0;\n        result[2] = 0;\n    end\n    function P1_velogradient!(result)\n        result[1] = 0\n        result[2] = 0;\n        result[3] = 0;\n        result[4] = 0;\n    end\n    function P1_rhs!(result,x::Array{<:Real,1})\n        result[1] = 3*x[1]^2\n        result[2] = 3*x[2]^2\n    end\n    user_function_velocity = DataFunction(P1_velo!, [2,2]; name = \"u_exact\", dependencies = \"\", quadorder = 0)\n    user_function_pressure = DataFunction(P1_pressure!, [1,2]; name = \"p_exact\", dependencies = \"X\", quadorder = 3)\n    user_function_velocity_gradient = DataFunction(P1_velogradient!, [4,2]; name = \"grad(u_exact)\", dependencies = \"\", quadorder = 0)\n    user_function_rhs = DataFunction(P1_rhs!, [2,2]; name = \"f\", dependencies = \"X\", quadorder = 2)\n\n    return user_function_pressure,user_function_velocity,user_function_velocity_gradient,user_function_rhs, false\nend\n\nfunction PotentialFlowTestProblem()\n    # NavierStokes with f = 0\n    # u = grad(h) with h = x^3 - 3xy^2\n    # p = - |grad(h)|^2 + 14//5\n    function P2_pressure!(result,x::Array{<:Real,1})\n        result[1] = - 1//2 * (9*(x[1]^4 + x[2]^4) + 18*x[1]^2*x[2]^2) + 14//5\n    end\n    function P2_velo!(result,x::Array{<:Real,1})\n        result[1] = 3*x[1]^2 - 3*x[2]^2;\n        result[2] = -6*x[1]*x[2];\n    end\n    function P2_velogradient!(result,x::Array{<:Real,1})\n        result[1] = 6*x[1]\n        result[2] = -6*x[2];\n        result[3] = -6*x[2];\n        result[4] = -6*x[1];\n    end\n    function P2_rhs!(result)\n        result[1] = 0\n        result[2] = 0\n    end\n    user_function_velocity = DataFunction(P2_velo!, [2,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 2)\n    user_function_pressure = DataFunction(P2_pressure!, [1,2]; name = \"p_exact\", dependencies = \"X\", quadorder = 4)\n    user_function_velocity_gradient = DataFunction(P2_velogradient!, [4,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 1)\n    user_function_rhs = DataFunction(P2_rhs!, [2,2]; name = \"f\", dependencies = \"\", quadorder = 0)\n\n    return user_function_pressure,user_function_velocity,user_function_velocity_gradient,user_function_rhs, true\nend\n\n\nfunction solve(Problem, xgrid, FETypes, viscosity = 1e-2; nlevels = 3, print_results = true, verbosity = 1)\n\n    # load problem data and set solver parameters\n    ReconstructionOperator = FETypes[3]\n    exact_pressure!, exact_velocity!, exact_velocity_gradient!, rhs!, nonlinear = Problem()\n    maxIterations = 20  # termination criterion 1 for nonlinear mode\n    maxResidual = 1e-12 # termination criterion 2 for nonlinear mode\n\n    # load Stokes problem prototype and assign data\n    StokesProblem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = nonlinear)\n    add_boundarydata!(StokesProblem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = exact_velocity!)\n    add_rhsdata!(StokesProblem, 1, RhsOperator(ReconstructionOperator, [0], rhs!))\n\n    # define bestapproximation problems\n    L2VelocityBestapproximationProblem = L2BestapproximationProblem(exact_velocity!; bestapprox_boundary_regions = [1,2,3,4])\n    L2PressureBestapproximationProblem = L2BestapproximationProblem(exact_pressure!; bestapprox_boundary_regions = [])\n    H1VelocityBestapproximationProblem = H1BestapproximationProblem(exact_velocity_gradient!, exact_velocity!; bestapprox_boundary_regions = [1,2,3,4])\n\n    # define ItemIntegrators for L2/H1 error computation\n    L2VelocityErrorEvaluator = L2ErrorIntegrator(Float64, exact_velocity!, Identity)\n    L2PressureErrorEvaluator = L2ErrorIntegrator(Float64, exact_pressure!, Identity)\n    H1VelocityErrorEvaluator = L2ErrorIntegrator(Float64, exact_velocity_gradient!, Gradient)\n    L2error_velocity = []; L2error_pressure = []; L2error_velocity2 = []; L2error_pressure2 = []\n    L2errorInterpolation_velocity = []; L2errorInterpolation_pressure = []; L2errorBestApproximation_velocity = []; L2errorBestApproximation_pressure = []\n    H1error_velocity = []; H1error_velocity2 = []; H1errorBestApproximation_velocity = []; NDofs = []\n\n    # setup classical (StokesProblem) and pressure-robust scheme (StokesProblem2)\n    StokesProblem2 = deepcopy(StokesProblem)\n    StokesProblem.RHSOperators[1][1] = RhsOperator(Identity, [0], rhs!)\n    StokesProblem2.RHSOperators[1][1] = RhsOperator(ReconstructionOperator, [0], rhs!)\n    if nonlinear\n        StokesProblem.LHSOperators[1,1][1].store_operator = true # store matrix of Laplace operator\n        StokesProblem2.LHSOperators[1,1][1].store_operator = true # store matrix of Laplace operator\n        StokesProblem.LHSOperators[1,1][2] = ConvectionOperator(1, Identity, 2, 2)\n        StokesProblem2.LHSOperators[1,1][2] = ConvectionOperator(1, ReconstructionOperator, 2, 2; testfunction_operator = ReconstructionOperator)\n    end\n\n    # loop over refinement levels\n    for level = 1 : nlevels\n\n        # uniform mesh refinement\n        xgrid = uniform_refine(xgrid)\n        xFaceVolumes = xgrid[FaceVolumes]\n\n        # get FESpaces\n        FESpaceVelocity = FESpace{FETypes[1]}(xgrid)\n        FESpacePressure = FESpace{FETypes[2]}(xgrid; broken = true)\n\n        Solution = FEVector{Float64}(\"Stokes velocity classical\",FESpaceVelocity)\n        append!(Solution,\"Stokes pressure (classical)\",FESpacePressure)\n        solve!(Solution, StokesProblem; maxIterations = maxIterations, maxResidual = maxResidual, verbosity = verbosity, anderson_iterations = 5)\n        push!(NDofs,length(Solution.entries))\n\n        Solution2 = FEVector{Float64}(\"Stokes velocity p-robust\",FESpaceVelocity)\n        append!(Solution2,\"Stokes pressure (p-robust)\",FESpacePressure)\n        solve!(Solution2, StokesProblem2; maxIterations = maxIterations, maxResidual = maxResidual, verbosity = verbosity, anderson_iterations = 5)\n\n        # solve bestapproximation problems\n        L2VelocityBestapproximation = FEVector{Float64}(\"L2-Bestapproximation velocity\",FESpaceVelocity)\n        L2PressureBestapproximation = FEVector{Float64}(\"L2-Bestapproximation pressure\",FESpacePressure)\n        H1VelocityBestapproximation = FEVector{Float64}(\"H1-Bestapproximation velocity\",FESpaceVelocity)\n        solve!(L2VelocityBestapproximation, L2VelocityBestapproximationProblem)\n        solve!(L2PressureBestapproximation, L2PressureBestapproximationProblem)\n        solve!(H1VelocityBestapproximation, H1VelocityBestapproximationProblem)\n\n        # compute L2 and H1 error\n        append!(L2error_velocity,sqrt(evaluate(L2VelocityErrorEvaluator,Solution[1])))\n        append!(L2error_velocity2,sqrt(evaluate(L2VelocityErrorEvaluator,Solution2[1])))\n        append!(L2errorBestApproximation_velocity,sqrt(evaluate(L2VelocityErrorEvaluator,L2VelocityBestapproximation[1])))\n        append!(L2error_pressure,sqrt(evaluate(L2PressureErrorEvaluator,Solution[2])))\n        append!(L2error_pressure2,sqrt(evaluate(L2PressureErrorEvaluator,Solution2[2])))\n        append!(L2errorBestApproximation_pressure,sqrt(evaluate(L2PressureErrorEvaluator,L2PressureBestapproximation[1])))\n        append!(H1error_velocity,sqrt(evaluate(H1VelocityErrorEvaluator,Solution[1])))\n        append!(H1error_velocity2,sqrt(evaluate(H1VelocityErrorEvaluator,Solution2[1])))\n        append!(H1errorBestApproximation_velocity,sqrt(evaluate(H1VelocityErrorEvaluator,H1VelocityBestapproximation[1])))\n\n        # print results\n        if (level == nlevels) && (print_results)\n            println(\"\\n         |   L2ERROR    |   L2ERROR    |   L2ERROR\")\n            println(\"   NDOF  | VELO-CLASSIC | VELO-PROBUST | VELO-L2BEST\");\n            for j=1:nlevels\n                @printf(\"  %6d |\",NDofs[j]);\n                @printf(\" %.6e |\",L2error_velocity[j])\n                @printf(\" %.6e |\",L2error_velocity2[j])\n                @printf(\" %.6e\\n\",L2errorBestApproximation_velocity[j])\n            end\n            println(\"\\n         |   H1ERROR    |   H1ERROR    |   H1ERROR\")\n            println(\"   NDOF  | VELO-CLASSIC | VELO-PROBUST | VELO-H1BEST\");\n            for j=1:nlevels\n                @printf(\"  %6d |\",NDofs[j]);\n                @printf(\" %.6e |\",H1error_velocity[j])\n                @printf(\" %.6e |\",H1error_velocity2[j])\n                @printf(\" %.6e\\n\",H1errorBestApproximation_velocity[j])\n            end\n            println(\"\\n         |   L2ERROR    |   L2ERROR    |   L2ERROR\")\n            println(\"   NDOF  | PRES-CLASSIC | PRES-PROBUST | PRES-L2BEST\");\n            for j=1:nlevels\n                @printf(\"  %6d |\",NDofs[j]);\n                @printf(\" %.6e |\",L2error_pressure[j])\n                @printf(\" %.6e |\",L2error_pressure2[j])\n                @printf(\" %.6e\\n\",L2errorBestApproximation_pressure[j])\n            end\n            println(\"\\nLEGEND\\n======\")\n            println(\"VELO-CLASSIC : discrete Stokes velocity solution ($(FESpaceVelocity.name)) with classical discretisation\")\n            println(\"VELO-PROBUST : discrete Stokes velocity solution ($(FESpaceVelocity.name)) with p-robust discretisation\")\n            println(\"VELO-L2BEST : L2-Bestapproximation of exact velocity (with boundary data)\")\n            println(\"VELO-H1BEST : H1-Bestapproximation of exact velocity (with boudnary data)\")\n            println(\"PRES-CLASSIC : discrete Stokes pressure solution ($(FESpacePressure.name)) with classical discretisation\")\n            println(\"PRES-PROBUST : discrete Stokes pressure solution ($(FESpaceVelocity.name)) with p-robust discretisation\")\n            println(\"PRES-L2BEST : L2-Bestapproximation of exact pressure (without boundary data)\")\n        end\n    end\n\n    # return last error for testing\n    return L2error_velocity2[end]\nend\n\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, nlevels = 3, viscosity = 1e-2)\n    # set problem to solve\n    #Problem = HydrostaticTestProblem\n    Problem = PotentialFlowTestProblem\n\n    # set grid and problem parameters\n    xgrid = grid_unitsquare_mixedgeometries() # initial grid\n\n    # choose finite element discretisation\n    #FETypes = [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}] # Bernardi--Raugel with RT0 reconstruction\n    FETypes = [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVBDM1{2}}] # Bernardi--Raugel with BDM1 reconstruction\n    #FETypes = [H1CR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}] # Crouzeix--Raviart with RT0 reconstruction\n\n    # run\n    solve(Problem, xgrid, FETypes, viscosity; nlevels = nlevels, verbosity = verbosity)\n\n    return nothing\nend\n\n\n# test function that is called by test unit\n# tests if hydrostatic problem is solved exactly by pressure-robust methods\nfunction test(; verbosity = 0)\n    xgrid = uniform_refine(grid_unitsquare_mixedgeometries())\n\n    testspaces = [[H1CR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}],\n                  [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVRT0{2}}],\n                  [H1BR{2}, H1P0{1}, ReconstructionIdentity{HDIVBDM1{2}}]]\n    error = []\n    for FETypes in testspaces\n        push!(error, solve(HydrostaticTestProblem, xgrid, FETypes, 1; nlevels = 1, print_results = false, verbosity = verbosity))\n        println(\"FETypes = $FETypes   error = $(error[end])\")\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"Main.##279.Example_2DPressureRobustness","category":"page"},{"location":"examples/doc_2d_stokes_probust/#Output-of-default-main()-run","page":"2D Pressure-robustness","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"Example_2DPressureRobustness.main()","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"\n         |   L2ERROR    |   L2ERROR    |   L2ERROR\n   NDOF  | VELO-CLASSIC | VELO-PROBUST | VELO-L2BEST\n     122 | 1.103548e+00 | 1.222596e-01 | 2.574946e-02\n     434 | 4.808788e-01 | 1.286621e-02 | 5.801888e-03\n    1634 | 1.594519e-01 | 2.724361e-03 | 1.356292e-03\n\n         |   H1ERROR    |   H1ERROR    |   H1ERROR\n   NDOF  | VELO-CLASSIC | VELO-PROBUST | VELO-H1BEST\n     122 | 1.989319e+01 | 2.120566e+00 | 6.762537e-01\n     434 | 1.340065e+01 | 4.311147e-01 | 3.346274e-01\n    1634 | 8.673708e+00 | 1.779165e-01 | 1.663399e-01\n\n         |   L2ERROR    |   L2ERROR    |   L2ERROR\n   NDOF  | PRES-CLASSIC | PRES-PROBUST | PRES-L2BEST\n     122 | 1.698623e+00 | 1.074021e+00 | 1.070511e+00\n     434 | 7.664283e-01 | 5.464693e-01 | 5.463668e-01\n    1634 | 3.506343e-01 | 2.746146e-01 | 2.745972e-01\n\nLEGEND\n======\nVELO-CLASSIC : discrete Stokes velocity solution (H1BR{2}) with classical discretisation\nVELO-PROBUST : discrete Stokes velocity solution (H1BR{2}) with p-robust discretisation\nVELO-L2BEST : L2-Bestapproximation of exact velocity (with boundary data)\nVELO-H1BEST : H1-Bestapproximation of exact velocity (with boudnary data)\nPRES-CLASSIC : discrete Stokes pressure solution (H1P0{1} (broken)) with classical discretisation\nPRES-PROBUST : discrete Stokes pressure solution (H1BR{2}) with p-robust discretisation\nPRES-L2BEST : L2-Bestapproximation of exact pressure (without boundary data)\n","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"","category":"page"},{"location":"examples/doc_2d_stokes_probust/","page":"2D Pressure-robustness","title":"2D Pressure-robustness","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples_intro/#How-to-run-the-examples","page":"How to run the examples","title":"How to run the examples","text":"","category":"section"},{"location":"examples_intro/","page":"How to run the examples","title":"How to run the examples","text":"Note that all examples are written inside their own modules. To start an example you usually have to include the file and then run the main() function from the example module. The default configuration of the introductory examples is started automatically after include. Some examples have optional argument, e.g. Plotter = PyPlot, to produce some plots with PyPlot (using PyPlot reuqired beforehand) or change other parameters.","category":"page"},{"location":"examples_intro/","page":"How to run the examples","title":"How to run the examples","text":"Here is an example how to start the example in \"examples/doc_2d_compressiblestokes.jl\":","category":"page"},{"location":"examples_intro/","page":"How to run the examples","title":"How to run the examples","text":"# include example file, e.g.:\ninclude(\"examples_advanced/doc_2d_compressiblestokes.jl\")\n# as a result some module is loaded, in this case Example_2DCompressibleStokes\n\n# run without graphics output\nExample_2DCompressibleStokes.main()\n\n# run with PyPlot graphics output\nusing PyPlot\nExample_2DCompressibleStokes.main(; Plotter = PyPlot)","category":"page"},{"location":"examples_intro/","page":"How to run the examples","title":"How to run the examples","text":"Also note, that if you make changes to the example files you have to include them again!","category":"page"},{"location":"meshing/#Meshing","page":"Meshing","title":"Meshing","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Meshes are stored as an ExtendableGrid, see ExtendableGrids.jl for details and constructors. Grid generators for simplex grids can be found e.g. in the external module SimplexGridFactory.jl","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Cells, faces and edges of the mesh are associated to AbstractElementGeometries (defined by ExtendableGrids.jl) that are used to dispatch functionality (local/global transformation, enumeration rules, set of basis functions, volume calculation, refinements etc.). See below for a list of recognized element geometries.","category":"page"},{"location":"meshing/#Available-Global-Mesh-Manipulations","page":"Meshing","title":"Available Global Mesh Manipulations","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"Modules = [GradientRobustMultiPhysics]\nPages = [\"meshrefinements.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"meshing/#GradientRobustMultiPhysics.barycentric_refine-Union{Tuple{ExtendableGrid{T,K}}, Tuple{K}, Tuple{T}} where K where T","page":"Meshing","title":"GradientRobustMultiPhysics.barycentric_refine","text":"generates a new ExtendableGrid by barycentric refinement of each cell in the source grid\n\nbarycentric refinement is available for these ElementGeometries\n\nQuadrilateral2D (first split into Triangle2D)\nTriangle2D\n\n\n\n\n\n","category":"method"},{"location":"meshing/#GradientRobustMultiPhysics.split_grid_into-Union{Tuple{K}, Tuple{T}, Tuple{ExtendableGrid{T,K},Type{var\"#s13\"} where var\"#s13\"<:AbstractElementGeometry}} where K where T","page":"Meshing","title":"GradientRobustMultiPhysics.split_grid_into","text":"split_grid_into(source_grid::ExtendableGrid{T,K}, targetgeometry::Type{var\"#s13\"} where var\"#s13\"<:AbstractElementGeometry) -> ExtendableGrid{_A,_B} where _B where _A\n\n\ngenerates a new ExtendableGrid by splitting each cell into subcells of the specified targetgeometry\n\nsplit rules exist for\n\nQuadrilateral2D into Triangle2D\nHexahedron3D into Tetrahedron3D\n\n\n\n\n\n","category":"method"},{"location":"meshing/#GradientRobustMultiPhysics.uniform_refine-Union{Tuple{ExtendableGrid{T,K}}, Tuple{K}, Tuple{T}} where K where T","page":"Meshing","title":"GradientRobustMultiPhysics.uniform_refine","text":"generates a new ExtendableGrid by uniform refinement of each cell in the given grid\n\nuniform refinement rules are available for these AbstractElementGeometries:\n\nLine1D (bisection into two subsegments)\nTriangle2D (red refinement into four subtriangles)\nQuadrilateral2D (into four subquadrilaterals)\nTetrahedron (into eight subtetrahedrons, but seems buggy)\nHexahedron (into eight subhexahedrons)\n\nif multiple geometries are in the mesh uniform refinement will only work if all refinement rules refine faces and edges (in 3D) equally (so no hanging nodes are created)\n\n\n\n\n\n","category":"method"},{"location":"meshing/#Recognized-Geometries-and-Reference-Domains","page":"Meshing","title":"Recognized Geometries and Reference Domains","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"The following list contains all recognized subtypes of ExtendableGrids.AbstractElementGeometries and their reference geometries. Moreover, each geometry has a number of rules that define the geometries and the local enumeration of its nodes, faces and edges, see source code of shape_specs.jl for details","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Edge1D-:-AbstractElementGeometry1D","page":"Meshing","title":"Edge1D <: AbstractElementGeometry1D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[1]-----[2]               [1] = [0]\n                          [2] = [1]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Triangle2D","page":"Meshing","title":"Triangle2D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[3]                 \n | \\   \n |   \\                    [1] = [0,0]\n |     \\                  [2] = [1,0]\n |       \\                [3] = [0,1]\n |         \\ \n[1]--------[2]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Parallelogram2D-:-Quadrilateral2D","page":"Meshing","title":"Parallelogram2D <: Quadrilateral2D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[4]--------[3]               \n |          |             [1] = [0,0]\n |          |             [2] = [1,0]\n |          |             [3] = [1,1]\n |          |             [4] = [0,1]\n[1]--------[2]\n\nNote: most finite elements only work as intended on Parallelogram2D\n      since the local<>global map stays affine in this case","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Tetrahedron3D","page":"Meshing","title":"Tetrahedron3D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"[4]                 \n |\\\\   \n | \\ \\                    [1] = [0,0,0]\n |  \\  \\                  [2] = [1,0,0]\n |   \\   \\                [3] = [0,1,0]\n | _-[3]-_ \\              [4] = [0,0,1]\n[1]--------[2]","category":"page"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"","category":"page"},{"location":"meshing/#Parallelepiped3D-:-Hexahedron3D","page":"Meshing","title":"Parallelepiped3D <: Hexahedron3D","text":"","category":"section"},{"location":"meshing/","page":"Meshing","title":"Meshing","text":"    [8]--------[7]        [1] = [0,0,0]\n   / |        / |         [2] = [1,0,0]\n[5]--------[6]  |         [3] = [1,1,0]\n |   |      |   |         [4] = [0,1,0]\n |   |      |   |         [5] = [0,0,1]\n |  [4]-----|--[3]        [6] = [1,0,1]\n | /        | /           [7] = [1,1,1]\n[1]--------[2]            [8] = [0,1,1]\n\nNote: most finite elements only work as intended on Parallelepiped3D\n      since the local<>global map stays affine in this case","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/#D-Convection-Diffusion-Problem","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"","category":"section"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"(source code)","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"This example computes the solution of some convection-diffusion problem","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"-nu Delta u + mathbfbeta cdot nabla u = f quad textin  Omega","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"with some diffusion coefficient  nu, some vector-valued function  mathbfbeta and inhomogeneous Dirichlet boundary data.","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"We prescribe an analytic solution and check the L2 and H1 error convergence of the method on a series of uniformly refined meshes. We also compare with the error of a simple nodal interpolation and plot the solution and the norm of its gradient.","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"For small nu, the convection term dominates and pollutes the accuracy of the method. For demonstration some simple gradient jump (interior penalty) stabilisation is added to improve things.","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"module Example_2DConvectionDiffusion\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n\n# problem data and expected exact solution\nfunction exact_solution!(result,x::Array{<:Real,1})\n    result[1] = x[1]*x[2]*(x[1]-1)*(x[2]-1) + x[1]\nend\nfunction exact_solution_gradient!(result,x::Array{<:Real,1})\n    result[1] = x[2]*(2*x[1]-1)*(x[2]-1) + 1\n    result[2] = x[1]*(2*x[2]-1)*(x[1]-1)\nend\nfunction beta!(result)\n    result[1] = 1\n    result[2] = 0\nend\nfunction exact_solution_rhs!(diffusion)\n    function closure(result,x::Array{<:Real,1})\n        # diffusion part\n        result[1] = -diffusion*(2*x[2]*(x[2]-1) + 2*x[1]*(x[1]-1))\n        # convection part (beta * grad(u))\n        result[1] += x[2]*(2*x[1]-1)*(x[2]-1) + 1\n        return nothing\n    end\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1, Plotter = nothing, diffusion = 1e-5, stabilisation = 2e-2, nlevels = 6)\n\n    # load a mesh of the unit square (this one has triangles and quads in it)\n    # it also has four boundary regions (1 = bottom, 2 = right, 3 = top, 4 = left)\n    # used below to prescribe the boundary data\n    xgrid = grid_unitsquare_mixedgeometries(); # initial grid\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_solution!, [1,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 4)\n    user_function_gradient = DataFunction(exact_solution_gradient!, [2,2]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 3)\n    user_function_rhs = DataFunction(exact_solution_rhs!(diffusion), [1,2]; name = \"f\", dependencies = \"X\", quadorder = 3)\n    user_function_convection = DataFunction(beta!, [2,2]; name = \"beta\", dependencies = \"\", quadorder = 0)\n\n    # choose a finite element type, here we choose a second order H1-conforming one\n    FEType = H1P2{1,2}\n\n    # create PDE description = start with Poisson problem and add convection operator to block [1,1] and change equation name\n    Problem = PoissonProblem(2; diffusion = diffusion)\n    add_operator!(Problem, [1,1], ConvectionOperator(Float64,user_function_convection,1); equation_name = \"convection diffusion equation\")\n\n    # add right-hand side data to equation 1 (there is only one in this example)\n    add_rhsdata!(Problem, 1, RhsOperator(Identity, [0], user_function_rhs))\n\n    # add boundary data to unknown 1 (there is only one in this example)\n    # on boundary regions where the solution is linear only need to be interpolated\n    # on boundary regions where the solution is zero only homoegeneous boundary conditions are needed\n    add_boundarydata!(Problem, 1, [1,3], BestapproxDirichletBoundary; data = user_function)\n    add_boundarydata!(Problem, 1, [2], InterpolateDirichletBoundary; data = user_function)\n    add_boundarydata!(Problem, 1, [4], HomogeneousDirichletBoundary)\n\n    # add a gradient jump (interior penalty) stabilisation for dominant convection\n    if stabilisation > 0\n        # first we define an item-dependent action kernel...\n        xFaceVolumes::Array{Float64,1} = xgrid[FaceVolumes]\n        function stabilisation_kernel(result, input, item)\n            for j = 1 : length(input)\n                result[j] = input[j] * stabilisation * xFaceVolumes[item]^2\n            end\n            return nothing\n        end\n        stab_action_kernel = ActionKernel(stabilisation_kernel, [2,2]; name = \"stabilisation action kernel\", dependencies = \"I\", quadorder = 0)\n        # ... which generates an action...\n        stab_action = Action(Float64,stab_action_kernel)\n        # ... which is given to an bilinear form constructor\n        JumpStabilisation = AbstractBilinearForm(\"[grad(u)] [grad(v)]\", GradientDisc{Jump}, GradientDisc{Jump}, stab_action; AT = ON_IFACES)\n        add_operator!(Problem, [1,1], JumpStabilisation)\n    end\n\n    # finally we have a look at the problem\n    show(Problem)\n\n    # define ItemIntegrators for L2/H1 error computation and some arrays to store the errors\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    L2error = []; H1error = []; L2errorInterpolation = []; H1errorInterpolation = []; NDofs = []\n\n    # refinement loop over levels\n    for level = 1 : nlevels\n\n        # uniform mesh refinement\n        if (level > 1)\n            xgrid = uniform_refine(xgrid)\n        end\n\n        # generate FESpace\n        FES = FESpace{FEType}(xgrid)\n        xFaceVolumes = xgrid[FaceVolumes] # update xFaceVolumes used in stabilisation definition\n\n        # solve PDE\n        Solution = FEVector{Float64}(\"Problem solution\",FES)\n        solve!(Solution, Problem; verbosity = verbosity)\n        push!(NDofs,length(Solution.entries))\n\n        # interpolate\n        Interpolation = FEVector{Float64}(\"Interpolation\",FES)\n        interpolate!(Interpolation[1], user_function; verbosity = verbosity)\n\n        # compute L2 and H1 error\n        append!(L2error,sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\n        append!(L2errorInterpolation,sqrt(evaluate(L2ErrorEvaluator,Interpolation[1])))\n        append!(H1error,sqrt(evaluate(H1ErrorEvaluator,Solution[1])))\n        append!(H1errorInterpolation,sqrt(evaluate(H1ErrorEvaluator,Interpolation[1])))\n\n        if (level == nlevels)\n            # print error history\n            println(\"\\n         |   L2ERROR   |   L2ERROR\")\n            println(\"   NDOF  |   SOLUTION  |   INTERPOL\");\n            for j=1:nlevels\n                @printf(\"  %6d |\",NDofs[j]);\n                @printf(\" %.5e |\",L2error[j])\n                @printf(\" %.5e\\n\",L2errorInterpolation[j])\n            end\n            println(\"\\n         |   H1ERROR   |   H1ERROR\")\n            println(\"   NDOF  |   SOLUTION  |   INTERPOL\");\n            for j=1:nlevels\n                @printf(\"  %6d |\",NDofs[j]);\n                @printf(\" %.5e |\",H1error[j])\n                @printf(\" %.5e\\n\",H1errorInterpolation[j])\n            end\n\n            # plot\n            GradientRobustMultiPhysics.plot(Solution, [1,1], [Identity, Gradient]; Plotter = Plotter, verbosity = verbosity)\n        end\n    end\nend\n\nend","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"Main.##256.Example_2DConvectionDiffusion","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/#Output-of-default-main()-run","page":"2D Convection-Diffusion-Problem","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"Example_2DConvectionDiffusion.main()","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"\nPDE-DESCRIPTION\n===============\n  system name = Poisson problem\n\n     id   | unknown name / equation name\n    [1]   | unknown / convection diffusion equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | Laplacian (regions = [0])\n            | (beta * Gradient) u * v (regions = [0])\n            | [grad(u)] [grad(v)] (regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | f * Identity(v_h) (regions = [0])\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 3]\n                         InterpolateDirichletBoundary -> [2]\n                         HomogeneousDirichletBoundary -> [4]\n                          \n\n\nSOLVER\n======\n  system name = Poisson problem  @time = 0\n\n  target (FE) = Problem solution (H1P2{1,2}, ndofs = 23)\n                \n  subiteration | equations that are solved together\n       [1]     | convection diffusion equation\n\n  residuals = [4.075788349076616e-32]\n\nINTERPOLATING\n=============\n     source = u_exact @time = 0\n     target = Interpolation\n         AT = ON_CELLS\n         FE = H1P2{1,2} (ndofs = 23)\n\nSOLVER\n======\n  system name = Poisson problem  @time = 0\n\n  target (FE) = Problem solution (H1P2{1,2}, ndofs = 73)\n                \n  subiteration | equations that are solved together\n       [1]     | convection diffusion equation\n\n  residuals = [6.361046159484029e-32]\n\nINTERPOLATING\n=============\n     source = u_exact @time = 0\n     target = Interpolation\n         AT = ON_CELLS\n         FE = H1P2{1,2} (ndofs = 73)\n\nSOLVER\n======\n  system name = Poisson problem  @time = 0\n\n  target (FE) = Problem solution (H1P2{1,2}, ndofs = 257)\n                \n  subiteration | equations that are solved together\n       [1]     | convection diffusion equation\n\n  residuals = [5.819291383165301e-32]\n\nINTERPOLATING\n=============\n     source = u_exact @time = 0\n     target = Interpolation\n         AT = ON_CELLS\n         FE = H1P2{1,2} (ndofs = 257)\n\nSOLVER\n======\n  system name = Poisson problem  @time = 0\n\n  target (FE) = Problem solution (H1P2{1,2}, ndofs = 961)\n                \n  subiteration | equations that are solved together\n       [1]     | convection diffusion equation\n\n  residuals = [2.4910607474315087e-32]\n\nINTERPOLATING\n=============\n     source = u_exact @time = 0\n     target = Interpolation\n         AT = ON_CELLS\n         FE = H1P2{1,2} (ndofs = 961)\n\nSOLVER\n======\n  system name = Poisson problem  @time = 0\n\n  target (FE) = Problem solution (H1P2{1,2}, ndofs = 3713)\n                \n  subiteration | equations that are solved together\n       [1]     | convection diffusion equation\n\n  residuals = [1.3331525760536753e-32]\n\nINTERPOLATING\n=============\n     source = u_exact @time = 0\n     target = Interpolation\n         AT = ON_CELLS\n         FE = H1P2{1,2} (ndofs = 3713)\n\nSOLVER\n======\n  system name = Poisson problem  @time = 0\n\n  target (FE) = Problem solution (H1P2{1,2}, ndofs = 14593)\n                \n  subiteration | equations that are solved together\n       [1]     | convection diffusion equation\n\n  residuals = [8.29498448320514e-33]\n\nINTERPOLATING\n=============\n     source = u_exact @time = 0\n     target = Interpolation\n         AT = ON_CELLS\n         FE = H1P2{1,2} (ndofs = 14593)\n\n         |   L2ERROR   |   L2ERROR\n   NDOF  |   SOLUTION  |   INTERPOL\n      23 | 6.14399e-03 | 3.08193e-03\n      73 | 5.06404e-04 | 2.63439e-04\n     257 | 5.68101e-05 | 2.78520e-05\n     961 | 6.48860e-06 | 3.30383e-06\n    3713 | 7.73644e-07 | 4.07237e-07\n   14593 | 9.45091e-08 | 5.07235e-08\n\n         |   H1ERROR   |   H1ERROR\n   NDOF  |   SOLUTION  |   INTERPOL\n      23 | 4.74771e-02 | 3.42620e-02\n      73 | 9.79278e-03 | 7.64421e-03\n     257 | 2.25428e-03 | 1.84899e-03\n     961 | 5.29959e-04 | 4.58288e-04\n    3713 | 1.27610e-04 | 1.14323e-04\n   14593 | 3.12912e-05 | 2.85652e-05\n","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"","category":"page"},{"location":"examples/doc_2d_convectiondiffusion/","page":"2D Convection-Diffusion-Problem","title":"2D Convection-Diffusion-Problem","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_2d_bestapprox_curlpreserve/#D-Curl-Preserving-L2-Bestapproximation","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"","category":"section"},{"location":"examples/doc_2d_bestapprox_curlpreserve/","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"(source code)","category":"page"},{"location":"examples/doc_2d_bestapprox_curlpreserve/","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"This example computes the L2-bestapproximation of some given vector-valued function into the lowest-order Nedelec space. It also preserves the curl of the function in the sense that the curl of the approximation equals the piecewise integral mean of the exact curl. Afterwards the L2 error (also of the curl) is computed and the solution is plotted.","category":"page"},{"location":"examples/doc_2d_bestapprox_curlpreserve/","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"module Example_2DBestapproxCurlpreserve\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n# define some vector field that should be approximated\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]^3+x[2]^2\n    result[2] = -x[1]^2 + x[2] + 1\nend\n# define its curl = -du2/dx1 + du1/dx2\nfunction exact_curl!(result,x::Array{<:Real,1})\n    result[1] = 2 * x[2] + 2 * x[1]\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1, Plotter = nothing)\n\n    # generate a unit square mesh and refine\n    xgrid = simplexgrid([0.0,1.0],[0.0,1.0])\n    xgrid = uniform_refine(xgrid,4)\n\n    # negotiate exact_function! and exact_curl! to the package\n    user_function = DataFunction(exact_function!, [2,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 3)\n    user_function_curl = DataFunction(exact_curl!, [1,2]; name = \"curl(u_exact)\", dependencies = \"X\", quadorder = 1)\n\n    # setup a bestapproximation problem via a predefined prototype\n    Problem = L2BestapproximationProblem(user_function; bestapprox_boundary_regions = [1,2,3,4])\n\n    # add a new unknown (Lagrange multiplier that handles the curl constraint)\n    # here 1 is the number of components (it is scalar-valued) and 2 is the space dimension\n    add_unknown!(Problem; unknown_name = \"Lagrange multiplier for curl\", equation_name = \"curl constraint\")\n    add_operator!(Problem, [1,2], LagrangeMultiplier(Curl2D))\n\n    # add the right-hand side data for the constraint and inspect the defined problem\n    add_rhsdata!(Problem, 2, RhsOperator(Identity, [0], user_function_curl))\n    Base.show(Problem)\n\n    # choose some (inf-sup stable) finite element types\n    FEType = [HCURLN0{2}, H1P0{1}]\n    FES = [FESpace{FEType[1]}(xgrid),FESpace{FEType[2]}(xgrid)]\n\n    # create a solution vector and solve the problem\n    Solution = FEVector{Float64}(\"L2-Bestapproximation\",FES)\n    solve!(Solution, Problem; verbosity = verbosity)\n\n    # calculate L2 error and L2 curl error\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    L2CurlErrorEvaluator = L2ErrorIntegrator(Float64, user_function_curl, Curl2D)\n    println(\"\\nL2error(Id) = $(sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\")\n    println(\"L2error(Curl2D) = $(sqrt(evaluate(L2CurlErrorEvaluator,Solution[1])))\")\n\n    # plot\n    GradientRobustMultiPhysics.plot(Solution, [1,1], [Identity, Curl2D]; Plotter = Plotter, verbosity = verbosity)\nend\n\nend","category":"page"},{"location":"examples/doc_2d_bestapprox_curlpreserve/","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"Main.##254.Example_2DBestapproxCurlpreserve","category":"page"},{"location":"examples/doc_2d_bestapprox_curlpreserve/#Output-of-default-main()-run","page":"2D Curl-Preserving L2-Bestapproximation","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_bestapprox_curlpreserve/","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"Example_2DBestapproxCurlpreserve.main()","category":"page"},{"location":"examples/doc_2d_bestapprox_curlpreserve/","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"\nPDE-DESCRIPTION\n===============\n  system name = L2-Bestapproximation problem\n\n     id   | unknown name / equation name\n    [1]   | L2-bestapproximation / L2-bestapproximation equation \n    [2]   | Lagrange multiplier for curl / curl constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | Reaction (regions = [0])\n    [1,2]   | LagrangeMultiplier(Curl2D) (regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | u_exact * Identity(v_h) (regions = [0])\n     [2]    | curl(u_exact) * Identity(v_h) (regions = [0])\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [1, 2, 3, 4]\n                         \n   BoundaryOperator[2] : \n\n\nSOLVER\n======\n  system name = L2-Bestapproximation problem  @time = 0\n\n  target (FE) = L2-Bestapproximation [1] (HCURLN0{2}, ndofs = 800)\n                L2-Bestapproximation [2] (H1P0{1} (broken), ndofs = 512)\n                \n  subiteration | equations that are solved together\n       [1]     | L2-bestapproximation equation\n               | curl constraint\n\n  residuals = [2.38252415406294e-31, 4.834866655713151e-31]\n\nL2error(Id) = 0.031068414520129824\nL2error(Curl2D) = 0.051031036307982836\n","category":"page"},{"location":"examples/doc_2d_bestapprox_curlpreserve/","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"","category":"page"},{"location":"examples/doc_2d_bestapprox_curlpreserve/","page":"2D Curl-Preserving L2-Bestapproximation","title":"2D Curl-Preserving L2-Bestapproximation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/#D-DG-Hdiv-discretisation-for-Stokes","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"","category":"section"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"(source code)","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"This example computes a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"with exterior force mathbff and some viscosity parameter mu and inhomogeneous Dirichlet boundary data.","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"The problem will be solved by a dicontinuous Galerkin method with Hdiv-conforming ansatz space (e.g. BDM1). The normal components of the velocity are fixed by the boundary data, while the tangential boundary fluxes are handled by the DG discretisation of the Laplacian that involves several discontinuous terms on faces mathcalF, i.e.","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"beginaligned\na_h(u_hv_h) = mu Bigl( int nabla_h u_h  nabla_h v_h dx +  sum_F in mathcalF fraclambdah_F int_F u_h cdot v_h ds - int_F nabla_h u_h n_F cdot v_h ds\n - int_F u_h cdot nabla_h v_h n_F ds Bigr)\nendaligned","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"and similar terms on the right-hand side for the inhomogeneous Dirichlet data. The qunatity lambda is the SIP parameter.","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"module Example_2DStokesHdivDG\n\nusing GradientRobustMultiPhysics\nusing Printf\n\n# functions that define the exact solution and the data\n    function exact_pressure!(result,x::Array{<:Real,1},t::Real)\n        result[1] = cos(t)*(sin(x[1])*cos(x[2]) + (cos(1) -1)*sin(1))\n    end\n    function user_function_velocity!(result,x::Array{<:Real,1},t::Real)\n        result[1] = cos(t)*(sin(pi*x[1]-0.7)*sin(pi*x[2]+0.2))\n        result[2] = cos(t)*(cos(pi*x[1]-0.7)*cos(pi*x[2]+0.2))\n    end\n    function exact_velogradient!(result,x::Array{<:Real,1},t::Real)\n        result[1] = pi*cos(t)*(cos(pi*x[1]-0.7)*sin(pi*x[2]+0.2))\n        result[2] = pi*cos(t)*(sin(pi*x[1]-0.7)*cos(pi*x[2]+0.2))\n        result[3] = -pi*cos(t)*(sin(pi*x[1]-0.7)*cos(pi*x[2]+0.2))\n        result[4] = -pi*cos(t)*(cos(pi*x[1]-0.7)*sin(pi*x[2]+0.2))\n    end\n    function rhs(nu)\n        function closure!(result,x::Array{<:Real,1},t::Real)\n            fill!(result,0)\n            # exact Laplacian\n            result[1] += 2*pi*pi*nu*cos(t)*(sin(pi*x[1]-0.7)*sin(pi*x[2]+0.2))\n            result[2] += 2*pi*pi*nu*cos(t)*(cos(pi*x[1]-0.7)*cos(pi*x[2]+0.2))\n            # exact pressure gradient\n            result[1] += cos(t)*cos(x[1])*cos(x[2])\n            result[2] -= cos(t)*sin(x[1])*sin(x[2])\n        end\n    end\n\n# everything is wrapped in a main function\nfunction main(;viscosity = 1e-3, nlevels = 5, Plotter = nothing, verbosity = 1, T = 1, lambda = 4)\n\n    # FEType (Hdiv-conforming)\n    FETypes = [HDIVBDM1{2}, H1P0{1}]\n\n    # initial grid\n    xgrid = grid_unitsquare(Triangle2D)\n    xBFaces = xgrid[BFaces]\n    xFaceVolumes = xgrid[FaceVolumes]\n    xFaceNormals = xgrid[FaceNormals]\n\n    # load flow data\n    user_function_velocity = DataFunction(user_function_velocity!, [2,2]; dependencies = \"XT\", quadorder = 8)\n    user_function_pressure = DataFunction(exact_pressure!, [1,2]; dependencies = \"XT\", quadorder = 4)\n    user_function_velocity_gradient = DataFunction(exact_velogradient!, [4,2]; dependencies = \"XT\", quadorder = 4)\n    user_function_rhs = DataFunction(rhs(viscosity), [2,2]; dependencies = \"XT\", quadorder = 8)\n\n    # prepare error calculation\n    L2VelocityErrorEvaluator = L2ErrorIntegrator(Float64, user_function_velocity, Identity; time = T)\n    L2PressureErrorEvaluator = L2ErrorIntegrator(Float64, user_function_pressure, Identity; time = T)\n    H1VelocityErrorEvaluator = L2ErrorIntegrator(Float64, user_function_velocity_gradient, Gradient; time = T)\n    L2VelocityError = []; L2PressureError = []; H1VelocityError = []; NDofs = []\n\n    # load Stokes problem prototype and assign data\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false)\n    add_rhsdata!(Problem, 1, RhsOperator(Identity, [1], user_function_rhs))\n\n    # add boundary data (fixes normal components of along boundary)\n    add_boundarydata!(Problem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = user_function_velocity)\n\n    # define additional operators for DG terms for Laplacian and Dirichlet data\n    # (in order of there appearance in the documentation above)\n    function hdiv_laplace2_kernel(result, input, item)\n        result[1] = input[1]\n        result[2] = input[2]\n        result .*= lambda*viscosity / xFaceVolumes[item]\n        return nothing\n    end\n\n    HdivLaplace2 = AbstractBilinearForm(\"nu/h_F [u] [v]\", IdentityDisc{Jump}, IdentityDisc{Jump}, Action(Float64, ActionKernel(hdiv_laplace2_kernel, [2,2]; dependencies = \"I\", quadorder = 0)); AT = ON_FACES)\n    function hdiv_laplace3_kernel(result, input, item)\n        result[1] = input[1] * xFaceNormals[1,item]\n        result[2] = input[1] * xFaceNormals[2,item]\n        result[3] = input[2] * xFaceNormals[1,item]\n        result[4] = input[2] * xFaceNormals[2,item]\n        result .*= -viscosity\n        return nothing\n    end\n\n    HdivLaplace3 = AbstractBilinearForm(\"-nu [u] {grad(v)*n}\", IdentityDisc{Jump}, GradientDisc{Average}, Action(Float64, ActionKernel(hdiv_laplace3_kernel, [4,2]; dependencies = \"I\", quadorder = 0)); AT = ON_FACES)\n    function hdiv_laplace4_kernel(result, input, item)\n        result[1] = input[1] * xFaceNormals[1,item] + input[2] * xFaceNormals[2,item]\n        result[2] = input[3] * xFaceNormals[1,item] + input[4] * xFaceNormals[2,item]\n        result .*= -viscosity\n        return nothing\n    end\n    HdivLaplace4 = AbstractBilinearForm(\"-nu {grad(u)*n} [v] \", GradientDisc{Average}, IdentityDisc{Jump}, Action(Float64, ActionKernel(hdiv_laplace4_kernel, [2,4]; dependencies = \"I\", quadorder = 0)); AT = ON_FACES)\n\n\n    # additional terms for tangential part at boundary\n    # note: we use average operators here to force evaluation of all basis functions and not only of the face basis functions\n    # (which in case of Hdiv would be only the ones with nonzero normal fluxes)\n    veloeval = zeros(Float64,2)\n    function hdiv_boundary_kernel(result, input, x, t, item)\n        eval!(veloeval, user_function_velocity, x, t)\n        result[1] = input[1] * veloeval[1] + input[2] * veloeval[2]\n        result[1] *= lambda*viscosity / xFaceVolumes[xBFaces[item]]\n        return nothing\n    end\n    HdivBoundary1 = RhsOperator(\"- nu lambda/h_F u_D v \",ON_BFACES, IdentityDisc{Average}, Action(Float64, ActionKernel(hdiv_boundary_kernel, [1,2]; dependencies = \"XTI\", quadorder = user_function_velocity.quadorder)))\n\n    function hdiv_boundary_kernel2(result, input, x, t, item)\n        eval!(veloeval, user_function_velocity, x, t)\n        result[1] = (input[1] * xFaceNormals[1,xBFaces[item]] + input[2] * xFaceNormals[2,xBFaces[item]]) * veloeval[1]\n        result[1] += (input[3] * xFaceNormals[1,xBFaces[item]] + input[4] * xFaceNormals[2,xBFaces[item]]) * veloeval[2]\n        result[1] *= -viscosity\n        return nothing\n    end\n    HdivBoundary2 = RhsOperator(\"- nu u_D grad(v)*n \",ON_BFACES, GradientDisc{Average}, Action(Float64, ActionKernel(hdiv_boundary_kernel2, [1,4]; dependencies = \"XTI\", quadorder = user_function_velocity.quadorder)))\n\n    # assign DG operators to problem descriptions\n    add_operator!(Problem, [1,1], HdivLaplace2)\n    add_operator!(Problem, [1,1], HdivLaplace3)\n    add_operator!(Problem, [1,1], HdivLaplace4)\n    add_rhsdata!(Problem, 1, HdivBoundary1)\n    add_rhsdata!(Problem, 1, HdivBoundary2)\n\n    # show final problem description\n    Base.show(Problem)\n\n    # loop over levels\n    for level = 1 : nlevels\n\n        # refine grid and update grid component references\n        xgrid = uniform_refine(xgrid)\n        xBFaces = xgrid[BFaces]\n        xFaceVolumes = xgrid[FaceVolumes]\n        xFaceNormals = xgrid[FaceNormals]\n\n        # generate FESpaces\n        FESpaceVelocity = FESpace{FETypes[1]}(xgrid)\n        FESpacePressure = FESpace{FETypes[2]}(xgrid)\n\n        # generate solution vector\n        Solution = FEVector{Float64}(\"velocity\",FESpaceVelocity)\n        append!(Solution,\"pressure\",FESpacePressure)\n        push!(NDofs, length(Solution.entries))\n\n        # solve\n        solve!(Solution, Problem; verbosity = verbosity, time = T)\n\n        # plot\n        GradientRobustMultiPhysics.plot(Solution, [1, 1, 2], [IdentityComponent{1}, IdentityComponent{2}, Identity, ]; Plotter = Plotter, verbosity = verbosity, subplots_per_column = 3)\n\n        # compute L2 and H1 error of all solutions\n        push!(L2VelocityError, sqrt(evaluate(L2VelocityErrorEvaluator,Solution[1])))\n        push!(L2PressureError, sqrt(evaluate(L2PressureErrorEvaluator,Solution[2])))\n        push!(H1VelocityError, sqrt(evaluate(H1VelocityErrorEvaluator,Solution[1])))\n    end\n\n    # output errors in a nice table\n    println(\"\\n   NDOF  | L2ERROR(v) | H1ERROR(v) | L2ERROR(p)\")\n    for j=1:nlevels\n        @printf(\"  %6d |\",NDofs[j]);\n        @printf(\" %.5e |\",L2VelocityError[j])\n        @printf(\" %.5e |\",H1VelocityError[j])\n        @printf(\" %.5e\\n\",L2PressureError[j])\n    end\n\nend\n\nend","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"","category":"page"},{"location":"examples_advanced/doc_2d_stokes_hdiv-dg/","page":"2D DG-Hdiv discretisation for Stokes","title":"2D DG-Hdiv discretisation for Stokes","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/#Commuting-Interpolators-(3D)","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"","category":"section"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"(source code)","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"This example verifies a structural property of the Hcurl and Hdiv finite element spaces and their interpolators which is","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"mathrmCurl(I_mathrmN_k-1psi) = I_mathrmRT_k-1(mathrmCurl(psi))","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"for the standard Nedelec interpolator I_mathrmN_k-1 and the standard Raviart-Thomas interpolator I_mathrmRT_k-1 for k  0. In this example we verify this identity for k=1 (higher order spaces are tested as well as soon as they are available).","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"module Example_3DCommutingInterpolators\nusing GradientRobustMultiPhysics\n\n# define some function\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[2]^2 + x[3]\n    result[2] = x[1]^3\n    result[3] = 1 + x[3]^2\nend\n# and its Curl3D\nfunction exact_curl!(result,x::Array{<:Real,1})\n    result[1] = 0\n    result[2] = 1\n    result[3] = 3*x[1]^2 - 2*x[2]\nend\n\n# everything is wrapped in a main function\nfunction main(;order::Int = 1, testmode = false)\n\n    # choose some grid\n    xgrid = uniform_refine(reference_domain(Tetrahedron3D),2)\n\n    # negotiate exact_function! and exact_curl! to the package\n    user_function = DataFunction(exact_function!, [3,3]; name = \"u_exact\", dependencies = \"X\", quadorder = 3)\n    user_function_curl = DataFunction(exact_curl!, [3,3]; name = \"Curl(u_exact)\", dependencies = \"X\", quadorder = 2)\n\n    # choose commuting interpolators pair\n    if order == 1\n        FE = [HCURLN0{3},HDIVRT0{3}]; testFE = H1P0{3}\n    end\n\n    # do the Hcurl interpolation of the function\n    FESH1 = FESpace{FE[1]}(xgrid)\n    HcurlInterpolation = FEVector{Float64}(\"Hcurl-Interpolation\",FESH1)\n    interpolate!(HcurlInterpolation[1], user_function)\n\n    # do the Hdiv interpolation of the Curl of the function\n    # since integrals over faces have to be computed exactly we need to tune the quadrature order\n    FESHdiv = FESpace{FE[2]}(xgrid)\n    HdivCurlInterpolation = FEVector{Float64}(\"Hdiv-Interpolation\",FESHdiv)\n    interpolate!(HdivCurlInterpolation[1], user_function_curl)\n\n    # Checking the identity:\n    # Both sides of the identity are finite element function of FEtype testFE\n    # Hence, we evaluate the error by testing the identity by all basisfunctions of this type\n\n    # first: generate the test space and some matching FEVector\n    FEStest = FESpace{testFE}(xgrid; broken = true)\n    error = FEVector{Float64}(\"ErrorVector\",FEStest)\n\n    # Define bilinear forms that represents testing each side of the identity with the testspace functions\n    BLF1 = BilinearForm(Float64, ON_CELLS, [FEStest, FESHdiv], [Identity, Identity], DoNotChangeAction(3))\n    BLF2 = BilinearForm(Float64, ON_CELLS, [FEStest, FESH1], [Identity, Curl3D], DoNotChangeAction(3))\n\n    # evaluate the bilinear forms in the respective interpolations and subtract them from each other\n    # note that in these calls always the second argument of the bilinearform is fixed by the given FEVectorBlock\n    assemble!(error[1], HdivCurlInterpolation[1], BLF1)\n    assemble!(error[1], HcurlInterpolation[1], BLF2; factor = -1)\n\n    # do some norm that recognizes a nonzero in the vector\n    error = sqrt(sum(error[1][:].^2, dims = 1)[1])\n    if testmode == true\n        return error\n    else\n        println(\"error(Curl(I_$(FE[1])(psi) - I_$(FE[2])(Curl(psi))) = $error\")\n    end\nend\n\n# test function that is called by test unit\nfunction test()\n    error = []\n    for order in [1]\n        push!(error, max(main(order = order, testmode = true)))\n    end\n    return maximum(error)\nend\n\nend","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"Main.##315.Example_3DCommutingInterpolators","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/#Output-of-default-main()-run","page":"Commuting Interpolators (3D)","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"Example_3DCommutingInterpolators.main()","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"error(Curl(I_HCURLN0{3}(psi) - I_HDIVRT0{3}(Curl(psi))) = 3.821945511051251e-17\n","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"","category":"page"},{"location":"examples/doc_3d_commutinginterpolators/","page":"Commuting Interpolators (3D)","title":"Commuting Interpolators (3D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"fems/#Implemented-Finite-Elements","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"This page describes the finite element type-tree and lists all implemented finite elements.","category":"page"},{"location":"fems/#The-Finite-Element-Type-Tree","page":"Implemented Finite Elements","title":"The Finite Element Type-Tree","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Finite elements are abstract type leaves in a type-tree. The complete tree looks like this:","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"AbstractFiniteElement\n├─ AbstractH1FiniteElement\n│  ├─ AbstractH1FiniteElementWithCoefficients\n│  │  └─ H1BR\n│  ├─ H1CR\n│  ├─ H1MINI\n│  ├─ H1P0\n│  ├─ H1P1\n│  ├─ H1P2\n│  └─ H1P2B\n├─ AbstractHcurlFiniteElement\n│  └─ HCURLN0\n└─ AbstractHdivFiniteElement\n   ├─ HDIVBDM1\n   ├─ HDIVRT0\n   └─ HDIVRT1","category":"page"},{"location":"fems/#Remarks","page":"Implemented Finite Elements","title":"Remarks","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"each type depends on one or two parameters, the first one is always the number of components (ncomponents) that determines of the finite element is scalar- or veector-valued; some elements additionaly require the parameter edim <: Int if they are structurally different in different space dimensions\neach finite elements mainly comes with a set of basis functions in reference coordinates for each applicable AbstractElementGeometry and degrees of freedom maps for the different Assembly Types (coded as a string)\nbroken finite elements are possible via the broken switch in the FESpace constructor\nthe type steers how the basis functions are transformed from local to global coordinates and how FunctionOperators are evaluated by FEBasisEvaluator.jl\ndepending on additional continuity properties of the element types more basis function sets are defined:\nAbstractH1FiniteElements additionally have evaluations of nonzero basisfunctions on faces/bfaces\nAbstractHdivFiniteElements additionally have evaluations of nonzero normalfluxes of basisfunctions on faces/bfaces\nAbstractHcurlFiniteElements additionally have evaluations of nonzero tangentfluxes of basisfunctions on edges/bedges\neach finite element has its own implemented standard interpolation interpolate! (see Finite Element Interpolations) that can be applied to Data Functions, below it is shortly described what this means for each finite element","category":"page"},{"location":"fems/#List-of-implemented-Finite-Elements","page":"Implemented Finite Elements","title":"List of implemented Finite Elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The following table lists all curently implemented finite elements. Click on them to find out more details.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1 finite elements Hdiv finite elements Hcurl finite elements\nH1P0 HDIVRT0 HCURLN0\nH1P1 HDIVBDM1 \nH1MINI HDIVRT1 \nH1CR  \nH1BR  \nH1P2  \nH1P2B  ","category":"page"},{"location":"fems/#H1-conforming-finite-elements","page":"Implemented Finite Elements","title":"H1-conforming finite elements","text":"","category":"section"},{"location":"fems/#P1-finite-element","page":"Implemented Finite Elements","title":"P1 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Piecewise constant finite element that has one degree of freedom on each cell of the grid.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space preserves the cell integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P0","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P0","text":"abstract type H1P0{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nPiecewise constant polynomials on cells.\n\nallowed on every ElementGeometry\n\n\n\n\n\n","category":"type"},{"location":"fems/#P1-finite-element-2","page":"Implemented Finite Elements","title":"P1 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The lowest-order current finite element that has a degree of freedom on each vertex of the grid. On simplices the basis functions coincide with the linear barycentric coordinates, on parallelepiped bi-linear functions are used (also known as Q1 element).","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P1","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P1","text":"abstract type H1P1{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nContinuous piecewise first-order polynomials.\n\nallowed ElementGeometries:\n\nEdge1D (linear polynomials)\nTriangle2D (linear polynomials)\nQuadrilateral2D (Q1 space)\nTetrahedron3D (linear polynomials)\nHexahedron3D (Q1 space)\n\n\n\n\n\n","category":"type"},{"location":"fems/#MINI-finite-element","page":"Implemented Finite Elements","title":"MINI finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The mini finite element adds cell bubles to the P1 element that are e.g. beneficial to define inf-sup stable finite element pairs for the Stokes problem.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its cell integral.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1MINI","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1MINI","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1MINI","text":"abstract type H1MINI{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nMini finite element.\n\nallowed element geometries:\n\nTriangle2D (linear polynomials + cubic cell bubble)\nQuadrilateral2D (Q1 space + quartic cell bubble)\nTetrahedron3D (linear polynomials + cubic cell bubble)\n\n\n\n\n\n","category":"type"},{"location":"fems/#Bernardi-Raugel-(BR)-finite-element","page":"Implemented Finite Elements","title":"Bernardi-Raugel (BR) finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The Bernardi-Raugel adds normal-weighted face bubbles to the P1 finite element and therefore is only available as a vector-valued element.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves face integrals of its normal flux.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1BR","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1BR","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1BR","text":"abstract type H1BR{edim} <: AbstractH1FiniteElementWithCoefficients where {edim<:Int}\n\nvector-valued (ncomponents = edim) Bernardi–Raugel element (first-order polynomials + normal-weighted face bubbles)\n\nallowed ElementGeometries:\n\nTriangle2D (piecewise linear + normal-weighted face bubbles)\nQuadrilateral2D (Q1 space + normal-weighted face bubbles)\nTetrahedron3D (piecewise linear + normal-weighted face bubbles)\n\n\n\n\n\n","category":"type"},{"location":"fems/#P2-finite-element","page":"Implemented Finite Elements","title":"P2 finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The P2 finite element method on simplices equals quadratic polynomials. On the Triangle2D shape the degrees of freedom are associated with the three vertices and the three faces of the triangle. On the Tetrahedron3D shape the degrees of freedom are associated with the four verties and the six edges. On Parallelogram2D cubic Q2 element functions are used.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its face/edge integrals in 2D/3D.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P2","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P2","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P2","text":"abstract type H1P2{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nContinuous piecewise second-order polynomials.\n\nallowed ElementGeometries:\n\nEdge1D (quadratic polynomials)\nTriangle2D (quadratic polynomials)\nQuadrilateral2D (Q2 space)\nTetrahedron3D (quadratic polynomials)\n\n\n\n\n\n","category":"type"},{"location":"fems/#P2B-finite-element","page":"Implemented Finite Elements","title":"P2B finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The P2B finite element adds additional cell bubles (in 2D and 3D) and face bubbles (only in 3D) that are e.g. used to define inf-sup stable finite element pairs for the Stokes problem.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space performs point evaluations at the nodes and preserves its cell and face integrals in 2D and also edge integrals in 3D.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1P2B","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1P2B","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1P2B","text":"abstract type H1P2B{ncomponents,edim} <: AbstractH1FiniteElement where {ncomponents<:Int,edim<:Int}\n\nContinuous piecewise second-order polynomials.\n\nallowed ElementGeometries:\n\nTriangle2D (quadratic polynomials + cell bubble)\n\n\n\n\n\n","category":"type"},{"location":"fems/#Crouzeix-Raviart-(CR)-finite-element","page":"Implemented Finite Elements","title":"Crouzeix-Raviart (CR) finite element","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The Crouzeix-Raviart element associates one lowest-order function with each face. On the Triangle2D shape, the basis function of a face is one minus two times the nodal basis function of the opposite node. ","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"The interpolation of a given function into this space preserves its face integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"H1CR","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.H1CR","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.H1CR","text":"abstract type H1CR{ncomponents} <: AbstractH1FiniteElement where {ncomponents<:Int}\n\nCrouzeix-Raviart element (only continuous at face centers).\n\nallowed ElementGeometries:\n\nTriangle2D (piecewise linear, similar to P1)\nQuadrilateral2D (similar to Q1 space)\nTetrahedron3D (piecewise linear, similar to P1)\n\n\n\n\n\n","category":"type"},{"location":"fems/#Hdiv-conforming-finite-elements","page":"Implemented Finite Elements","title":"Hdiv-conforming finite elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"These Raviart-Thomas and Brezzi-Douglas-Marini finite elements of lower order and their standard interpolations are available:","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"HDIVRT0\nHDIVBDM1\nHDIVRT1","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.HDIVRT0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVRT0","text":"abstract type HDIVRT0{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) lowest-order Raviart-Thomas space.\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\nHexahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#GradientRobustMultiPhysics.HDIVBDM1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVBDM1","text":"abstract type HDIVBDM1{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) lowest-order Brezzi-Douglas-Marini space\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"fems/#GradientRobustMultiPhysics.HDIVRT1","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HDIVRT1","text":"abstract type HDIVRT1{edim} <: AbstractHdivFiniteElement where {edim<:Int}\n\nHdiv-conforming vector-valued (ncomponents = edim) Raviart-Thomas space of order 1.\n\nallowed ElementGeometries:\n\nTriangle2D\n\n\n\n\n\n","category":"type"},{"location":"fems/#Hcurl-conforming-finite-elements","page":"Implemented Finite Elements","title":"Hcurl-conforming finite elements","text":"","category":"section"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"So far only the lowest order Nedelec element is available in 2D and 3D. On Triangle2D it has one degree of freedom for each face (i.e. the rotated RT0 element), on Tetrahedron3D it has one degree of freedom associated to each of the six edges.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"Its standard interpolation of a given functions preserves its tangential face/edge integrals.","category":"page"},{"location":"fems/","page":"Implemented Finite Elements","title":"Implemented Finite Elements","text":"HCURLN0","category":"page"},{"location":"fems/#GradientRobustMultiPhysics.HCURLN0","page":"Implemented Finite Elements","title":"GradientRobustMultiPhysics.HCURLN0","text":"abstract type HCURLN0{edim} <: AbstractHcurlFiniteElement where {edim<:Int}\n\nHcurl-conforming vector-valued (ncomponents = edim) lowest-order Nedelec space.\n\nallowed ElementGeometries:\n\nTriangle2D\nQuadrilateral2D\nTetrahedron3D\n\n\n\n\n\n","category":"type"},{"location":"pdesolvers/#PDE-Solvers","page":"PDE Solvers","title":"PDE Solvers","text":"","category":"section"},{"location":"pdesolvers/#Fixed-Time-Solvers","page":"PDE Solvers","title":"Fixed-Time Solvers","text":"","category":"section"},{"location":"pdesolvers/","page":"PDE Solvers","title":"PDE Solvers","text":"If solve! is applied to a PDEDescription and a FEVector (that specifies the ansatz spaces for the unknowns) an investigation of the PDEDescription is performed that decides if the problem is nonlinear (and has to be solved by a fixed-point algorithm) or if it can be solved directly in one step. Additionally the user can manually trigger subiterations that splits the fixed-point algorithm into substeps where only subsets of the PDE equations are solved together.","category":"page"},{"location":"pdesolvers/","page":"PDE Solvers","title":"PDE Solvers","text":"solve!","category":"page"},{"location":"pdesolvers/#GradientRobustMultiPhysics.solve!","page":"PDE Solvers","title":"GradientRobustMultiPhysics.solve!","text":"function solve!(\n    Target::FEVector,\n    PDE::PDEDescription;\n    subiterations = \"auto\",\n    dirichlet_penalty::Real = 1e60,\n    time::Real = 0,\n    maxResidual::Real = 1e-12,\n    maxIterations::Int = 10,\n    linsolver = DirectUMFPACK,\n    maxlureuse = [1],\n    anderson_iterations = 0, #  0 = Picard iteration, >0 Anderson iteration (experimental feature)\n    verbosity::Int = 0)\n\nSolves a given PDE (provided as a PDEDescription) and writes the solution into the FEVector Target. The ansatz spaces are taken from the of this vector.\n\nFurther optional arguments:\n\nsubiterations :  specifies subsets of equations that are solved together in the given order; \"auto\" tries to solve the whole system at once\ndirichlet_penalty : Dirichlet data is enforced by penalties on the diagonal of the matrix.\ntime : If time-dependent data is involved, the time can be fixed to some value here.\nlinsolver : specifies the linear solver that is used to solver the linear system of equation in each fixpoint iteration\nmaxlureuse : specifies after how much iterations the lu decomposition should be recomputed (-1 = only once if e.g. the matrix stays the same for each fixpoint iteration)\n\nDepending on the subiterations and detected/configured nonlinearties the whole system is either solved directly in one step or via a fixed-point iteration.\n\n\n\n\n\n","category":"function"},{"location":"pdesolvers/#Time-Dependent-Solvers","page":"PDE Solvers","title":"Time-Dependent Solvers","text":"","category":"section"},{"location":"pdesolvers/","page":"PDE Solvers","title":"PDE Solvers","text":"The structure TimeControlSolver can be used to setup a time-dependent solver that can be configured in a similar manner as the time-independent ones (subiterations, nonlinear iterations, linear solvers). As a TimeIntegrationRule so far only BackwardEuler is implemented. ","category":"page"},{"location":"pdesolvers/","page":"PDE Solvers","title":"PDE Solvers","text":"Note that, the time-derivative is added by the TimeControlSolver and is in general not part of the PDEDescription (this is debatable and might change in the future).","category":"page"},{"location":"pdesolvers/","page":"PDE Solvers","title":"PDE Solvers","text":"TimeControlSolver\nadvance!","category":"page"},{"location":"pdesolvers/#GradientRobustMultiPhysics.TimeControlSolver","page":"PDE Solvers","title":"GradientRobustMultiPhysics.TimeControlSolver","text":"function TimeControlSolver(\n    PDE::PDEDescription,\n    Solution::FEVector,    # contains initial values and stores solution of advance method below\n    TIR::Type{<:AbstractTimeIntegrationRule} = BackwardEuler;\n    timedependent_equations = [],\n    subiterations = \"auto\",\n    start_time::Real = 0,\n    verbosity::Int = 0,\n    dt_testfunction_operator = [],\n    dt_action = [],\n    nonlinear_dt::Bool = false,\n    dirichlet_penalty = 1e60)\n\nCreates a time-dependent solver that can be advanced in time with advance!. The FEVector Solution stores the initial state but also the solutions of each timestep that are computed via any of the advance! methods. The argument TIR carries the time integration rule (currently there is only BackwardEuler).\n\nFurther optional arguments (that are not listed in the description of solve!):\n\ntimedependent_equations : contains the equation numbers (=rows in PDEDescription) that are time-dependent and should get a time derivative (currently only time derivatives of order 1)\nstart_time : initial time\ndttestfunction_operator : operator applied to testfunctions in time derivative\ndt_action : additional actions that are applied to the ansatz function in the time derivative (to include parameters etc.)\n\n\n\n\n\n","category":"type"},{"location":"pdesolvers/#GradientRobustMultiPhysics.advance!","page":"PDE Solvers","title":"GradientRobustMultiPhysics.advance!","text":"function TimeControlSolver(\n    advance!(TCS::TimeControlSolver, timestep::Real = 1e-1)\n\nAdvances a TimeControlSolver one step in time with the given timestep.\n\n\n\n\n\n","category":"function"},{"location":"pdesolvers/","page":"PDE Solvers","title":"PDE Solvers","text":"Moreover there are two functions that advance the TimeControlSolver automatically until a given final time (advance_until_time!) is reached or until stationarity is reached (advance_until_stationarity!). At the moment only uniform timestepping is used, but adaptive time stepping might be implemented at some point.","category":"page"},{"location":"pdesolvers/","page":"PDE Solvers","title":"PDE Solvers","text":"advance_until_time!\nadvance_until_stationarity!","category":"page"},{"location":"pdesolvers/#GradientRobustMultiPhysics.advance_until_time!","page":"PDE Solvers","title":"GradientRobustMultiPhysics.advance_until_time!","text":"advance_until_time!(TCS::TimeControlSolver, timestep, finaltime; finaltime_tolerance = 1e-15, do_after_each_timestep = nothing)\n\nAdvances a TimeControlSolver in time with the given (initial) timestep until the specified finaltime is reached (up to the specified tolerance). The function doaftertimestep is called after each timestep and can be used to print/save data (and maybe timestep control in future).\n\n\n\n\n\n","category":"function"},{"location":"pdesolvers/#GradientRobustMultiPhysics.advance_until_stationarity!","page":"PDE Solvers","title":"GradientRobustMultiPhysics.advance_until_stationarity!","text":"advance_until_stationarity!(TCS::TimeControlSolver, timestep; stationarity_threshold = 1e-11, maxTimeSteps = 100, do_after_each_timestep = nothing)\n\nAdvances a TimeControlSolver in time with the given (initial) timestep until stationarity is detected (change of variables below threshold) or a maximal number of time steps is exceeded. The function doaftertimestep is called after each timestep and can be used to print/save data (and maybe timestep control in future).\n\n\n\n\n\n","category":"function"},{"location":"examples/doc_2d_fe_on_faces/#D-Finite-Elements-on-Faces","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"","category":"section"},{"location":"examples/doc_2d_fe_on_faces/","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"(source code)","category":"page"},{"location":"examples/doc_2d_fe_on_faces/","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"This code demonstrates the novel feature of finite element spaces on faces by providing AT = ON_FACES in the finite element space constructor. It is used here to solve a bestapproximation into an Hdiv-conforming space by using a broken Hdiv space and setting the normal jumps on interior faces to zero by using a Lagrange multiplier on the faces of the grid (a broken H1-conforming space). Then the solution is compared to the solution of the same problem using the continuous Hdiv-conforming space.","category":"page"},{"location":"examples/doc_2d_fe_on_faces/","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"module Example_2DFaceElements\n\nusing GradientRobustMultiPhysics\n\n# problem data\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]^3+x[2]\n    result[2] = x[2] + 1\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 1)\n\n    # choose initial mesh\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D),3)\n\n    # define bestapproximation problem\n    user_function = DataFunction(exact_function!, [2,2]; name = \"u_exact\", dependencies = \"X\", quadorder = 3)\n    Problem = L2BestapproximationProblem(user_function; bestapprox_boundary_regions = [])\n\n    # we want to use a broken space and give the constraint of no normal jumps on interior faces\n    # in form of a Lagrange multiplier, since there is no NormalFluxDisc{Jump} operator yet,\n    # we have to use the full identity and multiply the normal vector in an action\n    add_unknown!(Problem; unknown_name = \"Lagrange multiplier for face jumps\", equation_name = \"face jump constraint\")\n    add_operator!(Problem, [1,2], LagrangeMultiplier(NormalFluxDisc{Jump}; AT = ON_IFACES))\n    # the diagonal operator sets the Lagrange multiplier on all face boundary regions to zero\n    add_operator!(Problem, [2,2], DiagonalOperator(\"Diag(1)\", 1.0, true, [1,2,3,4]))\n\n    # choose some (inf-sup stable) finite element types\n    # first space is the Hdiv element\n    # second will be used for the Lagrange multiplier space on faces\n    FEType = [HDIVRT1{2}, H1P1{1}]\n    FES = [FESpace{FEType[1]}(xgrid; broken = true),FESpace{FEType[2], ON_FACES}(xgrid; broken = true)]\n\n    # solve\n    Solution = FEVector{Float64}(\"Hdiv-broken solution\",FES)\n    solve!(Solution, Problem; verbosity = verbosity)\n\n    # plot\n    GradientRobustMultiPhysics.plot(Solution, [1], [Identity]; Plotter = Plotter, verbosity = verbosity)\n\n    # solve again with Hdiv-continuous element\n    # to see that we get the same result\n    Problem = L2BestapproximationProblem(user_function; bestapprox_boundary_regions = [])\n    FES = FESpace{FEType[1]}(xgrid)\n\n    # solve\n    Solution2 = FEVector{Float64}(\"Hdiv-cont. solution\",FES)\n    solve!(Solution2, Problem; verbosity = verbosity)\n\n    # calculate L2 error of both solutions and their difference\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    L2DiffEvaluator = L2DifferenceIntegrator(Float64, 2, Identity)\n    println(\"\\nL2error(Hdiv broken) = $(sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\")\n    println(\"L2error(Hdiv cont.) = $(sqrt(evaluate(L2ErrorEvaluator,Solution2[1])))\")\n    println(\"L2error(difference) = $(sqrt(evaluate(L2DiffEvaluator,[Solution[1], Solution2[1]])))\")\nend\n\nend","category":"page"},{"location":"examples/doc_2d_fe_on_faces/","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"Main.##266.Example_2DFaceElements","category":"page"},{"location":"examples/doc_2d_fe_on_faces/#Output-of-default-main()-run","page":"2D Finite Elements on Faces","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_fe_on_faces/","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"Example_2DFaceElements.main()","category":"page"},{"location":"examples/doc_2d_fe_on_faces/","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"\nSOLVER\n======\n  system name = L2-Bestapproximation problem  @time = 0\n\n  target (FE) = Hdiv-broken solution [1] (HDIVRT1{2} (broken), ndofs = 2048)\n                Hdiv-broken solution [2] (H1P1{1} (broken), ndofs = 800)\n                \n  subiteration | equations that are solved together\n       [1]     | L2-bestapproximation equation\n               | face jump constraint\n\n  residuals = [1.3887224739174436e-32, 9.390844586543441e-34]\n\nSOLVER\n======\n  system name = L2-Bestapproximation problem  @time = 0\n\n  target (FE) = Hdiv-cont. solution (HDIVRT1{2}, ndofs = 1312)\n                \n  subiteration | equations that are solved together\n       [1]     | L2-bestapproximation equation\n\n  residuals = [1.2342796004576628e-32]\n\nL2error(Hdiv broken) = 0.0004715248381994809\nL2error(Hdiv cont.) = 0.00047152483819947713\nL2error(difference) = 5.616912853180266e-16\n","category":"page"},{"location":"examples/doc_2d_fe_on_faces/","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"","category":"page"},{"location":"examples/doc_2d_fe_on_faces/","page":"2D Finite Elements on Faces","title":"2D Finite Elements on Faces","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/#D-Lid-driven-cavity-(Anderson-Iteration)","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"","category":"section"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"(source code)","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"This example solves the lid-driven cavity problem where one seeks a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"beginaligned\n- mu Delta mathbfu + (mathbfu cdot nabla) mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"where mathbfu = (10) along the top boundary of a square domain.","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"For small viscosities (where a Newton and a classical Picard iteration do not converge anymore), Anderson acceleration might help (see https://arxiv.org/pdf/1810.08494.pdf) which can be tested with this script.","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"module Example_2DLidDrivenCavityAnderson\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n# data\nfunction boundary_data_top!(result)\n    result[1] = 1;\n    result[2] = 0;\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 2, Plotter = nothing, viscosity = 5e-4, anderson_iterations = 10)\n\n    # grid\n    xgrid = uniform_refine(grid_unitsquare(Triangle2D), 4);\n\n    # problem parameters\n    maxIterations = 50  # termination criterion 1 for nonlinear mode\n    maxResidual = 1e-10 # termination criterion 2 for nonlinear mode\n    broken_p = false\n\n    # choose one of these (inf-sup stable) finite element type pairs\n    #FETypes = [H1P2{2,2}, H1P1{1}] # Taylor--Hood\n    #FETypes = [H1P2B{2,2}, H1P1{1}]; broken_p = true # P2-bubble\n    #FETypes = [H1CR{2}, H1P0{1}] # Crouzeix--Raviart\n    #FETypes = [H1MINI{2,2}, H1P1{1}] # MINI element on triangles only\n    FETypes = [H1BR{2}, H1P0{1}]; broken_p = true # Bernardi--Raugel\n\n    #####################################################################################\n    #####################################################################################\n\n    # negotiate data functions to the package\n    user_function_bnd = DataFunction(boundary_data_top!, [2,2]; name = \"u_bnd\", dependencies = \"\", quadorder = 0)\n\n    # load Navier-Stokes problem prototype and assign data\n    StokesProblem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = true, auto_newton = false)\n    add_boundarydata!(StokesProblem, 1, [1,2,4], HomogeneousDirichletBoundary)\n    add_boundarydata!(StokesProblem, 1, [3], BestapproxDirichletBoundary; data = user_function_bnd)\n\n    # generate FESpaces\n    FESpaceVelocity = FESpace{FETypes[1]}(xgrid)\n    FESpacePressure = FESpace{FETypes[2]}(xgrid; broken = broken_p)\n    Solution = FEVector{Float64}(\"Stokes velocity\",FESpaceVelocity)\n    append!(Solution,\"Stokes pressure\",FESpacePressure)\n\n    # set nonlinear options and Newton terms\n    StokesProblem.LHSOperators[1,1][1].store_operator = true\n    Base.show(StokesProblem)\n\n    # solve Stokes problem\n    solve!(Solution, StokesProblem; verbosity = verbosity, anderson_iterations = anderson_iterations, maxIterations = maxIterations, maxResidual = maxResidual)\n\n    # plot\n    GradientRobustMultiPhysics.plot(Solution, [1,2], [Identity, Identity]; Plotter = Plotter, verbosity = verbosity)\n\nend\n\nend","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"Main.##268.Example_2DLidDrivenCavityAnderson","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/#Output-of-default-main()-run","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"Example_2DLidDrivenCavityAnderson.main()","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"\nPDE-DESCRIPTION\n===============\n  system name = incompressible Navier-Stokes-Problem\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n\n  LHS block | PDEOperator(s)\n    [1,1]   | Laplacian (regions = [0])\n            | (a(=unknown 1) * Gradient) u * v (regions = [0])\n    [1,2]   | LagrangeMultiplier(Divergence) (regions = [0])\n    [2,1]   | none\n    [2,2]   | none\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [3]\n                         HomogeneousDirichletBoundary -> [1, 2, 4]\n                          \n   BoundaryOperator[2] : \n\n  GlobalConstraints[1] : Mean[2] != 0 \n\nSOLVER\n======\n  system name = incompressible Navier-Stokes-Problem  @time = 0\n\n  target (FE) = Stokes velocity (H1BR{2}, ndofs = 2658)\n                Stokes pressure (H1P0{1} (broken), ndofs = 1024)\n                \n  subiteration | equations that are solved together\n       [1]     | momentum equation\n               | incompressibility constraint\n\n  initial assembly time = 1.70e+00 (s)\n\n  ITERATION |  LSRESIDUAL  |  NLRESIDUAL  | TIME ASSEMBLY/SOLVE/TOTAL (s)\n  -----------------------------------------------------------------------\n        1   | 1.169187e-17 | 2.696401e-02 | 3.78e-01/2.74e-02/4.12e-01\n        2   | 1.618354e-17 | 1.218817e-02 | 7.97e-02/2.84e-02/2.04e-01\n        3   | 1.837416e-17 | 7.722605e-03 | 7.08e-02/2.76e-02/1.03e-01\n        4   | 1.929806e-17 | 7.799207e-03 | 6.92e-02/3.40e-02/1.09e-01\n        5   | 1.824444e-17 | 6.623426e-03 | 6.91e-02/2.77e-02/1.10e-01\n        6   | 1.972154e-17 | 3.381181e-03 | 7.38e-02/2.69e-02/1.09e-01\n        7   | 2.303308e-17 | 5.022463e-03 | 7.39e-02/2.68e-02/1.11e-01\n        8   | 1.831030e-17 | 5.181019e-03 | 6.98e-02/2.67e-02/1.08e-01\n        9   | 2.066970e-17 | 3.522884e-03 | 6.96e-02/3.23e-02/1.15e-01\n       10   | 2.058730e-17 | 2.102938e-03 | 7.43e-02/3.15e-02/1.21e-01\n       11   | 2.162817e-17 | 2.544854e-03 | 7.33e-02/2.67e-02/1.17e-01\n       12   | 1.977048e-17 | 2.788009e-03 | 6.96e-02/2.74e-02/1.18e-01\n       13   | 2.342888e-17 | 1.183645e-03 | 6.95e-02/2.87e-02/1.20e-01\n       14   | 1.890271e-17 | 8.681663e-04 | 6.92e-02/2.68e-02/1.18e-01\n       15   | 2.119927e-17 | 5.043650e-04 | 6.96e-02/2.67e-02/1.18e-01\n       16   | 2.011599e-17 | 8.394340e-04 | 6.96e-02/3.13e-02/1.18e-01\n       17   | 2.154988e-17 | 4.898647e-04 | 6.96e-02/3.22e-02/1.20e-01\n       18   | 2.140117e-17 | 1.513515e-04 | 6.94e-02/3.22e-02/1.20e-01\n       19   | 1.999022e-17 | 1.221754e-04 | 7.00e-02/3.25e-02/1.20e-01\n       20   | 2.141653e-17 | 8.092184e-05 | 6.97e-02/3.35e-02/1.21e-01\n       21   | 2.067475e-17 | 5.367415e-05 | 7.16e-02/3.16e-02/1.20e-01\n       22   | 1.908456e-17 | 1.369259e-05 | 6.98e-02/3.21e-02/1.19e-01\n       23   | 2.146486e-17 | 1.037655e-05 | 6.98e-02/3.19e-02/1.19e-01\n       24   | 1.821376e-17 | 8.423072e-06 | 7.05e-02/3.19e-02/1.20e-01\n       25   | 2.015244e-17 | 3.174013e-06 | 6.95e-02/3.22e-02/1.19e-01\n       26   | 2.127979e-17 | 1.396529e-06 | 6.99e-02/3.11e-02/1.18e-01\n       27   | 2.227600e-17 | 6.530746e-07 | 6.95e-02/3.10e-02/1.18e-01\n       28   | 2.081632e-17 | 4.937983e-07 | 7.01e-02/3.21e-02/1.20e-01\n       29   | 2.244343e-17 | 2.799209e-07 | 7.42e-02/3.30e-02/1.24e-01\n       30   | 2.024166e-17 | 1.484009e-07 | 6.96e-02/3.34e-02/1.21e-01\n       31   | 1.896896e-17 | 9.351292e-08 | 6.95e-02/3.18e-02/1.19e-01\n       32   | 2.051991e-17 | 2.788012e-08 | 6.95e-02/3.16e-02/1.18e-01\n       33   | 1.888380e-17 | 2.593860e-08 | 6.99e-02/3.13e-02/1.19e-01\n       34   | 2.126923e-17 | 2.271365e-08 | 6.92e-02/3.18e-02/1.18e-01\n       35   | 1.993758e-17 | 2.120520e-08 | 6.97e-02/3.40e-02/1.21e-01\n       36   | 1.846178e-17 | 1.686097e-08 | 6.94e-02/3.12e-02/1.18e-01\n       37   | 2.201489e-17 | 6.668510e-09 | 6.98e-02/3.11e-02/1.18e-01\n       38   | 2.090194e-17 | 5.825774e-09 | 6.94e-02/3.18e-02/1.18e-01\n       39   | 2.121897e-17 | 2.758898e-09 | 7.00e-02/3.14e-02/1.19e-01\n       40   | 2.165972e-17 | 1.698212e-09 | 6.91e-02/3.15e-02/1.18e-01\n       41   | 2.357632e-17 | 5.480294e-10 | 6.97e-02/3.22e-02/1.19e-01\n       42   | 1.947894e-17 | 3.012043e-10 | 6.94e-02/3.26e-02/1.20e-01\n       43   | 2.017747e-17 | 2.551295e-10 | 6.94e-02/3.15e-02/1.18e-01\n       44   | 2.002844e-17 | 1.134660e-10 | 6.92e-02/3.14e-02/1.18e-01\n       45   | 1.944378e-17 | 3.106285e-11 | 6.98e-02/3.12e-02/1.18e-01  converged after 45 iterations (maxResidual reached)\n","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"","category":"page"},{"location":"examples/doc_2d_liddrivencavity_anderson/","page":"2D Lid-driven cavity (Anderson-Iteration)","title":"2D Lid-driven cavity (Anderson-Iteration)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_2d_flowtransport/#D-Flow-Transport","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"","category":"section"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"(source code)","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"This example solve the Stokes problem in a Omega-shaped pipe and then uses the velocity in a transport equation for a species with a certain inlet concentration. Altogether, we are looking for a velocity mathbfu, a pressure mathbfp and a species concentration mathbfc such that","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"beginaligned\n- mu Delta mathbfu + nabla p  = 0\nmathrmdiv(u)  = 0\n- kappa Delta mathbfc + mathbfu cdot nabla mathbfc  = 0\nendaligned","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"with some viscosity parameter  and diffusion parameter kappa.","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"The diffusion coefficient for the species is chosen (almost) zero such that the isolines of the concentration should stay parallel from inlet to outlet. For the discretisation of the convection term in the transport equation two three possibilities can be chosen:","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"Classical finite element discretisations mathbfu_h cdot nabla mathbfc_h\nPressure-robust finite element discretisation Pi_textreconst mathbfu_h cdot nabla mathbfc_h with some divergence-free reconstruction operator Pi_textreconst\nUpwind finite volume discretisation for kappa = 0 based on normal fluxes along the faces (also divergence-free in finite volume sense)","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"Observe that a pressure-robust Bernardi–Raugel discretisation preserves this much better than a classical Bernardi–Raugel method. For comparison also a Taylor–Hood method can be switched on which is comparable to the pressure-robust lowest-order method in this example.","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"Note, that the transport equation is very convection-dominated and no stabilisation in the finite element discretisations was used here (but instead a nonzero kappa). The results are very sensitive to kappa and may be different if a stabilisation is used (work in progress). Also note, that only the finite volume discretisation perfectly obeys the maximum principle for the concentration but the isolines do no stay parallel until the outlet is reached, possibly due to articifial diffusion.","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"module Example_2DFlowTransport\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n\n# boundary data\nfunction inlet_velocity!(result,x::Array{<:Real,1})\n    result[1] = 4*x[2]*(1-x[2]);\n    result[2] = 0;\nend\nfunction inlet_concentration!(result,x::Array{<:Real,1})\n    result[1] = 1-x[2];\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1, Plotter = nothing, FVtransport = true, write_vtk = true)\n\n    # load mesh and refine\n    xgrid = simplexgrid(\"assets/2d_grid_upipe.sg\")\n    xgrid = uniform_refine(xgrid,4)\n\n    # problem parameters\n    viscosity = 1 # coefficient for Stokes equation\n\n    # choose one of these (inf-sup stable) finite element type pairs for the flow\n    #FETypes = [H1P2{2,2}, H1P1{1}]; postprocess_operator = Identity # Taylor--Hood\n    #FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = Identity # Bernardi--Raugel\n    FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = ReconstructionIdentity{HDIVRT0{2}} # Bernardi--Raugel pressure-robust (RT0 reconstruction)\n    #FETypes = [H1BR{2}, H1P0{1}]; postprocess_operator = ReconstructionIdentity{HDIVBDM1{2}} # Bernardi--Raugel pressure-robust (BDM1 reconstruction)\n\n    #####################################################################################\n    #####################################################################################\n\n    # negotiate data functions to the package\n    user_function_inlet_velocity = DataFunction(inlet_velocity!, [2,2]; name = \"inflow\", dependencies = \"X\", quadorder = 2)\n    user_function_inlet_species = DataFunction(inlet_concentration!, [1,2]; name = \"inlet concentration\", dependencies = \"X\", quadorder = 1)\n\n    # load Stokes problem prototype\n    # and assign boundary data (inlet profile in bregion 2, zero Dirichlet at walls 1 and nothing at outlet region 2)\n    Problem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false, no_pressure_constraint = true)\n    Problem.name = \"Stokes + Transport\"\n    add_boundarydata!(Problem, 1, [1,3], HomogeneousDirichletBoundary)\n    add_boundarydata!(Problem, 1, [4], BestapproxDirichletBoundary; data = user_function_inlet_velocity)\n\n    # add transport equation of species\n    add_unknown!(Problem; unknown_name = \"concentration\", equation_name = \"transport equation\")\n    if FVtransport == true\n        # finite volume upwind discretisation\n        FETypeTransport = H1P0{1}\n        add_operator!(Problem, [3,3], FVConvectionDiffusionOperator(1))\n    else\n        # finite element convection and diffusion (very small) operators\n        FETypeTransport = H1P1{1}\n        diffusion_FE = 1e-7 # diffusion coefficient for transport equation\n        add_operator!(Problem, [3,3], LaplaceOperator(diffusion_FE,2,1))\n        add_operator!(Problem, [3,3], ConvectionOperator(1, postprocess_operator, 2, 1))\n    end\n    # with boundary data (i.e. inlet concentration)\n    add_boundarydata!(Problem, 3, [4], InterpolateDirichletBoundary; data = user_function_inlet_species)\n    Base.show(Problem)\n\n    # generate FESpaces\n    FESpaceVelocity = FESpace{FETypes[1]}(xgrid)\n    FESpacePressure = FESpace{FETypes[2]}(xgrid)\n    FESpaceConcentration = FESpace{FETypeTransport}(xgrid)\n\n    # solve the decoupled flow problem\n    Solution = FEVector{Float64}(\"velocity\",FESpaceVelocity)\n    append!(Solution,\"pressure\",FESpacePressure)\n    append!(Solution,\"species concentration\",FESpaceConcentration)\n    solve!(Solution, Problem; subiterations = [[1,2]], verbosity = verbosity, maxIterations = 5, maxResidual = 1e-12)\n\n    # solve the transport by finite volumes or finite elements\n    if FVtransport == true\n        # pseudo-timestepping until stationarity detected, the matrix stays the same in each iteration\n        TCS = TimeControlSolver(Problem, Solution, BackwardEuler; subiterations = [[3]], maxlureuse = [-1], timedependent_equations = [3], verbosity = verbosity)\n        advance_until_stationarity!(TCS, 10000; maxTimeSteps = 100, stationarity_threshold = 1e-12)\n    else\n        # solve directly\n        solve!(Solution, Problem; subiterations = [[3]], verbosity = verbosity, maxIterations = 5, maxResidual = 1e-12)\n    end\n\n    # print minimal and maximal concentration\n    # (maximum principle says it should be [0,1])\n    println(\"\\n[min(c),max(c)] = [$(minimum(Solution[3][:])),$(maximum(Solution[3][:]))]\")\n\n    # plot\n    GradientRobustMultiPhysics.plot(Solution, [0,1,2,3], [Identity, Identity, Identity, Identity]; Plotter = Plotter, verbosity = verbosity)\n\n    if write_vtk\n        mkpath(\"data/example_flowtransport/\")\n        writeVTK!(\"data/example_flowtransport/results.vtk\", Solution)\n    end\nend\n\nend","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"Main.##267.Example_2DFlowTransport","category":"page"},{"location":"examples/doc_2d_flowtransport/#Output-of-default-main()-run","page":"2D Flow + Transport","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"Example_2DFlowTransport.main()","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"\nPDE-DESCRIPTION\n===============\n  system name = Stokes + Transport\n\n     id   | unknown name / equation name\n    [1]   | velocity / momentum equation \n    [2]   | pressure / incompressibility constraint \n    [3]   | concentration / transport equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | Laplacian (regions = [0])\n    [1,2]   | LagrangeMultiplier(Divergence) (regions = [0])\n    [1,3]   | none\n    [2,1]   | none\n    [2,2]   | none\n    [2,3]   | none\n    [3,1]   | none\n    [3,2]   | none\n    [3,3]   | FVConvectionDiffusion (regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | none\n     [2]    | none\n     [3]    | none\n\n   BoundaryOperator[1] : BestapproxDirichletBoundary -> [4]\n                         HomogeneousDirichletBoundary -> [1, 3]\n                          \n   BoundaryOperator[2] : \n   BoundaryOperator[3] : InterpolateDirichletBoundary -> [4]\n                         \n\n\nSOLVER\n======\n  system name = Stokes + Transport  @time = 0\n\n  target (FE) = velocity (H1BR{2}, ndofs = 12666)\n                pressure (H1P0{1} (broken), ndofs = 4864)\n                species concentration (H1P0{1} (broken), ndofs = 4864)\n                \n  subiteration | equations that are solved together\n       [1]     | momentum equation\n               | incompressibility constraint\n  converged (maxResidual of 1.0e-12 reached)\n\nPREPARING TIME-DEPENDENT SOLVER\n===============================\n  system name = Stokes + Transport  @starttime = 0\n\n  FEs = H1BR{2} (ndofs = 12666)\n        H1P0{1} (broken) (ndofs = 4864)\n        H1P0{1} (broken) (ndofs = 4864)\n        \n  subiteration | equations that are solved together\n       [1]     | transport equation\n\n\n    STEP  |    TIME    | LSRESIDUAL |   CHANGE                         \n          |            |  (total)   |  velocity    pressure    concentration  \n       1  | 1.0000e+04 | 1.7489e-16 | 0.0000e+00  0.0000e+00  3.9300e+01 \n       2  | 2.0000e+04 | 2.0297e-16 | 0.0000e+00  0.0000e+00  1.1470e-01 \n       3  | 3.0000e+04 | 1.9578e-16 | 0.0000e+00  0.0000e+00  1.4915e-03 \n       4  | 4.0000e+04 | 2.0029e-16 | 0.0000e+00  0.0000e+00  2.9986e-05 \n       5  | 5.0000e+04 | 1.9919e-16 | 0.0000e+00  0.0000e+00  5.9619e-07 \n       6  | 6.0000e+04 | 1.9318e-16 | 0.0000e+00  0.0000e+00  1.1640e-08 \n       7  | 7.0000e+04 | 1.9773e-16 | 0.0000e+00  0.0000e+00  2.2498e-10 \n       8  | 8.0000e+04 | 1.9288e-16 | 0.0000e+00  0.0000e+00  4.3286e-12 \n       9  | 9.0000e+04 | 1.9446e-16 | 0.0000e+00  0.0000e+00  8.3311e-14 \n  stationarity detected after 9 timesteps\n\n[min(c),max(c)] = [0.04166666666666663,0.9791666666666667]\n","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"","category":"page"},{"location":"examples/doc_2d_flowtransport/","page":"2D Flow + Transport","title":"2D Flow + Transport","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_2d_transientstokes/#D-Transient-Stokes-Problem","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"","category":"section"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"(source code)","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"This example computes a velocity mathbfu and pressure mathbfp of the incompressible Navier–Stokes problem","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"beginaligned\nmathbfu_t - mu Delta mathbfu + nabla p  = mathbff\nmathrmdiv(u)  = 0\nendaligned","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"with (possibly time-dependent) exterior force mathbff and some viscosity parameter mu.","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"In this example we solve an analytical toy problem with prescribed solution","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"beginaligned\nmathbfu(mathbfxt)  = (1+t)(cos(x_2) sin(x_1))^T\np(mathbfx) = sin(x_1+x_2) - 2sin(1) + sin(2)\nendaligned","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"with time-dependent right-hand side and inhomogeneous Dirichlet boundary data. The example showcases the benefits of pressure-robustness in time-dependent linear Stokes problem in presence of complicated pressures and small viscosities. The problem is solved on series of finer and finer unstructured simplex meshes and compares the error of the discrete Stokes solution, an interpolation into the same space and the best-approximations into the same space. While a pressure-robust variant shows optimally converging errors close to the best-approximations, a non pressure-robust discretisations show suboptimal (or no) convergence! Compare e.g. Bernardi–Raugel and Bernardi–Raugel pressure-robust by (un)commenting the responsible lines in this example.","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"module Example_2DTransientStokes\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n\n# problem data\nfunction exact_pressure!(result,x::Array{<:Real,1})\n    result[1] = sin(x[1]+x[2]) - 2*sin(1)+sin(2)\nend\nfunction exact_velocity!(result,x::Array{<:Real,1},t::Real)\n    result[1] = (1+t)*cos(x[2]);\n    result[2] = (1+t)*sin(x[1]);\nend\nfunction exact_velocity_gradient!(result,x::Array{<:Real,1},t::Real)\n    result[1] = 0.0\n    result[2] = -(1+t)*sin(x[2]);\n    result[3] = (1+t)*cos(x[1]);\n    result[4] = 0.0;\nend\nfunction exact_rhs!(viscosity)\n    function closure(result,x::Array{<:Real,1},t::Real)\n        result[1] = viscosity*(1+t)*cos(x[2]) + cos(x[1]+x[2]) + cos(x[2])\n        result[2] = viscosity*(1+t)*sin(x[1]) + cos(x[1]+x[2]) + sin(x[1])\n    end\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 2, Plotter = nothing)\n\n    # problem parameters\n    viscosity = 1e-6\n    timestep = 1e-3\n    T = 1e-2 # final time\n    nlevels = 5 # maximal number of refinement levels\n    reconstruct = false # do not change\n    graddiv = 0\n    broken_p = false # is pressure space broken ?\n\n    # initial grid\n    xgrid = grid_unitsquare(Triangle2D);\n\n    # choose one of these (inf-sup stable) finite element type pairs\n    #FETypes = [H1P2{2,2}, H1P1{1}] # Taylor--Hood\n    #FETypes = [H1P2B{2,2}, H1P1{1}]; broken_p = true # P2-bubble\n    #FETypes = [H1CR{2}, H1P0{1}]; broken_p = true # Crouzeix--Raviart\n    #FETypes = [H1CR{2}, H1P0{1}]; broken_p = true; reconstruct = true # Crouzeix-Raviart gradient-robust\n    #FETypes = [H1MINI{2,2}, H1P1{1}] # MINI element on triangles only\n    #FETypes = [H1MINI{2,2}, H1CR{1}] # MINI element on triangles/quads\n    #FETypes = [H1BR{2}, H1P0{1}]; broken_p = true # Bernardi--Raugel\n    FETypes = [H1BR{2}, H1P0{1}]; broken_p = true; reconstruct = true # Bernardi--Raugel gradient-robust\n\n    #####################################################################################\n    #####################################################################################\n\n    # set testfunction operator for certain testfunctions\n    # (pressure-robustness chooses a reconstruction that can exploit the L2-orthogonality onto gradients)\n    # (Scott-Vogelius is divergence-free and is pressure-robust without modifications)\n    if reconstruct\n        testfunction_operator = ReconstructionIdentity{HDIVBDM1{2}}\n    else\n        testfunction_operator = Identity\n    end\n\n    # negotiate data functions to the package\n    # note that dependencies \"XT\" marks the function to be x- and t-dependent\n    # that causes the solver to automatically reassemble associated operators in each time step\n    user_function_velocity = DataFunction(exact_velocity!, [2,2]; name = \"u_exact\", dependencies = \"XT\", quadorder = 5)\n    user_function_pressure = DataFunction(exact_pressure!, [1,2]; name = \"p_exact\", dependencies = \"X\", quadorder = 5)\n    user_function_velocity_gradient = DataFunction(exact_velocity_gradient!, [4,2]; name = \"grad(u_exact)\", dependencies = \"XT\", quadorder = 4)\n    user_function_rhs = DataFunction(exact_rhs!(viscosity), [2,2]; name = \"f\", dependencies = \"XT\", quadorder = 5)\n\n    # load Stokes problem prototype and assign data\n    StokesProblem = IncompressibleNavierStokesProblem(2; viscosity = viscosity, nonlinear = false)\n    add_boundarydata!(StokesProblem, 1, [1,2,3,4], BestapproxDirichletBoundary; data = user_function_velocity)\n    add_rhsdata!(StokesProblem, 1, RhsOperator(testfunction_operator, [1], user_function_rhs))\n\n    # add grad-div stabilisation\n    if graddiv > 0\n        add_operator!(StokesProblem, [1,1], AbstractBilinearForm(\"graddiv-stabilisation (div x div)\", Divergence, Divergence, MultiplyScalarAction(graddiv)))\n    end\n\n    # define bestapproximation problems\n    L2PressureBestapproximationProblem = L2BestapproximationProblem(user_function_pressure; bestapprox_boundary_regions = [])\n    L2VelocityBestapproximationProblem = L2BestapproximationProblem(user_function_velocity; bestapprox_boundary_regions = [1,2,3,4])\n    H1VelocityBestapproximationProblem = H1BestapproximationProblem(user_function_velocity_gradient, user_function_velocity; bestapprox_boundary_regions = [1,2,3,4])\n\n    # define ItemIntegrators for L2/H1 error computation and arrays to store them\n    L2VelocityErrorEvaluator = L2ErrorIntegrator(Float64, user_function_velocity, Identity; time = T)\n    L2PressureErrorEvaluator = L2ErrorIntegrator(Float64, user_function_pressure, Identity)\n    H1VelocityErrorEvaluator = L2ErrorIntegrator(Float64, user_function_velocity_gradient, Gradient; time = T)\n    L2error_velocity = []; L2error_pressure = []; NDofs = []\n    L2errorBestApproximation_velocity = []; L2errorBestApproximation_pressure = []\n    H1error_velocity = []; H1errorBestApproximation_velocity = []\n\n    # loop over levels\n    for level = 1 : nlevels\n\n        xgrid = uniform_refine(xgrid)\n\n        # generate FESpaces\n        FESpaceVelocity = FESpace{FETypes[1]}(xgrid)\n        FESpacePressure = FESpace{FETypes[2]}(xgrid; broken = broken_p)\n\n        # generate solution fector\n        Solution = FEVector{Float64}(\"Stokes velocity\",FESpaceVelocity)\n        append!(Solution,\"Stokes pressure\",FESpacePressure)\n        push!(NDofs,length(Solution.entries))\n\n        # set initial solution ( = bestapproximation at time 0)\n        L2VelocityBestapproximation = FEVector{Float64}(\"L2-Bestapproximation velocity\",FESpaceVelocity)\n        solve!(L2VelocityBestapproximation, L2VelocityBestapproximationProblem; time = 0)\n        Solution[1][:] = L2VelocityBestapproximation[1][:]\n\n        # generate time-dependent solver and chance rhs data\n        TCS = TimeControlSolver(StokesProblem, Solution, BackwardEuler; timedependent_equations = [1], maxlureuse = [-1], dt_testfunction_operator = [testfunction_operator], verbosity = verbosity)\n        advance_until_time!(TCS, timestep, T)\n\n        # solve bestapproximation problems at final time for comparison\n        L2PressureBestapproximation = FEVector{Float64}(\"L2-Bestapproximation pressure\",FESpacePressure)\n        H1VelocityBestapproximation = FEVector{Float64}(\"H1-Bestapproximation velocity\",FESpaceVelocity)\n        solve!(L2VelocityBestapproximation, L2VelocityBestapproximationProblem; time = T)\n        solve!(L2PressureBestapproximation, L2PressureBestapproximationProblem;)\n        solve!(H1VelocityBestapproximation, H1VelocityBestapproximationProblem; time = T)\n\n        # compute L2 and H1 error of all solutions\n        append!(L2error_velocity,sqrt(evaluate(L2VelocityErrorEvaluator,Solution[1])))\n        append!(L2errorBestApproximation_velocity,sqrt(evaluate(L2VelocityErrorEvaluator,L2VelocityBestapproximation[1])))\n        append!(L2error_pressure,sqrt(evaluate(L2PressureErrorEvaluator,Solution[2])))\n        append!(L2errorBestApproximation_pressure,sqrt(evaluate(L2PressureErrorEvaluator,L2PressureBestapproximation[1])))\n        append!(H1error_velocity,sqrt(evaluate(H1VelocityErrorEvaluator,Solution[1])))\n        append!(H1errorBestApproximation_velocity,sqrt(evaluate(H1VelocityErrorEvaluator,H1VelocityBestapproximation[1])))\n\n        # ouput errors\n        if (level == nlevels)\n            println(\"\\n         |   L2ERROR      order   |   L2ERROR      order   \")\n            println(\"   NDOF  | VELO-STOKES            | VELO-L2BEST            \");\n            order = 0\n            for j=1:nlevels\n                if j > 1\n                    order = log(L2error_velocity[j-1]/L2error_velocity[j]) / (log(NDofs[j]/NDofs[j-1])/2)\n                end\n                @printf(\"  %6d |\",NDofs[j]);\n                @printf(\" %.5e \",L2error_velocity[j])\n                @printf(\"   %.3f   |\",order)\n                if j > 1\n                    order = log(L2errorBestApproximation_velocity[j-1]/L2errorBestApproximation_velocity[j]) / (log(NDofs[j]/NDofs[j-1])/2)\n                end\n                @printf(\" %.5e \",L2errorBestApproximation_velocity[j])\n                @printf(\"   %.3f\\n\",order)\n            end\n            println(\"\\n         |   H1ERROR      order   |   H1ERROR      order   \")\n            println(\"   NDOF  | VELO-STOKES            | VELO-H1BEST            \");\n            order = 0\n            for j=1:nlevels\n                if j > 1\n                    order = log(H1error_velocity[j-1]/H1error_velocity[j]) / (log(NDofs[j]/NDofs[j-1])/2)\n                end\n                @printf(\"  %6d |\",NDofs[j]);\n                @printf(\" %.5e \",H1error_velocity[j])\n                @printf(\"   %.3f   |\",order)\n                if j > 1\n                    order = log(H1errorBestApproximation_velocity[j-1]/H1errorBestApproximation_velocity[j]) / (log(NDofs[j]/NDofs[j-1])/2)\n                end\n                @printf(\" %.5e \",H1errorBestApproximation_velocity[j])\n                @printf(\"   %.3f\\n\",order)\n            end\n            println(\"\\n         |   L2ERROR      order   |   L2ERROR      order   \")\n            println(\"   NDOF  | PRES-STOKES            | PRES-L2BEST            \");\n            order = 0\n            for j=1:nlevels\n                if j > 1\n                    order = log(L2error_pressure[j-1]/L2error_pressure[j]) / (log(NDofs[j]/NDofs[j-1])/2)\n                end\n                @printf(\"  %6d |\",NDofs[j]);\n                @printf(\" %.5e \",L2error_pressure[j])\n                @printf(\"   %.3f   |\",order)\n                if j > 1\n                    order = log(L2errorBestApproximation_pressure[j-1]/L2errorBestApproximation_pressure[j]) / (log(NDofs[j]/NDofs[j-1])/2)\n                end\n                @printf(\" %.5e \",L2errorBestApproximation_pressure[j])\n                @printf(\"   %.3f\\n\",order)\n            end\n            println(\"\\nLEGEND\\n======\")\n            println(\"VELO-STOKES : discrete Stokes velocity solution ($(FESpaceVelocity.name))\")\n            println(\"VELO-L2BEST : L2-Bestapproximation of exact velocity (with boundary data)\")\n            println(\"VELO-H1BEST : H1-Bestapproximation of exact velocity (with boudnary data)\")\n            println(\"PRES-STOKES : discrete Stokes pressure solution ($(FESpacePressure.name))\")\n            println(\"PRES-L2BEST : L2-Bestapproximation of exact pressure (without boundary data)\")\n\n            GradientRobustMultiPhysics.plot(Solution, [0,1,2], [Identity, Identity, Identity]; Plotter = Plotter, verbosity = verbosity)\n        end\n    end\nend\n\nend","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"Main.##295.Example_2DTransientStokes","category":"page"},{"location":"examples/doc_2d_transientstokes/#Output-of-default-main()-run","page":"2D Transient Stokes-Problem","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"Example_2DTransientStokes.main()","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"\nPREPARING TIME-DEPENDENT SOLVER\n===============================\n  system name = incompressible Stokes-Problem  @starttime = 0\n\n  FEs = H1BR{2} (ndofs = 54)\n        H1P0{1} (broken) (ndofs = 16)\n        \n  subiteration | equations that are solved together\n       [1]     | momentum equation\n               | incompressibility constraint\n\n\n  advancing in time until T = 1.0000e-02...\n\n    STEP  |    TIME    | LSRESIDUAL |   CHANGE                 \n          |            |  (total)   |  velocity    pressure  \n       1  | 1.0000e-03 | 8.5745e-14 | 6.0845e-02  3.2145e+01 \n       2  | 2.0000e-03 | 8.8569e-14 | 2.2416e-03  3.3918e+01 \n       3  | 3.0000e-03 | 7.4018e-14 | 2.2416e-03  4.4388e-09 \n       4  | 4.0000e-03 | 7.3139e-14 | 2.2416e-03  4.4403e-09 \n       5  | 5.0000e-03 | 6.8981e-14 | 2.2416e-03  4.4377e-09 \n       6  | 6.0000e-03 | 7.3198e-14 | 2.2416e-03  4.4425e-09 \n       7  | 7.0000e-03 | 8.0941e-14 | 2.2416e-03  4.4357e-09 \n       8  | 8.0000e-03 | 6.9868e-14 | 2.2416e-03  4.4406e-09 \n       9  | 9.0000e-03 | 8.2677e-14 | 2.2416e-03  4.4403e-09 \n      10  | 1.0000e-02 | 6.6962e-14 | 2.2416e-03  4.4366e-09 \n\n  arrived at time T = 1.0000e-02...\n\nPREPARING TIME-DEPENDENT SOLVER\n===============================\n  system name = incompressible Stokes-Problem  @starttime = 0\n\n  FEs = H1BR{2} (ndofs = 186)\n        H1P0{1} (broken) (ndofs = 64)\n        \n  subiteration | equations that are solved together\n       [1]     | momentum equation\n               | incompressibility constraint\n\n\n  advancing in time until T = 1.0000e-02...\n\n    STEP  |    TIME    | LSRESIDUAL |   CHANGE                 \n          |            |  (total)   |  velocity    pressure  \n       1  | 1.0000e-03 | 4.0327e-14 | 3.4431e-02  2.9439e+01 \n       2  | 2.0000e-03 | 3.7837e-14 | 5.0017e-03  3.4344e+01 \n       3  | 3.0000e-03 | 4.0510e-14 | 5.0017e-03  1.3763e-08 \n       4  | 4.0000e-03 | 3.9999e-14 | 5.0017e-03  1.3770e-08 \n       5  | 5.0000e-03 | 4.1171e-14 | 5.0017e-03  1.3771e-08 \n       6  | 6.0000e-03 | 3.7386e-14 | 5.0017e-03  1.3767e-08 \n       7  | 7.0000e-03 | 3.9555e-14 | 5.0017e-03  1.3763e-08 \n       8  | 8.0000e-03 | 4.1237e-14 | 5.0017e-03  1.3773e-08 \n       9  | 9.0000e-03 | 4.4919e-14 | 5.0017e-03  1.3770e-08 \n      10  | 1.0000e-02 | 4.1673e-14 | 5.0017e-03  1.3765e-08 \n\n  arrived at time T = 1.0000e-02...\n\nPREPARING TIME-DEPENDENT SOLVER\n===============================\n  system name = incompressible Stokes-Problem  @starttime = 0\n\n  FEs = H1BR{2} (ndofs = 690)\n        H1P0{1} (broken) (ndofs = 256)\n        \n  subiteration | equations that are solved together\n       [1]     | momentum equation\n               | incompressibility constraint\n\n\n  advancing in time until T = 1.0000e-02...\n\n    STEP  |    TIME    | LSRESIDUAL |   CHANGE                 \n          |            |  (total)   |  velocity    pressure  \n       1  | 1.0000e-03 | 2.3364e-14 | 2.0235e-02  1.4106e+01 \n       2  | 2.0000e-03 | 2.0887e-14 | 1.0631e-02  2.5067e+01 \n       3  | 3.0000e-03 | 2.0439e-14 | 1.0631e-02  3.5571e-08 \n       4  | 4.0000e-03 | 2.1535e-14 | 1.0631e-02  3.5532e-08 \n       5  | 5.0000e-03 | 2.1938e-14 | 1.0631e-02  3.5560e-08 \n       6  | 6.0000e-03 | 2.1514e-14 | 1.0631e-02  3.5560e-08 \n       7  | 7.0000e-03 | 2.1554e-14 | 1.0631e-02  3.5529e-08 \n       8  | 8.0000e-03 | 1.9879e-14 | 1.0631e-02  3.5571e-08 \n       9  | 9.0000e-03 | 2.1202e-14 | 1.0631e-02  3.5542e-08 \n      10  | 1.0000e-02 | 2.2222e-14 | 1.0631e-02  3.5521e-08 \n\n  arrived at time T = 1.0000e-02...\n\nPREPARING TIME-DEPENDENT SOLVER\n===============================\n  system name = incompressible Stokes-Problem  @starttime = 0\n\n  FEs = H1BR{2} (ndofs = 2658)\n        H1P0{1} (broken) (ndofs = 1024)\n        \n  subiteration | equations that are solved together\n       [1]     | momentum equation\n               | incompressibility constraint\n\n\n  advancing in time until T = 1.0000e-02...\n\n    STEP  |    TIME    | LSRESIDUAL |   CHANGE                 \n          |            |  (total)   |  velocity    pressure  \n       1  | 1.0000e-03 | 1.1036e-14 | 2.2664e-02  9.2561e+00 \n       2  | 2.0000e-03 | 1.0812e-14 | 2.1940e-02  1.6447e+01 \n       3  | 3.0000e-03 | 1.1070e-14 | 2.1940e-02  3.3811e-08 \n       4  | 4.0000e-03 | 1.0864e-14 | 2.1940e-02  3.3987e-08 \n       5  | 5.0000e-03 | 1.1132e-14 | 2.1940e-02  3.4089e-08 \n       6  | 6.0000e-03 | 1.0918e-14 | 2.1940e-02  3.4223e-08 \n       7  | 7.0000e-03 | 1.1361e-14 | 2.1940e-02  3.4269e-08 \n       8  | 8.0000e-03 | 1.0858e-14 | 2.1940e-02  3.4443e-08 \n       9  | 9.0000e-03 | 1.1139e-14 | 2.1940e-02  3.4506e-08 \n      10  | 1.0000e-02 | 1.1059e-14 | 2.1940e-02  3.4665e-08 \n\n  arrived at time T = 1.0000e-02...\n\nPREPARING TIME-DEPENDENT SOLVER\n===============================\n  system name = incompressible Stokes-Problem  @starttime = 0\n\n  FEs = H1BR{2} (ndofs = 10434)\n        H1P0{1} (broken) (ndofs = 4096)\n        \n  subiteration | equations that are solved together\n       [1]     | momentum equation\n               | incompressibility constraint\n\n\n  advancing in time until T = 1.0000e-02...\n\n    STEP  |    TIME    | LSRESIDUAL |   CHANGE                 \n          |            |  (total)   |  velocity    pressure  \n       1  | 1.0000e-03 | 5.5742e-15 | 4.3992e-02  4.0327e+01 \n       2  | 2.0000e-03 | 5.5560e-15 | 4.4615e-02  1.0217e+01 \n       3  | 3.0000e-03 | 5.6564e-15 | 4.4612e-02  1.8086e-06 \n       4  | 4.0000e-03 | 5.6271e-15 | 4.4609e-02  1.7267e-06 \n       5  | 5.0000e-03 | 5.5641e-15 | 4.4606e-02  1.6488e-06 \n       6  | 6.0000e-03 | 5.6073e-15 | 4.4603e-02  1.5750e-06 \n       7  | 7.0000e-03 | 5.7209e-15 | 4.4601e-02  1.5048e-06 \n       8  | 8.0000e-03 | 5.6623e-15 | 4.4598e-02  1.4381e-06 \n       9  | 9.0000e-03 | 5.5803e-15 | 4.4596e-02  1.3748e-06 \n      10  | 1.0000e-02 | 5.5989e-15 | 4.4594e-02  1.3148e-06 \n\n  arrived at time T = 1.0000e-02...\n\n         |   L2ERROR      order   |   L2ERROR      order   \n   NDOF  | VELO-STOKES            | VELO-L2BEST            \n      70 | 1.66625e-02    0.000   | 6.56132e-03    0.000\n     250 | 4.82864e-03    1.946   | 1.20901e-03    2.657\n     946 | 1.31357e-03    1.956   | 2.23836e-04    2.535\n    3682 | 3.54528e-04    1.928   | 4.37347e-05    2.403\n   14530 | 9.54968e-05    1.911   | 9.13956e-06    2.281\n\n         |   H1ERROR      order   |   H1ERROR      order   \n   NDOF  | VELO-STOKES            | VELO-H1BEST            \n      70 | 1.75365e-01    0.000   | 8.28255e-02    0.000\n     250 | 1.00801e-01    0.870   | 3.28129e-02    1.455\n     946 | 5.60064e-02    0.883   | 1.39950e-02    1.281\n    3682 | 3.09099e-02    0.875   | 6.41292e-03    1.148\n   14530 | 1.59987e-02    0.959   | 3.06865e-03    1.074\n\n         |   L2ERROR      order   |   L2ERROR      order   \n   NDOF  | PRES-STOKES            | PRES-L2BEST            \n      70 | 6.99626e-02    0.000   | 6.98503e-02    0.000\n     250 | 3.49974e-02    1.088   | 3.49744e-02    1.087\n     946 | 1.74974e-02    1.042   | 1.74943e-02    1.041\n    3682 | 8.74844e-03    1.020   | 8.74806e-03    1.020\n   14530 | 4.37419e-03    1.010   | 4.37415e-03    1.010\n\nLEGEND\n======\nVELO-STOKES : discrete Stokes velocity solution (H1BR{2})\nVELO-L2BEST : L2-Bestapproximation of exact velocity (with boundary data)\nVELO-H1BEST : H1-Bestapproximation of exact velocity (with boudnary data)\nPRES-STOKES : discrete Stokes pressure solution (H1P0{1} (broken))\nPRES-L2BEST : L2-Bestapproximation of exact pressure (without boundary data)\n","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"","category":"page"},{"location":"examples/doc_2d_transientstokes/","page":"2D Transient Stokes-Problem","title":"2D Transient Stokes-Problem","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_3d_poisson/#D-Poisson-Problem","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"","category":"section"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"(source code)","category":"page"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"This example computes the solution u of the three dimensional Poisson problem","category":"page"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"beginaligned\n-Delta u  = f quad textin  Omega\nendaligned","category":"page"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"with some right-hand side f on the unit cube domain Omega on a series of uniform refined meshes (tetrahedra or parallelepipeds).","category":"page"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"module Example_3DPoisson\n\nusing GradientRobustMultiPhysics\nusing Printf\n\n# problem data\nfunction exact_function!(result,x::Array{<:Real,1})\n    result[1] = x[1]*(x[3] - x[2]) + x[2]*x[2]\n    return nothing\nend\nfunction exact_gradient!(result,x::Array{<:Real,1})\n    result[1] = x[3] - x[2]\n    result[2] = - x[1] + 2*x[2]\n    result[3] = x[1]\n    return nothing\nend\nfunction rhs!(result)\n    result[1] = - 2\n    return nothing\nend\n\n# everything is wrapped in a main function\nfunction main(; Plotter = nothing, verbosity = 0)\n\n    # choose initial mesh\n    # (replace Parallelepiped3D by Tetrahedron3D to change the cell geometries)\n    xgrid = grid_unitcube(Tetrahedron3D)\n    nlevels = 5 # maximal number of refinement levels\n    write_vtk = false\n\n    # set finite element type used for discretisation\n    FEType = H1P1{1}\n\n    # negotiate data functions to the package\n    user_function = DataFunction(exact_function!, [1,3]; name = \"u_exact\", dependencies = \"X\", quadorder = 2)\n    user_function_gradient = DataFunction(exact_gradient!, [3,3]; name = \"grad(u_exact)\", dependencies = \"X\", quadorder = 1)\n    user_function_rhs = DataFunction(rhs!, [1,3]; dependencies = \"\", name = \"f\", quadorder = 0)\n\n    # create Poisson problem via prototype and add data\n    Problem = PoissonProblem(3; diffusion = 1.0)\n    add_boundarydata!(Problem, 1, [1,2,3,4,5,6], BestapproxDirichletBoundary; data = user_function)\n    add_rhsdata!(Problem, 1,  RhsOperator(Identity, [0], user_function_rhs))\n\n    # prepare error calculation\n    L2ErrorEvaluator = L2ErrorIntegrator(Float64, user_function, Identity)\n    H1ErrorEvaluator = L2ErrorIntegrator(Float64, user_function_gradient, Gradient)\n    L2error = []; H1error = []; NDofs = []\n\n    # loop over levels\n    Solution = nothing\n    for level = 1 : nlevels\n\n        # uniform mesh refinement\n        if level > 1\n            xgrid = uniform_refine(xgrid)\n        end\n\n        # create finite element space\n        FES = FESpace{FEType}(xgrid)\n\n        # solve the problem\n        Solution = FEVector{Float64}(\"Solution\",FES)\n        push!(NDofs,length(Solution.entries))\n        solve!(Solution, Problem; verbosity = verbosity)\n\n        # calculate L2 and H1 error\n        append!(L2error,sqrt(evaluate(L2ErrorEvaluator,Solution[1])))\n        append!(H1error,sqrt(evaluate(H1ErrorEvaluator,Solution[1])))\n\n        if write_vtk\n            mkpath(\"data/example_poisson3d/\")\n            writeVTK!(\"data/example_poisson3d/results_level$(level).vtk\", Solution)\n        end\n\n    end\n\n    # output errors in a nice table\n    println(\"\\n   NDOF  |   L2ERROR   |   H1ERROR\")\n    for j=1:nlevels\n        @printf(\"  %6d |\",NDofs[j]);\n        @printf(\" %.5e |\",L2error[j])\n        @printf(\" %.5e\\n\",H1error[j])\n    end\n\n    # plot (Plotter = Makie should work)\n    GradientRobustMultiPhysics.plot(Solution, [1], [Identity]; Plotter = Plotter, verbosity = verbosity)\nend\n\nend","category":"page"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"Main.##316.Example_3DPoisson","category":"page"},{"location":"examples/doc_3d_poisson/#Output-of-default-main()-run","page":"3D Poisson-Problem","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"Example_3DPoisson.main()","category":"page"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"\n   NDOF  |   L2ERROR   |   H1ERROR\n       8 | 8.37397e-02 | 6.55273e-01\n      27 | 3.38581e-02 | 4.38269e-01\n     125 | 8.97264e-03 | 2.25880e-01\n     729 | 2.28139e-03 | 1.13818e-01\n    4913 | 5.73658e-04 | 5.70179e-02\n","category":"page"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"","category":"page"},{"location":"examples/doc_3d_poisson/","page":"3D Poisson-Problem","title":"3D Poisson-Problem","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/doc_rational_massmatrix/#Rational-Mass-Matrix","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"","category":"section"},{"location":"examples/doc_rational_massmatrix/","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"(source code)","category":"page"},{"location":"examples/doc_rational_massmatrix/","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"This example demonstrates the usage of rational numbers to calculate e.g. exact mass matrices on reference domains (if exact quadrature rules in Rational number format are available).","category":"page"},{"location":"examples/doc_rational_massmatrix/","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"module Example_RationalMAMA\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\n\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 0, Plotter = nothing)\n\n    # reference domain as extendable grid\n    xgrid = reference_domain(Triangle2D, Rational)\n\n    # define finite element space\n    FEType = H1P1{1}\n    FES = FESpace{FEType}(xgrid)\n\n    # define mass matrix bilinear form\n    MAMA_BLF = SymmetricBilinearForm(Rational,ON_CELLS,[FES,FES],[Identity,Identity],DoNotChangeAction(1,Rational))\n\n    # assemble mass matrix\n    MAMA = FEMatrix{Rational}(\"mass matrix for $(FEType)\",FES)\n    assemble!(MAMA[1],MAMA_BLF; verbosity = verbosity)\n\n    # divide by area\n    MAMA.entries ./= xgrid[CellVolumes][1]\n\n    # print matrix\n    for j = 1 : size(MAMA.entries,1)\n        println(\"$(MAMA.entries[j,:])\")\n    end\nend\n\nend","category":"page"},{"location":"examples/doc_rational_massmatrix/","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"Main.##321.Example_RationalMAMA","category":"page"},{"location":"examples/doc_rational_massmatrix/#Output-of-default-main()-run","page":"Rational Mass Matrix","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_rational_massmatrix/","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"Example_RationalMAMA.main()","category":"page"},{"location":"examples/doc_rational_massmatrix/","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"Rational[1//6, 1//12, 1//12]\nRational[1//12, 1//6, 1//12]\nRational[1//12, 1//12, 1//6]\n","category":"page"},{"location":"examples/doc_rational_massmatrix/","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"","category":"page"},{"location":"examples/doc_rational_massmatrix/","page":"Rational Mass Matrix","title":"Rational Mass Matrix","text":"This page was generated using Literate.jl.","category":"page"},{"location":"assembly_details/#Assembly-Details","page":"Assembly Details","title":"Assembly Details","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"The assembly of an operator is essentially based on a combination of Assembly Types and Assembly Patterns. The assembly type mainly allows to choose the geometry information needed for providing quadrature and dof handling. The assembly pattern then basically evaluates the function operators and action for the ansatz and test functions and does the quadrature-weighted accumulation into matrices or vectors that represent the operators.","category":"page"},{"location":"assembly_details/#Assembly-Types","page":"Assembly Details","title":"Assembly Types","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"The following assembly types are available.","category":"page"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"AssemblyType Description\nON_CELLS assembles over the cells of the mesh\nON_FACES assembles over all faces of the mesh\nON_IFACES assembles over the interior faces of the mesh\nON_BFACES assembles over the boundary faces of the mesh\nON_EDGES (*) assembles over all edges of the mesh (in 3D)\nON_BEDGES (*) assembles over the boundary edges of the mesh (in 3D)","category":"page"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"note: Note\n(*) = only reasonable in 3D and still experimental, might have some issues","category":"page"},{"location":"assembly_details/#Assembly-Patterns","page":"Assembly Details","title":"Assembly Patterns","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"Each Pattern comes with a number of arguments/quantities with associated Function Operators as well as one of the Assembly Types that states whether the form is evaluated over CELLS, FACES order BFACES (see above). Important note: this assembly type is relative to the grid of the first argument of the pattern. If this argument already lives ONFACES and the pattern is also ONFACES, it will ultimatively assemble on the faces of the faces (that are the edges of the grid with these faces). Moreover, patterns can have Abstract Actions that allow to make the evaluations parameter-, region- and/or function-dependent. Each pattern then has usually on to three implementation that writes into FEMatrix or FEVector (where e.g. a subset of arguments is fixed) or evaluates the pattern in the given FEVectorBlocks.","category":"page"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"The patterns are used by the assembly of the PDE operators defined in a PDE Description. However, it is also possible for the user to use them directly, see e.g. the example Commuting Interpolators (2D).","category":"page"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"The following table lists all available assembly patterns and how they can be used for assembly or evaluations.","category":"page"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"AssemblyPattern evaluate assemble into matrix assembled into vector\nItemIntegrator yes no no\nLinearForm no no yes\nBilinearForm no yes yes (1)\nTrilinearForm no yes (1) yes (2)\nMultilinearForm no no yes (N-1)\nNonlinearForm no yes (L) yes (L)","category":"page"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"Number in brackets denotes the number of fixed arguments needed for this assembly, (L) means that a current solution is needed to evaluate (to evaluate the linearisation of the nonlinear form in this state). Evaluations of the other AssemblyPatterns will be possible in a future update, but currently have to be performed by maintaining a duplicate of the pattern rewritten as an ItemIntegrator.","category":"page"},{"location":"assembly_details/#ItemIntegrator","page":"Assembly Details","title":"ItemIntegrator","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"ItemIntegrator","category":"page"},{"location":"assembly_details/#GradientRobustMultiPhysics.ItemIntegrator","page":"Assembly Details","title":"GradientRobustMultiPhysics.ItemIntegrator","text":"function ItemIntegrator(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    regions::Array{Int,1} = [0])\n\nCreates an ItemIntegrator assembly pattern with the given operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"assembly_details/#Linearform","page":"Assembly Details","title":"Linearform","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"LinearForm","category":"page"},{"location":"assembly_details/#GradientRobustMultiPhysics.LinearForm","page":"Assembly Details","title":"GradientRobustMultiPhysics.LinearForm","text":"function LinearForm(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    FE::Array{FESpace,1},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    regions::Array{Int,1} = [0])\n\nCreates a LinearForm assembly pattern with the given FESpaces, operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"assembly_details/#Bilinearform","page":"Assembly Details","title":"Bilinearform","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"BilinearForm\nSymmetricBilinearForm","category":"page"},{"location":"assembly_details/#GradientRobustMultiPhysics.BilinearForm","page":"Assembly Details","title":"GradientRobustMultiPhysics.BilinearForm","text":"function BilinearForm(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    FE::Array{FESpace,1},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    regions::Array{Int,1} = [0])\n\nCreates a (unsymmetric) BilinearForm assembly pattern with the given FESpaces, operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"assembly_details/#GradientRobustMultiPhysics.SymmetricBilinearForm","page":"Assembly Details","title":"GradientRobustMultiPhysics.SymmetricBilinearForm","text":"function SymmetricBilinearForm(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    FE::Array{FESpace,1},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    regions::Array{Int,1} = [0])\n\nCreates a symmetric BilinearForm assembly pattern with the given FESpaces, operators and action etc. Symmetry is not checked automatically, but is assumed during assembly!\n\n\n\n\n\n","category":"function"},{"location":"assembly_details/#Trilinearform","page":"Assembly Details","title":"Trilinearform","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"TrilinearForm","category":"page"},{"location":"assembly_details/#Multilinearform","page":"Assembly Details","title":"Multilinearform","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"MultilinearForm","category":"page"},{"location":"assembly_details/#GradientRobustMultiPhysics.MultilinearForm","page":"Assembly Details","title":"GradientRobustMultiPhysics.MultilinearForm","text":"function MultilinearForm(\n    T::Type{<:Real},\n    AT::Type{<:AbstractAssemblyType},\n    FE::Array{FESpace,1},\n    operators::Array{DataType,1}, \n    action::AbstractAction; \n    regions::Array{Int,1} = [0])\n\nCreates a MultilinearForm assembly pattern with the given FESpaces, operators and action etc.\n\n\n\n\n\n","category":"function"},{"location":"assembly_details/#Nonlinearform","page":"Assembly Details","title":"Nonlinearform","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"NonlinearForm","category":"page"},{"location":"assembly_details/#GradientRobustMultiPhysics.NonlinearForm","page":"Assembly Details","title":"GradientRobustMultiPhysics.NonlinearForm","text":"function NonlinearForm(\n    T::Type{<:Real},\n    FES::Array{FESpace,1},          # finite element spaces for each operator of the ansatz function and the last one refers to the test function\n    operators::Array{DataType,1},   # operators that should be evaluated for the ansatz function and the last one refers to the test function\n    action::AbstractAction;         # action that shoul have an AbstractNLActionKernel\n    regions::Array{Int,1} = [0])\n\nCreates a NonlinearForm assembly pattern.\n\n\n\n\n\n","category":"function"},{"location":"assembly_details/#Evaluate!-and-Assemble!","page":"Assembly Details","title":"Evaluate! & Assemble!","text":"","category":"section"},{"location":"assembly_details/","page":"Assembly Details","title":"Assembly Details","text":"evaluate!\nassemble!","category":"page"},{"location":"assembly_details/#GradientRobustMultiPhysics.evaluate!","page":"Assembly Details","title":"GradientRobustMultiPhysics.evaluate!","text":"function evaluate!(\n    b::AbstractArray{T,2},\n    AP::AssemblyPattern{APT,T,AT},\n    FEB::FEVectorBlock;\n    verbosity::Int = 0) where {APT <: APT_ItemIntegrator, T<: Real, AT <: AbstractAssemblyType}\n\nEvaluation of an ItemIntegrator assembly pattern with given FEVectorBlocks FEB into given two-dimensional Array b.\n\n\n\n\n\n","category":"function"},{"location":"assembly_details/#GradientRobustMultiPhysics.assemble!","page":"Assembly Details","title":"GradientRobustMultiPhysics.assemble!","text":"assemble!(\n    A::AbstractArray{T,2},\n    AP::AssemblyPattern{APT,T,AT};\n    apply_action_to::Int = 1,\n    verbosity::Int = 0,\n    factor = 1,\n    transposed_assembly::Bool = false,\n    transpose_copy = Nothing)  where {APT <: APT_BilinearForm, T <: Real, AT <: AbstractAssemblyType}\n\nAssembly of a BilinearForm BLF into given two-dimensional AbstractArray (e.g. FEMatrixBlock).\n\n\n\n\n\nassemble!(\n    b::AbstractArray{T,1},\n    fixedFE::FEVectorBlock,    # coefficient for fixed 2nd component\n    AP::AssemblyPattern{APT,T,AT};\n    apply_action_to::Int = 1,\n    fixed_argument::Int = 2,\n    factor = 1,\n    verbosity::Int = 0) where where {APT <: APT_BilinearForm, T <: Real, AT <: AbstractAssemblyType}\n\nAssembly of a BilinearForm BLF into given one-dimensional AbstractArray (e.g. a FEVectorBlock). Here, the second argument is fixed (default) by the given coefficients in fixedFE. With applyactionto=2 the action can be also applied to the second argument instead of the first one (default).\n\n\n\n\n\nassemble!(\n    assemble!(\n    A::AbstractArray{T,2},\n    FE1::FEVectorBlock,\n    AP::TrilinearForm{T, AT};\n    verbosity::Int = 0,\n    fixed_argument::Int = 1,\n    transposed_assembly::Bool = false,\n    factor = 1)\n\nAssembly of a TrilinearForm AP into given two-dimensional AbstractArray (e.g. a FEMatrixBlock). Here, one argument (specified by fixed_argument) is fixed by the given coefficients in FE1. Note, that the action is (currently) always applied to the first and second argument.\n\n\n\n\n\nassemble!(\n    assemble!(\n    b::AbstractVector,\n    FE1::FEVectorBlock,\n    FE2::FEVectorBlock.\n    AP::AssemblyPattern{APT,T,AT};\n    verbosity::Int = 0,\n    factor = 1)\n\nAssembly of a TrilinearForm AP into given one-dimensional AbstractArray (e.g. a FEVectorBlock). Here, the first two arguments are fixed by the given coefficients in FE1 and FE2.\n\n\n\n\n\nassemble!(\n    assemble!(\n    b::AbstractVector,\n    FE::Array{<:FEVectorBlock,1},\n    AP::AssemblyPattern{APT,T,AT};\n    verbosity::Int = 0,\n    factor = 1)\n\nAssembly of a MultilinearForm AP into given one-dimensional AbstractArray (e.g. a FEVectorBlock). Here, the all but the last arguments are fixed by the given coefficients in the components of FE.\n\n\n\n\n\nassemble!(\n    A::AbstractArray{T,2},\n    AP::AssemblyPattern{APT,T,AT};\n    FEB::Array{<:FEVectorBlock,1};         # coefficients of current solution for each operator\n    verbosity::Int = 0,\n    factor = 1,\n    transposed_assembly::Bool = false\n\nAssembly of a NonlinearForm assembly pattern into given two-dimensional AbstractArray (e.g. FEMatrixBlock).\n\n\n\n\n\nassemble!(\n    b::AbstractVector,\n    AP::NonlinearForm{T, AT},\n    FEB::Array{<:FEVectorBlock,1};         # coefficients of current solution for each operator\n    verbosity::Int = 0,\n    factor = 1,\n    transposed_assembly::Bool = false\n\nAssembly of a NonlinearForm AP into given AbstractVector (e.g. FEMatrixBlock).\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"(Image: Build status) (Image: ) (Image: ) (Image: DOI)","category":"page"},{"location":"#GradientRobustMultiPhysics.jl","page":"Home","title":"GradientRobustMultiPhysics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package offers (mostly low-order) finite element methods for multiphysics problems in Julia that focus on the preservation of structural and qualitative properties, in particular the gradient-robustness property for the discretisation of (nearly) incompressible flows and resulting qualitative properties in coupled processes. The code therefore offers several classical and novel non-standard finite element discretisations to play and compare with in these applications and a toolkit to setup multi-physics problems by defining PDE systems and generating fixed-point iterations to solve them.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The implementation is based on ExtendableGrids.jl that allows to have unstructured grids with mixed element geometries in it, e.g. triangles and quads in the same mesh.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also note, that this package is part of the meta-package PDELIB.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe focus is (at least currently) not on high-performance, high-order or parallel-computing. Also, this package is still in an early development stage and features and interfaces might change in future updates.","category":"page"},{"location":"#What-is-gradient-robustness?","page":"Home","title":"What is gradient-robustness?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Gradient-robustness is a feature of discretisations that exactly balance gradient forces in the momentum balance. In the case of the incompressible Navier–Stokes equations this means that the discrete velocity does not depend on the exact pressure. Divergence-free finite element methods have this property but are usually expensive and difficult to contruct. However, also non-divergence-free classical finite element methods can be made pressure-robust with the help of reconstruction operators applied to testfuntions in certain terms of the momentum balance, see e.g. references [1,2] below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Recently gradient-robustness was also connected to the design of well-balanced schemes e.g. in the context of (nearly) compressible flows, see e.g. reference [3] below.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]   \"On the divergence constraint in mixed finite element methods for incompressible flows\",\n      V. John, A. Linke, C. Merdon, M. Neilan and L. Rebholz,\n      SIAM Review 59(3) (2017), 492–544,\n      >Journal-Link<,       >Preprint-Link<\n[2]   \"Pressure-robustness and discrete Helmholtz projectors in mixed finite element methods for the incompressible Navier–Stokes equations\",\n      A. Linke and C. Merdon,       Computer Methods in Applied Mechanics and Engineering 311 (2016), 304–326,\n      >Journal-Link<       >Preprint-Link<\n[3]   \"A gradient-robust well-balanced scheme for the compressible isothermal Stokes problem\",\n      M. Akbas, T. Gallouet, A. Gassmann, A. Linke and C. Merdon,\n      Computer Methods in Applied Mechanics and Engineering 367 (2020),\n      >Journal-Link<       >Preprint-Link<","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"via Julia package manager in Julia 1.5 or above:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# latest stable version\n(@v1.5) pkg> add GradientRobustMultiPhysics\n# latest version\n(@v1.5) pkg> add GradientRobustMultiPhysics#master","category":"page"},{"location":"#Dependencies-on-other-Julia-packages","page":"Home","title":"Dependencies on other Julia packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ExtendableGrids.jl\nGridVisualize.jl\nExtendableSparse.jl\nDocStringExtensions.jl\nForwardDiff.jl\nDiffResults.jl\nIterativeSolvers.jl\nBenchmarkTools.jl","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The general work-flow is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Describe your PDE system with the help of the PDE Description (possibly based on one of the PDE Prototypes). Additional parameters, right-hand side and boundary data can be assigned via User Data and Action Kernels.\nGenerate a mesh, possibly using one of the constructors by ExtendableGrid.jl or via mesh generators in SimplexGridFactory.jl.\nDefine finite element ansatz spaces (see Finite Element Spaces and Arrays for details) for the unknowns of your PDE system.\nSolve by using solve! or via a TimeControlSolver and advance! if the PDE system is time-dependent (see PDE Solvers for details).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please have a look at the Examples.","category":"page"},{"location":"examples/doc_2d_cookmembrane/#D-Linear-Elasticity","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"","category":"section"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"(source code)","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"This example computes the solution mathbfu of the linear elasticity problem","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"beginaligned\n-mathrmdiv (mathbbC epsilon(mathbfu))  = mathbff quad textin  Omega\nmathbbC epsilon(mathbfu) cdot mathbfn  = mathbfg quad textalong  Gamma_N\nendaligned","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"with exterior force mathbff, Neumann boundary force mathbfg, and the stiffness tensor","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"mathbbC epsilon(mathbfu) = 2 mu epsilon( mathbfu) + lambda mathrmtr(epsilon( mathbfu))","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"for isotropic media.","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"The domain will be the Cook membrane and the displacement has homogeneous boundary conditions on the left side of the domain and Neumann boundary conditions (i.e. a force that pulls the domain upwards) on the right side.","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"module Example_2DCookMembrane\n\nusing GradientRobustMultiPhysics\nusing ExtendableGrids\nusing Printf\n\n# problem data for Neumann boundary\nfunction neumann_force_right!(result)\n    result[1] = 0\n    result[2] = 10\nend\n\n# everything is wrapped in a main function\nfunction main(; verbosity = 1, Plotter = nothing)\n\n    # load mesh and refine\n    xgrid = simplexgrid(\"assets/2d_grid_cookmembrane.sg\")\n    xgrid = uniform_refine(xgrid,2)\n\n    # problem parameters\n    elasticity_modulus = 1000 # elasticity modulus\n    poisson_number = 1//3 # Poisson number\n    shear_modulus = (1/(1+poisson_number))*elasticity_modulus\n    lambda = (poisson_number/(1-2*poisson_number))*shear_modulus\n\n    # negotiate data function to the package\n    user_function_neumann_bnd = DataFunction(neumann_force_right!, [2,2]; name = \"g\", dependencies = \"\", quadorder = 0)\n\n    # choose finite element type\n    FEType = H1P1{2} # P1-Courant\n    #FEType = H1P2{2,2} # P2\n\n    # PDE description via prototype\n    LinElastProblem = LinearElasticityProblem(2; shear_modulus = shear_modulus, lambda = lambda)\n\n    # add Neumann boundary data\n    add_rhsdata!(LinElastProblem, 1,  RhsOperator(Identity, [2], user_function_neumann_bnd; AT = ON_BFACES))\n\n    # add Dirichlet boundary data\n    add_boundarydata!(LinElastProblem, 1, [4], HomogeneousDirichletBoundary)\n\n    # show problem definition\n    show(LinElastProblem)\n\n    # generate FESpace\n    FES = FESpace{FEType}(xgrid)\n\n    # solve PDE\n    Solution = FEVector{Float64}(\"displacement\",FES)\n    solve!(Solution, LinElastProblem; verbosity = verbosity)\n\n    # plot stress\n    GradientRobustMultiPhysics.plot(Solution, [1,1], [Identity, Gradient]; Plotter = Plotter, verbosity = verbosity)\nend\n\nend","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"Main.##265.Example_2DCookMembrane","category":"page"},{"location":"examples/doc_2d_cookmembrane/#Output-of-default-main()-run","page":"2D Linear Elasticity","title":"Output of default main() run","text":"","category":"section"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"Example_2DCookMembrane.main()","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"\nPDE-DESCRIPTION\n===============\n  system name = linear elasticity problem\n\n     id   | unknown name / equation name\n    [1]   | displacement / displacement equation \n\n  LHS block | PDEOperator(s)\n    [1,1]   | Hookian2D (regions = [0])\n\n  RHS block | PDEOperator(s)\n     [1]    | g * Identity(v_h) (regions = [2])\n\n   BoundaryOperator[1] : HomogeneousDirichletBoundary -> [4]\n                          \n\n\nSOLVER\n======\n  system name = linear elasticity problem  @time = 0\n\n  target (FE) = displacement (H1P1{2}, ndofs = 3738)\n                \n  subiteration | equations that are solved together\n       [1]     | displacement equation\n\n  residuals = [4.689352558095981e-23]\n","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"","category":"page"},{"location":"examples/doc_2d_cookmembrane/","page":"2D Linear Elasticity","title":"2D Linear Elasticity","text":"This page was generated using Literate.jl.","category":"page"}]
}
